// Generated by Haxe 4.3.1
#ifndef INCLUDED_tink_core__Future_FutureObject
#define INCLUDED_tink_core__Future_FutureObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(tink,core,FutureStatus)
HX_DECLARE_CLASS2(tink,core,LinkObject)
HX_DECLARE_CLASS3(tink,core,_Future,FutureObject)

namespace tink{
namespace core{
namespace _Future{


class HXCPP_CLASS_ATTRIBUTES FutureObject_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FutureObject_obj OBJ_;
		FutureObject_obj();

	public:
		enum { _hx_ClassId = 0x75d0f9d3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="tink.core._Future.FutureObject")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"tink.core._Future.FutureObject"); }
		static ::hx::ObjectPtr< FutureObject_obj > __new();
		static ::hx::ObjectPtr< FutureObject_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FutureObject_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FutureObject",82,eb,54,94); }

		virtual  ::tink::core::FutureStatus getStatus();
		::Dynamic getStatus_dyn();

		virtual ::Dynamic handle( ::Dynamic callback);
		::Dynamic handle_dyn();

		virtual void eager();
		::Dynamic eager_dyn();

};

} // end namespace tink
} // end namespace core
} // end namespace _Future

#endif /* INCLUDED_tink_core__Future_FutureObject */ 
