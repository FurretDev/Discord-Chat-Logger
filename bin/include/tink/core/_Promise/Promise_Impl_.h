// Generated by Haxe 4.3.1
#ifndef INCLUDED_tink_core__Promise_Promise_Impl_
#define INCLUDED_tink_core__Promise_Promise_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(tink,core,FutureTrigger)
HX_DECLARE_CLASS2(tink,core,LinkObject)
HX_DECLARE_CLASS2(tink,core,Outcome)
HX_DECLARE_CLASS2(tink,core,TypedError)
HX_DECLARE_CLASS3(tink,core,_Future,FutureObject)
HX_DECLARE_CLASS3(tink,core,_Lazy,Computable)
HX_DECLARE_CLASS3(tink,core,_Lazy,LazyObject)
HX_DECLARE_CLASS3(tink,core,_Promise,Promise_Impl_)

namespace tink{
namespace core{
namespace _Promise{


class HXCPP_CLASS_ATTRIBUTES Promise_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Promise_Impl__obj OBJ_;
		Promise_Impl__obj();

	public:
		enum { _hx_ClassId = 0x03edc1ee };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="tink.core._Promise.Promise_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"tink.core._Promise.Promise_Impl_"); }

		inline static ::hx::ObjectPtr< Promise_Impl__obj > __new() {
			::hx::ObjectPtr< Promise_Impl__obj > __this = new Promise_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Promise_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Promise_Impl__obj *__this = (Promise_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Promise_Impl__obj), false, "tink.core._Promise.Promise_Impl_"));
			*(void **)__this = Promise_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Promise_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Promise_Impl_",5b,00,ba,be); }

		static void __boot();
		static  ::tink::core::_Future::FutureObject NOISE;
		static  ::tink::core::_Future::FutureObject NEVER;
		static  ::tink::core::_Future::FutureObject never();
		static ::Dynamic never_dyn();

		static  ::tink::core::_Future::FutureObject _new( ::Dynamic f);
		static ::Dynamic _new_dyn();

		static  ::tink::core::_Future::FutureObject eager( ::tink::core::_Future::FutureObject this1);
		static ::Dynamic eager_dyn();

		static  ::tink::core::_Future::FutureObject map( ::tink::core::_Future::FutureObject this1, ::Dynamic f);
		static ::Dynamic map_dyn();

		static  ::tink::core::_Future::FutureObject flatMap( ::tink::core::_Future::FutureObject this1, ::Dynamic f);
		static ::Dynamic flatMap_dyn();

		static  ::tink::core::_Future::FutureObject tryRecover( ::tink::core::_Future::FutureObject this1, ::Dynamic f);
		static ::Dynamic tryRecover_dyn();

		static  ::tink::core::_Future::FutureObject recover( ::tink::core::_Future::FutureObject this1, ::Dynamic f);
		static ::Dynamic recover_dyn();

		static  ::tink::core::_Future::FutureObject mapError( ::tink::core::_Future::FutureObject this1, ::Dynamic f);
		static ::Dynamic mapError_dyn();

		static  ::tink::core::_Future::FutureObject withSideEffect( ::tink::core::_Future::FutureObject this1, ::Dynamic c);
		static ::Dynamic withSideEffect_dyn();

		static ::Dynamic handle( ::tink::core::_Future::FutureObject this1, ::Dynamic cb);
		static ::Dynamic handle_dyn();

		static  ::tink::core::_Future::FutureObject noise( ::tink::core::_Future::FutureObject this1);
		static ::Dynamic noise_dyn();

		static  ::tink::core::_Future::FutureObject isSuccess( ::tink::core::_Future::FutureObject this1);
		static ::Dynamic isSuccess_dyn();

		static  ::tink::core::_Future::FutureObject next( ::tink::core::_Future::FutureObject this1, ::Dynamic f, ::Dynamic gather);
		static ::Dynamic next_dyn();

		static  ::tink::core::_Future::FutureObject swap( ::tink::core::_Future::FutureObject this1, ::Dynamic v);
		static ::Dynamic swap_dyn();

		static  ::tink::core::_Future::FutureObject swapError( ::tink::core::_Future::FutureObject this1, ::tink::core::TypedError e);
		static ::Dynamic swapError_dyn();

		static  ::tink::core::_Future::FutureObject merge( ::tink::core::_Future::FutureObject this1, ::tink::core::_Future::FutureObject other, ::Dynamic merger, ::Dynamic gather);
		static ::Dynamic merge_dyn();

		static  ::tink::core::_Future::FutureObject irreversible( ::Dynamic f);
		static ::Dynamic irreversible_dyn();

		static  ::tink::core::_Future::FutureObject _hx_and( ::tink::core::_Future::FutureObject a, ::tink::core::_Future::FutureObject b);
		static ::Dynamic _hx_and_dyn();

		static  ::tink::core::_Future::FutureObject iterate( ::Dynamic promises, ::Dynamic yield, ::tink::core::_Future::FutureObject fallback, ::Dynamic fallThroughOnError);
		static ::Dynamic iterate_dyn();

		static  ::tink::core::_Future::FutureObject retry( ::Dynamic gen, ::Dynamic next);
		static ::Dynamic retry_dyn();

		static  ::tink::core::_Future::FutureObject ofSpecific( ::tink::core::_Future::FutureObject s);
		static ::Dynamic ofSpecific_dyn();

		static  ::tink::core::_Future::FutureObject fromNever( ::tink::core::_Future::FutureObject l);
		static ::Dynamic fromNever_dyn();

		static  ::tink::core::_Future::FutureObject ofTrigger( ::tink::core::FutureTrigger f);
		static ::Dynamic ofTrigger_dyn();

		static  ::tink::core::_Future::FutureObject ofHappyTrigger( ::tink::core::FutureTrigger f);
		static ::Dynamic ofHappyTrigger_dyn();

		static  ::tink::core::_Future::FutureObject ofFuture( ::tink::core::_Future::FutureObject f);
		static ::Dynamic ofFuture_dyn();

		static  ::tink::core::_Future::FutureObject ofOutcome( ::tink::core::Outcome o);
		static ::Dynamic ofOutcome_dyn();

		static  ::tink::core::_Future::FutureObject ofError( ::tink::core::TypedError e);
		static ::Dynamic ofError_dyn();

		static  ::tink::core::_Future::FutureObject ofData( ::Dynamic d);
		static ::Dynamic ofData_dyn();

		static  ::tink::core::_Future::FutureObject asFuture( ::tink::core::_Future::FutureObject this1);
		static ::Dynamic asFuture_dyn();

		static  ::tink::core::_Future::FutureObject lazy(::Dynamic p);
		static ::Dynamic lazy_dyn();

		static  ::tink::core::_Future::FutureObject inParallel(::Array< ::Dynamic> a, ::Dynamic concurrency);
		static ::Dynamic inParallel_dyn();

		static  ::tink::core::_Future::FutureObject many(::Array< ::Dynamic> a, ::Dynamic concurrency);
		static ::Dynamic many_dyn();

		static  ::tink::core::_Future::FutureObject inSequence(::Array< ::Dynamic> a);
		static ::Dynamic inSequence_dyn();

		static  ::Dynamic cache( ::Dynamic gen);
		static ::Dynamic cache_dyn();

		static  ::tink::core::_Future::FutureObject lift( ::tink::core::_Future::FutureObject p);
		static ::Dynamic lift_dyn();

		static  ::tink::core::FutureTrigger trigger();
		static ::Dynamic trigger_dyn();

		static  ::tink::core::_Future::FutureObject resolve( ::Dynamic v);
		static ::Dynamic resolve_dyn();

		static  ::tink::core::_Future::FutureObject reject( ::tink::core::TypedError e);
		static ::Dynamic reject_dyn();

};

} // end namespace tink
} // end namespace core
} // end namespace _Promise

#endif /* INCLUDED_tink_core__Promise_Promise_Impl_ */ 
