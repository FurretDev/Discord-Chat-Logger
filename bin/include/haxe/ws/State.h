// Generated by Haxe 4.3.1
#ifndef INCLUDED_haxe_ws_State
#define INCLUDED_haxe_ws_State

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,ws,State)
namespace haxe{
namespace ws{


class State_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef State_obj OBJ_;

	public:
		State_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("haxe.ws.State",67,d9,fa,2c); }
		::String __ToString() const { return HX_("State.",1d,4d,90,3a) + _hx_tag; }

		static ::haxe::ws::State Body;
		static inline ::haxe::ws::State Body_dyn() { return Body; }
		static ::haxe::ws::State Closed;
		static inline ::haxe::ws::State Closed_dyn() { return Closed; }
		static ::haxe::ws::State Handshake;
		static inline ::haxe::ws::State Handshake_dyn() { return Handshake; }
		static ::haxe::ws::State Head;
		static inline ::haxe::ws::State Head_dyn() { return Head; }
		static ::haxe::ws::State HeadExtraLength;
		static inline ::haxe::ws::State HeadExtraLength_dyn() { return HeadExtraLength; }
		static ::haxe::ws::State HeadExtraMask;
		static inline ::haxe::ws::State HeadExtraMask_dyn() { return HeadExtraMask; }
};

} // end namespace haxe
} // end namespace ws

#endif /* INCLUDED_haxe_ws_State */ 
