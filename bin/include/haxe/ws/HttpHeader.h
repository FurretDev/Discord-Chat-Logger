// Generated by Haxe 4.3.1
#ifndef INCLUDED_haxe_ws_HttpHeader
#define INCLUDED_haxe_ws_HttpHeader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,ws,HttpHeader)

namespace haxe{
namespace ws{


class HXCPP_CLASS_ATTRIBUTES HttpHeader_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef HttpHeader_obj OBJ_;
		HttpHeader_obj();

	public:
		enum { _hx_ClassId = 0x4c55add7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.ws.HttpHeader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"haxe.ws.HttpHeader"); }

		inline static ::hx::ObjectPtr< HttpHeader_obj > __new() {
			::hx::ObjectPtr< HttpHeader_obj > __this = new HttpHeader_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< HttpHeader_obj > __alloc(::hx::Ctx *_hx_ctx) {
			HttpHeader_obj *__this = (HttpHeader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HttpHeader_obj), false, "haxe.ws.HttpHeader"));
			*(void **)__this = HttpHeader_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HttpHeader_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HttpHeader",55,73,29,f8); }

		static void __boot();
		static ::String SEC_WEBSOCKET_KEY;
		static ::String SEC_WEBSOSCKET_ACCEPT;
		static ::String SEC_WEBSOSCKET_VERSION;
		static ::String UPGRADE;
		static ::String HOST;
		static ::String CONNECTION;
		static ::String USER_AGENT;
		static ::String PRAGMA;
		static ::String CACHE_CONTROL;
		static ::String ORIGIN;
		static ::String X_WEBSOCKET_REJECT_REASON;
};

} // end namespace haxe
} // end namespace ws

#endif /* INCLUDED_haxe_ws_HttpHeader */ 
