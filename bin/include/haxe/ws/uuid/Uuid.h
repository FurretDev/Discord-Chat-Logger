// Generated by Haxe 4.3.1
#ifndef INCLUDED_haxe_ws_uuid_Uuid
#define INCLUDED_haxe_ws_uuid_Uuid

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS3(haxe,ws,uuid,Uuid)

namespace haxe{
namespace ws{
namespace uuid{


class HXCPP_CLASS_ATTRIBUTES Uuid_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Uuid_obj OBJ_;
		Uuid_obj();

	public:
		enum { _hx_ClassId = 0x21160c18 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.ws.uuid.Uuid")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"haxe.ws.uuid.Uuid"); }

		inline static ::hx::ObjectPtr< Uuid_obj > __new() {
			::hx::ObjectPtr< Uuid_obj > __this = new Uuid_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Uuid_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Uuid_obj *__this = (Uuid_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Uuid_obj), false, "haxe.ws.uuid.Uuid"));
			*(void **)__this = Uuid_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Uuid_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Uuid",5b,46,88,38); }

		static void __boot();
		static ::String DNS;
		static ::String URL;
		static ::String ISO_OID;
		static ::String X500_DN;
		static ::String NIL;
		static ::String LOWERCASE_BASE26;
		static ::String UPPERCASE_BASE26;
		static ::String NO_LOOK_ALIKES_BASE51;
		static ::String FLICKR_BASE58;
		static ::String BASE_70;
		static ::String BASE_85;
		static ::String COOKIE_BASE90;
		static ::String NANO_ID_ALPHABET;
		static ::String NUMBERS_BIN;
		static ::String NUMBERS_OCT;
		static ::String NUMBERS_DEC;
		static ::String NUMBERS_HEX;
		static Float lastMSecs;
		static int lastNSecs;
		static int clockSequenceBuffer;
		static  ::EReg regexp;
		static ::cpp::Int64 rndSeed;
		static ::cpp::Int64 state0;
		static ::cpp::Int64 state1;
		static ::cpp::Int64 DVS;
		static ::cpp::Int64 splitmix64_seed(::cpp::Int64 index);
		static ::Dynamic splitmix64_seed_dyn();

		static int randomFromRange(int min,int max);
		static ::Dynamic randomFromRange_dyn();

		static int randomByte();
		static ::Dynamic randomByte_dyn();

		static ::String fromShort(::String shortUuid,::String separator,::String fromAlphabet);
		static ::Dynamic fromShort_dyn();

		static ::String toShort(::String uuid,::String separator,::String toAlphabet);
		static ::Dynamic toShort_dyn();

		static ::String fromNano(::String nanoUuid,::String separator,::String fromAlphabet);
		static ::Dynamic fromNano_dyn();

		static ::String toNano(::String uuid,::String separator,::String toAlphabet);
		static ::Dynamic toNano_dyn();

		static ::String v1( ::haxe::io::Bytes node,::hx::Null< int >  optClockSequence,::hx::Null< Float >  msecs,::hx::Null< int >  optNsecs, ::Dynamic randomFunc,::String separator,::hx::Null< bool >  shortUuid,::String toAlphabet);
		static ::Dynamic v1_dyn();

		static ::String v3(::String name,::String _hx_namespace,::String separator,::hx::Null< bool >  shortUuid,::String toAlphabet);
		static ::Dynamic v3_dyn();

		static ::String v4( ::haxe::io::Bytes randBytes, ::Dynamic randomFunc,::String separator,::hx::Null< bool >  shortUuid,::String toAlphabet);
		static ::Dynamic v4_dyn();

		static ::String v5(::String name,::String _hx_namespace,::String separator,::hx::Null< bool >  shortUuid,::String toAlphabet);
		static ::Dynamic v5_dyn();

		static ::String stringify( ::haxe::io::Bytes data,::String separator);
		static ::Dynamic stringify_dyn();

		static  ::haxe::io::Bytes parse(::String uuid,::String separator);
		static ::Dynamic parse_dyn();

		static bool validate(::String uuid,::String separator);
		static ::Dynamic validate_dyn();

		static int version(::String uuid,::String separator);
		static ::Dynamic version_dyn();

		static ::String hexToUuid(::String hex,::String separator);
		static ::Dynamic hexToUuid_dyn();

		static ::String convert(::String number,::String fromAlphabet,::String toAlphabet);
		static ::Dynamic convert_dyn();

		static ::String nanoId(::hx::Null< int >  len,::String alphabet, ::Dynamic randomFunc);
		static ::Dynamic nanoId_dyn();

		static ::String _hx_short(::String toAlphabet, ::Dynamic randomFunc);
		static ::Dynamic _hx_short_dyn();

};

} // end namespace haxe
} // end namespace ws
} // end namespace uuid

#endif /* INCLUDED_haxe_ws_uuid_Uuid */ 
