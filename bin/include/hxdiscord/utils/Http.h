// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_utils_Http
#define INCLUDED_hxdiscord_utils_Http

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(haxe,io,BytesOutput)
HX_DECLARE_CLASS2(haxe,io,Output)
HX_DECLARE_CLASS2(hxdiscord,utils,Http)

namespace hxdiscord{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Http_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Http_obj OBJ_;
		Http_obj();

	public:
		enum { _hx_ClassId = 0x2f76c1a1 };

		void __construct(::String url);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxdiscord.utils.Http")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxdiscord.utils.Http"); }
		static ::hx::ObjectPtr< Http_obj > __new(::String url);
		static ::hx::ObjectPtr< Http_obj > __alloc(::hx::Ctx *_hx_ctx,::String url);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,Http_obj *_hx_obj);
		//~Http_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Http",a8,c7,ef,2f); }

		::String url;
		::String method;
		::cpp::VirtualArray headers;
		 ::Dynamic postData;
		::String responseData;
		::String response;
		void setMethod(::String method);
		::Dynamic setMethod_dyn();

		void addHeader(::String val1,::String val2);
		::Dynamic addHeader_dyn();

		void addHeaderByArray(::Array< ::String > header);
		::Dynamic addHeaderByArray_dyn();

		void setPostData(::String postData);
		::Dynamic setPostData_dyn();

		void setPostBytes( ::haxe::io::Bytes postData);
		::Dynamic setPostBytes_dyn();

		void send();
		::Dynamic send_dyn();

		void request( ::Dynamic post);
		::Dynamic request_dyn();

		 ::haxe::io::BytesOutput customRequest( ::Dynamic post, ::haxe::io::BytesOutput output,::String method);
		::Dynamic customRequest_dyn();

		::Dynamic onData;
		inline ::Dynamic &onData_dyn() {return onData; }

		::Dynamic onError;
		inline ::Dynamic &onError_dyn() {return onError; }

		::Dynamic onStatus;
		inline ::Dynamic &onStatus_dyn() {return onStatus; }

};

} // end namespace hxdiscord
} // end namespace utils

#endif /* INCLUDED_hxdiscord_utils_Http */ 
