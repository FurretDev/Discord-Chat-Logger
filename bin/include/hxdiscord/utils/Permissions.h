// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_utils_Permissions
#define INCLUDED_hxdiscord_utils_Permissions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxdiscord,utils,Permissions)

namespace hxdiscord{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Permissions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Permissions_obj OBJ_;
		Permissions_obj();

	public:
		enum { _hx_ClassId = 0x44b7336f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxdiscord.utils.Permissions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hxdiscord.utils.Permissions"); }

		inline static ::hx::ObjectPtr< Permissions_obj > __new() {
			::hx::ObjectPtr< Permissions_obj > __this = new Permissions_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Permissions_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Permissions_obj *__this = (Permissions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Permissions_obj), false, "hxdiscord.utils.Permissions"));
			*(void **)__this = Permissions_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Permissions_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Permissions",64,14,07,f3); }

		static void __boot();
		static int _CREATE_INSTANT_INVITE;
		static int _KICK_MEMBERS;
		static int _BAN_MEMBERS;
		static int _ADMINISTRATOR;
		static int _MANAGE_CHANNELS;
		static int _MANAGE_GUILD;
		static int _ADD_REACTIONS;
		static int _VIEW_AUDIT_LOG;
		static int _VIEW_CHANNEL;
		static int _SEND_MESSAGES;
		static int _SEND_TTS_MESSAGES;
		static int _MANAGE_MESSAGES;
		static int _EMBED_LINKS;
		static int _ATTACH_FILES;
		static int _READ_MESSAGE_HISTORY;
		static int _MENTION_EVERYONE;
		static int _USE_EXTERNAL_EMOJIS;
		static int _CONNECT;
		static int _SPEAK;
		static int _MUTE_MEMBERS;
		static int _DEAFEN_MEMBERS;
		static int _MOVE_MEMBERS;
		static int _USE_VAD;
		static int _PRIORITY_SPEAKER;
		static int _CHANGE_NICKNAME;
		static int _MANAGE_NICKNAMES;
		static int _MANAGE_ROLES;
		static int _MANAGE_WEBHOOKS;
		static int _MANAGE_EMOJIS;
		static ::Array< ::String > resolve(::cpp::Int64 _int);
		static ::Dynamic resolve_dyn();

		static int convert(::Array< int > perms);
		static ::Dynamic convert_dyn();

};

} // end namespace hxdiscord
} // end namespace utils

#endif /* INCLUDED_hxdiscord_utils_Permissions */ 
