// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_utils_Https
#define INCLUDED_hxdiscord_utils_Https

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxdiscord,utils,Https)

namespace hxdiscord{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Https_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Https_obj OBJ_;
		Https_obj();

	public:
		enum { _hx_ClassId = 0x5872abb2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxdiscord.utils.Https")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hxdiscord.utils.Https"); }

		inline static ::hx::ObjectPtr< Https_obj > __new() {
			::hx::ObjectPtr< Https_obj > __this = new Https_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Https_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Https_obj *__this = (Https_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Https_obj), false, "hxdiscord.utils.Https"));
			*(void **)__this = Https_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Https_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Https",cb,eb,de,c1); }

		static ::String sendRequest(::String url,::String version,::String endpoint,::String path,::String token);
		static ::Dynamic sendRequest_dyn();

		static void sendNormalRequest(::String url,::String token,::String id,::String data);
		static ::Dynamic sendNormalRequest_dyn();

		static void sendDeleteRequest(::String url);
		static ::Dynamic sendDeleteRequest_dyn();

		static void sendEmptyPutRequest(::String url);
		static ::Dynamic sendEmptyPutRequest_dyn();

		static void sendPutData(::String url, ::Dynamic data);
		static ::Dynamic sendPutData_dyn();

		static void sendPostData(::String url, ::Dynamic data);
		static ::Dynamic sendPostData_dyn();

};

} // end namespace hxdiscord
} // end namespace utils

#endif /* INCLUDED_hxdiscord_utils_Https */ 
