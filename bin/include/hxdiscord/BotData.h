// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_BotData
#define INCLUDED_hxdiscord_BotData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_649419edcc7c1cfd_774_new)
HX_DECLARE_CLASS1(hxdiscord,BotData)

namespace hxdiscord{


class HXCPP_CLASS_ATTRIBUTES BotData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BotData_obj OBJ_;
		BotData_obj();

	public:
		enum { _hx_ClassId = 0x5e192b95 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxdiscord.BotData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxdiscord.BotData"); }

		inline static ::hx::ObjectPtr< BotData_obj > __new() {
			::hx::ObjectPtr< BotData_obj > __this = new BotData_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< BotData_obj > __alloc(::hx::Ctx *_hx_ctx) {
			BotData_obj *__this = (BotData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BotData_obj), true, "hxdiscord.BotData"));
			*(void **)__this = BotData_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_649419edcc7c1cfd_774_new)
HXLINE( 775)		( ( ::hxdiscord::BotData)(__this) )->target = HX_("",00,00,00,00);
HXLINE( 778)		( ( ::hxdiscord::BotData)(__this) )->target = HX_("cpp",23,81,4b,00);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BotData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BotData",b1,77,dd,11); }

		::String target;
};

} // end namespace hxdiscord

#endif /* INCLUDED_hxdiscord_BotData */ 
