// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_VoiceClient
#define INCLUDED_hxdiscord_VoiceClient

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,Timer)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(haxe,ws,WebSocket)
HX_DECLARE_CLASS2(haxe,ws,WebSocketCommon)
HX_DECLARE_CLASS1(hxdiscord,DiscordClient)
HX_DECLARE_CLASS1(hxdiscord,VoiceClient)
HX_DECLARE_CLASS2(sys,net,Address)
HX_DECLARE_CLASS2(sys,net,Socket)
HX_DECLARE_CLASS2(sys,net,UdpSocket)

namespace hxdiscord{


class HXCPP_CLASS_ATTRIBUTES VoiceClient_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef VoiceClient_obj OBJ_;
		VoiceClient_obj();

	public:
		enum { _hx_ClassId = 0x7c51c361 };

		void __construct(::String guild_id,::String channel_id,::String user_id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxdiscord.VoiceClient")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxdiscord.VoiceClient"); }
		static ::hx::ObjectPtr< VoiceClient_obj > __new(::String guild_id,::String channel_id,::String user_id);
		static ::hx::ObjectPtr< VoiceClient_obj > __alloc(::hx::Ctx *_hx_ctx,::String guild_id,::String channel_id,::String user_id);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VoiceClient_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("VoiceClient",7d,4d,64,f5); }

		::String guild_id;
		::String channel_id;
		::String session_id;
		 ::haxe::ws::WebSocket websocket;
		bool hasCredentials;
		 ::hxdiscord::DiscordClient client;
		 ::haxe::io::Bytes buf;
		int hb_interval;
		::String user_id;
		 ::haxe::Timer hb_timer;
		 ::sys::net::UdpSocket udpConnection;
		::String ip;
		int port;
		 ::sys::net::Address addr;
		void handleShit(::String str, ::Dynamic dyn);
		::Dynamic handleShit_dyn();

		void giveCredentials( ::Dynamic d);
		::Dynamic giveCredentials_dyn();

		void play(::String path);
		::Dynamic play_dyn();

		void destroy();
		::Dynamic destroy_dyn();

};

} // end namespace hxdiscord

#endif /* INCLUDED_hxdiscord_VoiceClient */ 
