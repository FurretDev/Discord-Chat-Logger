// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_types_User
#define INCLUDED_hxdiscord_types_User

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hxdiscord,DiscordClient)
HX_DECLARE_CLASS2(hxdiscord,types,User)

namespace hxdiscord{
namespace types{


class HXCPP_CLASS_ATTRIBUTES User_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef User_obj OBJ_;
		User_obj();

	public:
		enum { _hx_ClassId = 0x26095848 };

		void __construct( ::hxdiscord::DiscordClient client, ::Dynamic us);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxdiscord.types.User")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxdiscord.types.User"); }
		static ::hx::ObjectPtr< User_obj > __new( ::hxdiscord::DiscordClient client, ::Dynamic us);
		static ::hx::ObjectPtr< User_obj > __alloc(::hx::Ctx *_hx_ctx, ::hxdiscord::DiscordClient client, ::Dynamic us);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~User_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("User",6b,be,86,38); }

		::String id;
		::String username;
		int public_flags;
		::String discriminator;
		::String avatar_decoration;
		::String avatar;
		::String banner;
		bool bot;
		bool _hx_system;
		bool mfa_enabled;
		int accent_color;
		::String locale;
		bool verified;
		::String email;
		int flags;
		int premium_type;
};

} // end namespace hxdiscord
} // end namespace types

#endif /* INCLUDED_hxdiscord_types_User */ 
