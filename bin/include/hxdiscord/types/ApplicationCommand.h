// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_types_ApplicationCommand
#define INCLUDED_hxdiscord_types_ApplicationCommand

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxdiscord,types,ApplicationCommand)

namespace hxdiscord{
namespace types{


class HXCPP_CLASS_ATTRIBUTES ApplicationCommand_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ApplicationCommand_obj OBJ_;
		ApplicationCommand_obj();

	public:
		enum { _hx_ClassId = 0x1a765e98 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxdiscord.types.ApplicationCommand")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxdiscord.types.ApplicationCommand"); }
		static ::hx::ObjectPtr< ApplicationCommand_obj > __new();
		static ::hx::ObjectPtr< ApplicationCommand_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ApplicationCommand_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ApplicationCommand",fb,1b,c1,4d); }

		::String id;
		int type;
		::String application_id;
		::String guild_id;
		::String name;
		::String name_localizations;
		::String description;
		::String description_localizations;
		::Array< ::Dynamic> options;
		::String default_member_permissions;
		bool dm_permission;
		bool default_permission;
		bool nsfw;
		::String version;
		void setName(::String name);
		::Dynamic setName_dyn();

		void setType(int type);
		::Dynamic setType_dyn();

		void setDescription(::String description);
		::Dynamic setDescription_dyn();

		void addOption( ::Dynamic _option);
		::Dynamic addOption_dyn();

};

} // end namespace hxdiscord
} // end namespace types

#endif /* INCLUDED_hxdiscord_types_ApplicationCommand */ 
