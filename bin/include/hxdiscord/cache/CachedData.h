// Generated by Haxe 4.3.1
#ifndef INCLUDED_hxdiscord_cache_CachedData
#define INCLUDED_hxdiscord_cache_CachedData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(hxdiscord,DiscordClient)
HX_DECLARE_CLASS2(hxdiscord,cache,CachedData)

namespace hxdiscord{
namespace cache{


class HXCPP_CLASS_ATTRIBUTES CachedData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CachedData_obj OBJ_;
		CachedData_obj();

	public:
		enum { _hx_ClassId = 0x24929032 };

		void __construct( ::hxdiscord::DiscordClient dc);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxdiscord.cache.CachedData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxdiscord.cache.CachedData"); }
		static ::hx::ObjectPtr< CachedData_obj > __new( ::hxdiscord::DiscordClient dc);
		static ::hx::ObjectPtr< CachedData_obj > __alloc(::hx::Ctx *_hx_ctx, ::hxdiscord::DiscordClient dc);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CachedData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CachedData",4c,7f,8a,67); }

		 ::hxdiscord::DiscordClient dc;
		 ::haxe::ds::StringMap guild_members;
		 ::haxe::ds::StringMap guilds;
		 ::haxe::ds::StringMap guilds_roles;
		 ::haxe::ds::StringMap roles;
		 ::haxe::ds::StringMap presences;
};

} // end namespace hxdiscord
} // end namespace cache

#endif /* INCLUDED_hxdiscord_cache_CachedData */ 
