// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_FutureStatus
#include <tink/core/FutureStatus.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf7706f6d991cb84_389_new,"tink.core._Future.FutureObject","new",0x01974fd3,"tink.core._Future.FutureObject.new","tink/core/Future.hx",389,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7706f6d991cb84_391_getStatus,"tink.core._Future.FutureObject","getStatus",0x2be3881b,"tink.core._Future.FutureObject.getStatus","tink/core/Future.hx",391,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7706f6d991cb84_393_handle,"tink.core._Future.FutureObject","handle",0xe0b6ee15,"tink.core._Future.FutureObject.handle","tink/core/Future.hx",393,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7706f6d991cb84_394_eager,"tink.core._Future.FutureObject","eager",0xe09d4beb,"tink.core._Future.FutureObject.eager","tink/core/Future.hx",394,0x014a8a08)
namespace tink{
namespace core{
namespace _Future{

void FutureObject_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bf7706f6d991cb84_389_new)
            	}

Dynamic FutureObject_obj::__CreateEmpty() { return new FutureObject_obj; }

void *FutureObject_obj::_hx_vtable = 0;

Dynamic FutureObject_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FutureObject_obj > _hx_result = new FutureObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FutureObject_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x75d0f9d3;
}

 ::tink::core::FutureStatus FutureObject_obj::getStatus(){
            	HX_STACKFRAME(&_hx_pos_bf7706f6d991cb84_391_getStatus)
HXDLIN( 391)		return ::tink::core::FutureStatus_obj::NeverEver_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FutureObject_obj,getStatus,return )

::Dynamic FutureObject_obj::handle( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_bf7706f6d991cb84_393_handle)
HXDLIN( 393)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FutureObject_obj,handle,return )

void FutureObject_obj::eager(){
            	HX_STACKFRAME(&_hx_pos_bf7706f6d991cb84_394_eager)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FutureObject_obj,eager,(void))


::hx::ObjectPtr< FutureObject_obj > FutureObject_obj::__new() {
	::hx::ObjectPtr< FutureObject_obj > __this = new FutureObject_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FutureObject_obj > FutureObject_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FutureObject_obj *__this = (FutureObject_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FutureObject_obj), false, "tink.core._Future.FutureObject"));
	*(void **)__this = FutureObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FutureObject_obj::FutureObject_obj()
{
}

::hx::Val FutureObject_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"eager") ) { return ::hx::Val( eager_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return ::hx::Val( handle_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getStatus") ) { return ::hx::Val( getStatus_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FutureObject_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FutureObject_obj_sStaticStorageInfo = 0;
#endif

static ::String FutureObject_obj_sMemberFields[] = {
	HX_("getStatus",68,70,52,82),
	HX_("handle",a8,83,fd,b7),
	HX_("eager",b8,c9,e4,67),
	::String(null()) };

::hx::Class FutureObject_obj::__mClass;

void FutureObject_obj::__register()
{
	FutureObject_obj _hx_dummy;
	FutureObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("tink.core._Future.FutureObject",61,6a,80,cf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FutureObject_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FutureObject_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FutureObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FutureObject_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Future
