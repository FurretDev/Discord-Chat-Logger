// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_net_UdpSocket
#include <sys/net/UdpSocket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2cf26941a73101ea_29_new,"sys.net.UdpSocket","new",0x7361a534,"sys.net.UdpSocket.new","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/UdpSocket.hx",29,0x8d5e3924)
HX_LOCAL_STACK_FRAME(_hx_pos_2cf26941a73101ea_30_init,"sys.net.UdpSocket","init",0x7ec79fbc,"sys.net.UdpSocket.init","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/UdpSocket.hx",30,0x8d5e3924)
namespace sys{
namespace net{

void UdpSocket_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2cf26941a73101ea_29_new)
HXDLIN(  29)		super::__construct();
            	}

Dynamic UdpSocket_obj::__CreateEmpty() { return new UdpSocket_obj; }

void *UdpSocket_obj::_hx_vtable = 0;

Dynamic UdpSocket_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UdpSocket_obj > _hx_result = new UdpSocket_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UdpSocket_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x70c71ec3) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x70c71ec3;
	} else {
		return inClassId==(int)0x754e49e0;
	}
}

void UdpSocket_obj::init(){
            	HX_STACKFRAME(&_hx_pos_2cf26941a73101ea_30_init)
HXLINE(  31)		this->__s = _hx_std_socket_new(true);
HXLINE(  32)		this->super::init();
            	}



::hx::ObjectPtr< UdpSocket_obj > UdpSocket_obj::__new() {
	::hx::ObjectPtr< UdpSocket_obj > __this = new UdpSocket_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< UdpSocket_obj > UdpSocket_obj::__alloc(::hx::Ctx *_hx_ctx) {
	UdpSocket_obj *__this = (UdpSocket_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UdpSocket_obj), true, "sys.net.UdpSocket"));
	*(void **)__this = UdpSocket_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

UdpSocket_obj::UdpSocket_obj()
{
}

::hx::Val UdpSocket_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *UdpSocket_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *UdpSocket_obj_sStaticStorageInfo = 0;
#endif

static ::String UdpSocket_obj_sMemberFields[] = {
	HX_("init",10,3b,bb,45),
	::String(null()) };

::hx::Class UdpSocket_obj::__mClass;

void UdpSocket_obj::__register()
{
	UdpSocket_obj _hx_dummy;
	UdpSocket_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.net.UdpSocket",42,3b,fa,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UdpSocket_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UdpSocket_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UdpSocket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UdpSocket_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace net
