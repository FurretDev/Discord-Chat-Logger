// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_crypto_Sha1
#include <haxe/crypto/Sha1.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_ws_HttpRequest
#include <haxe/ws/HttpRequest.h>
#endif
#ifndef INCLUDED_haxe_ws_HttpResponse
#include <haxe/ws/HttpResponse.h>
#endif
#ifndef INCLUDED_haxe_ws_Log
#include <haxe/ws/Log.h>
#endif
#ifndef INCLUDED_haxe_ws_State
#include <haxe/ws/State.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocket
#include <haxe/ws/WebSocket.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocketCommon
#include <haxe/ws/WebSocketCommon.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_ssl_Socket
#include <sys/ssl/Socket.h>
#endif
#ifndef INCLUDED_sys_thread_Deque
#include <sys/thread/Deque.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_Thread_Impl_
#include <sys/thread/_Thread/Thread_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_251858b759e4c9db_168_new,"haxe.ws.WebSocket","new",0x34d7d52f,"haxe.ws.WebSocket.new","haxe/ws/WebSocket.hx",168,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_192_parseUrl,"haxe.ws.WebSocket","parseUrl",0xf4c861cd,"haxe.ws.WebSocket.parseUrl","haxe/ws/WebSocket.hx",192,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_216_createSocket,"haxe.ws.WebSocket","createSocket",0x09ae3520,"haxe.ws.WebSocket.createSocket","haxe/ws/WebSocket.hx",216,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_236_open,"haxe.ws.WebSocket","open",0x08b4341b,"haxe.ws.WebSocket.open","haxe/ws/WebSocket.hx",236,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_262_processThread,"haxe.ws.WebSocket","processThread",0x94164c28,"haxe.ws.WebSocket.processThread","haxe/ws/WebSocket.hx",262,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_270_processLoop,"haxe.ws.WebSocket","processLoop",0x13aac442,"haxe.ws.WebSocket.processLoop","haxe/ws/WebSocket.hx",270,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_276_get_additionalHeaders,"haxe.ws.WebSocket","get_additionalHeaders",0x38f1e385,"haxe.ws.WebSocket.get_additionalHeaders","haxe/ws/WebSocket.hx",276,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_283_sendHandshake,"haxe.ws.WebSocket","sendHandshake",0x47ba081e,"haxe.ws.WebSocket.sendHandshake","haxe/ws/WebSocket.hx",283,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_312_handleData,"haxe.ws.WebSocket","handleData",0x8e97bd03,"haxe.ws.WebSocket.handleData","haxe/ws/WebSocket.hx",312,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_327_handshake,"haxe.ws.WebSocket","handshake",0x196feb06,"haxe.ws.WebSocket.handshake","haxe/ws/WebSocket.hx",327,0x2f9dcbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_251858b759e4c9db_354_generateWSKey,"haxe.ws.WebSocket","generateWSKey",0x914b8d1d,"haxe.ws.WebSocket.generateWSKey","haxe/ws/WebSocket.hx",354,0x2f9dcbc1)
namespace haxe{
namespace ws{

void WebSocket_obj::__construct(::String url,::hx::Null< bool >  __o_immediateOpen){
            		bool immediateOpen = __o_immediateOpen.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_251858b759e4c9db_168_new)
HXLINE( 175)		this->_encodedKey = HX_("wskey",03,1b,04,d1);
HXLINE( 171)		this->_port = 0;
HXLINE( 182)		{
HXLINE( 182)			 ::EReg urlRegExp =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(\\w+?)://([\\w\\.-]+)(:(\\d+))?(/.*)?$",91,f9,d1,d3),HX_("",00,00,00,00));
HXDLIN( 182)			if (!(urlRegExp->match(url))) {
HXLINE( 182)				HX_STACK_DO_THROW(((HX_("Uri not matching websocket URL \"",16,fe,45,9c) + url) + HX_("\"",22,00,00,00)));
            			}
HXDLIN( 182)			this->_protocol = urlRegExp->matched(1);
HXDLIN( 182)			this->_host = urlRegExp->matched(2);
HXDLIN( 182)			 ::Dynamic parsedPort = ::Std_obj::parseInt(urlRegExp->matched(4));
HXDLIN( 182)			if (::hx::IsGreater( parsedPort,0 )) {
HXLINE( 182)				this->_port = ( (int)(parsedPort) );
            			}
HXDLIN( 182)			this->_path = urlRegExp->matched(5);
HXDLIN( 182)			bool _hx_tmp;
HXDLIN( 182)			if (::hx::IsNotNull( this->_path )) {
HXLINE( 182)				_hx_tmp = (this->_path.length == 0);
            			}
            			else {
HXLINE( 182)				_hx_tmp = true;
            			}
HXDLIN( 182)			if (_hx_tmp) {
HXLINE( 182)				this->_path = HX_("/",2f,00,00,00);
            			}
            		}
HXLINE( 184)		super::__construct(this->createSocket());
HXLINE( 186)		if (immediateOpen) {
HXLINE( 187)			this->open();
            		}
            	}

Dynamic WebSocket_obj::__CreateEmpty() { return new WebSocket_obj; }

void *WebSocket_obj::_hx_vtable = 0;

Dynamic WebSocket_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WebSocket_obj > _hx_result = new WebSocket_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool WebSocket_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3bb74421) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3bb74421;
	} else {
		return inClassId==(int)0x6a897c2c;
	}
}

void WebSocket_obj::parseUrl(::String url){
            	HX_GC_STACKFRAME(&_hx_pos_251858b759e4c9db_192_parseUrl)
HXLINE( 193)		 ::EReg urlRegExp =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(\\w+?)://([\\w\\.-]+)(:(\\d+))?(/.*)?$",91,f9,d1,d3),HX_("",00,00,00,00));
HXLINE( 195)		if (!(urlRegExp->match(url))) {
HXLINE( 196)			HX_STACK_DO_THROW(((HX_("Uri not matching websocket URL \"",16,fe,45,9c) + url) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 199)		this->_protocol = urlRegExp->matched(1);
HXLINE( 201)		this->_host = urlRegExp->matched(2);
HXLINE( 203)		 ::Dynamic parsedPort = ::Std_obj::parseInt(urlRegExp->matched(4));
HXLINE( 204)		if (::hx::IsGreater( parsedPort,0 )) {
HXLINE( 205)			this->_port = ( (int)(parsedPort) );
            		}
HXLINE( 207)		this->_path = urlRegExp->matched(5);
HXLINE( 208)		bool _hx_tmp;
HXDLIN( 208)		if (::hx::IsNotNull( this->_path )) {
HXLINE( 208)			_hx_tmp = (this->_path.length == 0);
            		}
            		else {
HXLINE( 208)			_hx_tmp = true;
            		}
HXDLIN( 208)		if (_hx_tmp) {
HXLINE( 209)			this->_path = HX_("/",2f,00,00,00);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocket_obj,parseUrl,(void))

 ::sys::net::Socket WebSocket_obj::createSocket(){
            	HX_GC_STACKFRAME(&_hx_pos_251858b759e4c9db_216_createSocket)
HXDLIN( 216)		if ((this->_protocol == HX_("wss",d7,b0,5a,00))) {
HXLINE( 220)			if ((this->_port == 0)) {
HXLINE( 221)				this->_port = 443;
            			}
HXLINE( 223)			return  ::sys::ssl::Socket_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 225)			if ((this->_protocol == HX_("ws",1c,68,00,00))) {
HXLINE( 226)				if ((this->_port == 0)) {
HXLINE( 227)					this->_port = 80;
            				}
HXLINE( 229)				return  ::sys::net::Socket_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 231)				HX_STACK_DO_THROW((HX_("Unknown protocol ",92,a6,27,8b) + this->_protocol));
            			}
            		}
HXLINE( 216)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocket_obj,createSocket,return )

void WebSocket_obj::open(){
            	HX_GC_STACKFRAME(&_hx_pos_251858b759e4c9db_236_open)
HXLINE( 237)		if (::hx::IsPointerNotEq( this->state,::haxe::ws::State_obj::Handshake_dyn() )) {
HXLINE( 238)			HX_STACK_DO_THROW(HX_("Socket already connected",b4,30,0c,16));
            		}
HXLINE( 240)		this->_socket->setBlocking(true);
HXLINE( 241)		 ::sys::net::Socket _hx_tmp = this->_socket;
HXDLIN( 241)		_hx_tmp->connect( ::sys::net::Host_obj::__alloc( HX_CTX ,this->_host),this->_port);
HXLINE( 242)		this->_socket->setBlocking(false);
HXLINE( 246)		this->_processThread = ::sys::thread::_Thread::HaxeThread_obj::create(this->processThread_dyn(),false);
HXLINE( 247)		this->_processThread->messages->add(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 259)		this->sendHandshake();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocket_obj,open,(void))

void WebSocket_obj::processThread(){
            	HX_STACKFRAME(&_hx_pos_251858b759e4c9db_262_processThread)
HXLINE( 263)		::haxe::ws::Log_obj::debug(HX_("Thread started",0b,56,ff,f3),this->id);
HXLINE( 264)		::sys::thread::_Thread::Thread_Impl__obj::readMessage(true);
HXLINE( 265)		this->processLoop(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 266)		::haxe::ws::Log_obj::debug(HX_("Thread ended",44,cf,f8,ed),this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocket_obj,processThread,(void))

void WebSocket_obj::processLoop( ::haxe::ws::WebSocket ws){
            	HX_STACKFRAME(&_hx_pos_251858b759e4c9db_270_processLoop)
HXDLIN( 270)		while(::hx::IsPointerNotEq( ws->state,::haxe::ws::State_obj::Closed_dyn() )){
HXLINE( 271)			ws->process();
HXLINE( 272)			::Sys_obj::sleep(((Float).01));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocket_obj,processLoop,(void))

 ::haxe::ds::StringMap WebSocket_obj::get_additionalHeaders(){
            	HX_GC_STACKFRAME(&_hx_pos_251858b759e4c9db_276_get_additionalHeaders)
HXLINE( 277)		if (::hx::IsNull( this->additionalHeaders )) {
HXLINE( 278)			this->additionalHeaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 280)		return this->additionalHeaders;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocket_obj,get_additionalHeaders,return )

void WebSocket_obj::sendHandshake(){
            	HX_GC_STACKFRAME(&_hx_pos_251858b759e4c9db_283_sendHandshake)
HXLINE( 284)		 ::haxe::ws::HttpRequest httpRequest =  ::haxe::ws::HttpRequest_obj::__alloc( HX_CTX );
HXLINE( 285)		httpRequest->method = HX_("GET",76,1c,36,00);
HXLINE( 287)		httpRequest->uri = this->_path;
HXLINE( 288)		httpRequest->httpVersion = HX_("HTTP/1.1",6d,25,7a,80);
HXLINE( 290)		httpRequest->headers->set(HX_("Host",88,fb,eb,2f),((this->_host + HX_(":",3a,00,00,00)) + this->_port));
HXLINE( 291)		httpRequest->headers->set(HX_("User-Agent",03,d0,1e,60),HX_("hxWebSockets",5c,82,a8,ba));
HXLINE( 292)		httpRequest->headers->set(HX_("Sec-WebSocket-Version",96,69,a3,40),HX_("13",e2,2a,00,00));
HXLINE( 293)		httpRequest->headers->set(HX_("Upgrade",7c,dc,82,30),HX_("websocket",47,d7,9c,b0));
HXLINE( 294)		httpRequest->headers->set(HX_("Connection",3e,a4,c3,eb),HX_("Upgrade",7c,dc,82,30));
HXLINE( 295)		httpRequest->headers->set(HX_("Pragma",dc,38,a7,e0),HX_("no-cache",f6,5d,9f,da));
HXLINE( 296)		httpRequest->headers->set(HX_("Cache-Control",d2,9e,1c,4d),HX_("no-cache",f6,5d,9f,da));
HXLINE( 297)		{
HXLINE( 297)			::Dynamic this1 = httpRequest->headers;
HXDLIN( 297)			::String value = (( ( ::sys::net::Host)(this->_socket->host()->__Field(HX_("host",68,cf,12,45),::hx::paccDynamic)) )->toString() + HX_(":",3a,00,00,00));
HXDLIN( 297)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("Origin",06,8e,95,7f), ::Dynamic((value + this->_socket->host()->__Field(HX_("port",81,83,5c,4a),::hx::paccDynamic))));
            		}
HXLINE( 299)		this->_encodedKey = this->generateWSKey();
HXLINE( 300)		httpRequest->headers->set(HX_("Sec-WebSocket-Key",1d,75,34,74),this->_encodedKey);
HXLINE( 302)		if (::hx::IsNotNull( this->get_additionalHeaders() )) {
HXLINE( 303)			 ::Dynamic k = this->get_additionalHeaders()->keys();
HXDLIN( 303)			while(( (bool)(k->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 303)				::String k1 = ( (::String)(k->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 304)				{
HXLINE( 304)					::Dynamic this2 = httpRequest->headers;
HXDLIN( 304)					( ( ::haxe::ds::StringMap)(this2) )->set(k1,this->get_additionalHeaders()->get(k1));
            				}
            			}
            		}
HXLINE( 308)		this->sendHttpRequest(httpRequest);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocket_obj,sendHandshake,(void))

void WebSocket_obj::handleData(){
            	HX_STACKFRAME(&_hx_pos_251858b759e4c9db_312_handleData)
HXDLIN( 312)		if ((this->state->_hx_getIndex() == 0)) {
HXLINE( 314)			 ::haxe::ws::HttpResponse httpResponse = this->recvHttpResponse();
HXLINE( 315)			if (::hx::IsNull( httpResponse )) {
HXLINE( 316)				return;
            			}
HXLINE( 319)			this->handshake(httpResponse);
HXLINE( 320)			this->handleData();
            		}
            		else {
HXLINE( 322)			this->super::handleData();
            		}
            	}


void WebSocket_obj::handshake( ::haxe::ws::HttpResponse httpResponse){
            	HX_STACKFRAME(&_hx_pos_251858b759e4c9db_327_handshake)
HXLINE( 328)		if ((httpResponse->code != 101)) {
HXLINE( 329)			if (::hx::IsNotNull( this->onerror )) {
HXLINE( 330)				 ::Dynamic _hx_tmp = this->onerror;
HXDLIN( 330)				_hx_tmp(httpResponse->headers->get(HX_("X-WebSocket-Reject-Reason",37,eb,a0,f5)));
            			}
HXLINE( 332)			this->close();
HXLINE( 333)			return;
            		}
HXLINE( 336)		::String secKey = httpResponse->headers->get_string(HX_("Sec-WebSocket-Accept",4a,6a,d1,58));
HXLINE( 338)		if (::hx::IsNotNull( secKey )) {
HXLINE( 341)			if ((secKey != ::haxe::crypto::Base64_obj::encode(::haxe::crypto::Sha1_obj::make(::haxe::io::Bytes_obj::ofString((this->_encodedKey + HX_("258EAFA5-E914-47DA-95CA-C5AB0DC85B11",21,20,50,02)),null())),null()))) {
HXLINE( 342)				if (::hx::IsNotNull( this->onerror )) {
HXLINE( 343)					this->onerror(HX_("Error during WebSocket handshake: Incorrect 'Sec-WebSocket-Accept' header value",50,e2,59,10));
            				}
HXLINE( 345)				this->close();
HXLINE( 346)				return;
            			}
            		}
HXLINE( 350)		this->_onopenCalled = false;
HXLINE( 351)		this->state = ::haxe::ws::State_obj::Head_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocket_obj,handshake,(void))

::String WebSocket_obj::generateWSKey(){
            	HX_STACKFRAME(&_hx_pos_251858b759e4c9db_354_generateWSKey)
HXLINE( 355)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(16);
HXLINE( 356)		{
HXLINE( 357)			{
HXLINE( 357)				int v = ::Std_obj::random(255);
HXDLIN( 357)				b->b[0] = ( (unsigned char)(v) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v1 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[1] = ( (unsigned char)(v1) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v2 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[2] = ( (unsigned char)(v2) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v3 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[3] = ( (unsigned char)(v3) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v4 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[4] = ( (unsigned char)(v4) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v5 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[5] = ( (unsigned char)(v5) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v6 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[6] = ( (unsigned char)(v6) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v7 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[7] = ( (unsigned char)(v7) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v8 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[8] = ( (unsigned char)(v8) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v9 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[9] = ( (unsigned char)(v9) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v10 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[10] = ( (unsigned char)(v10) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v11 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[11] = ( (unsigned char)(v11) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v12 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[12] = ( (unsigned char)(v12) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v13 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[13] = ( (unsigned char)(v13) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v14 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[14] = ( (unsigned char)(v14) );
            			}
HXDLIN( 357)			{
HXLINE( 357)				int v15 = ::Std_obj::random(255);
HXDLIN( 357)				b->b[15] = ( (unsigned char)(v15) );
            			}
            		}
HXLINE( 359)		return ::haxe::crypto::Base64_obj::encode(b,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocket_obj,generateWSKey,return )


::hx::ObjectPtr< WebSocket_obj > WebSocket_obj::__new(::String url,::hx::Null< bool >  __o_immediateOpen) {
	::hx::ObjectPtr< WebSocket_obj > __this = new WebSocket_obj();
	__this->__construct(url,__o_immediateOpen);
	return __this;
}

::hx::ObjectPtr< WebSocket_obj > WebSocket_obj::__alloc(::hx::Ctx *_hx_ctx,::String url,::hx::Null< bool >  __o_immediateOpen) {
	WebSocket_obj *__this = (WebSocket_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WebSocket_obj), true, "haxe.ws.WebSocket"));
	*(void **)__this = WebSocket_obj::_hx_vtable;
	__this->__construct(url,__o_immediateOpen);
	return __this;
}

WebSocket_obj::WebSocket_obj()
{
}

void WebSocket_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WebSocket);
	HX_MARK_MEMBER_NAME(_protocol,"_protocol");
	HX_MARK_MEMBER_NAME(_host,"_host");
	HX_MARK_MEMBER_NAME(_port,"_port");
	HX_MARK_MEMBER_NAME(_path,"_path");
	HX_MARK_MEMBER_NAME(_processThread,"_processThread");
	HX_MARK_MEMBER_NAME(_encodedKey,"_encodedKey");
	HX_MARK_MEMBER_NAME(binaryType,"binaryType");
	HX_MARK_MEMBER_NAME(additionalHeaders,"additionalHeaders");
	 ::haxe::ws::WebSocketCommon_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WebSocket_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_protocol,"_protocol");
	HX_VISIT_MEMBER_NAME(_host,"_host");
	HX_VISIT_MEMBER_NAME(_port,"_port");
	HX_VISIT_MEMBER_NAME(_path,"_path");
	HX_VISIT_MEMBER_NAME(_processThread,"_processThread");
	HX_VISIT_MEMBER_NAME(_encodedKey,"_encodedKey");
	HX_VISIT_MEMBER_NAME(binaryType,"binaryType");
	HX_VISIT_MEMBER_NAME(additionalHeaders,"additionalHeaders");
	 ::haxe::ws::WebSocketCommon_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val WebSocket_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"open") ) { return ::hx::Val( open_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_host") ) { return ::hx::Val( _host ); }
		if (HX_FIELD_EQ(inName,"_port") ) { return ::hx::Val( _port ); }
		if (HX_FIELD_EQ(inName,"_path") ) { return ::hx::Val( _path ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"parseUrl") ) { return ::hx::Val( parseUrl_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_protocol") ) { return ::hx::Val( _protocol ); }
		if (HX_FIELD_EQ(inName,"handshake") ) { return ::hx::Val( handshake_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"binaryType") ) { return ::hx::Val( binaryType ); }
		if (HX_FIELD_EQ(inName,"handleData") ) { return ::hx::Val( handleData_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_encodedKey") ) { return ::hx::Val( _encodedKey ); }
		if (HX_FIELD_EQ(inName,"processLoop") ) { return ::hx::Val( processLoop_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createSocket") ) { return ::hx::Val( createSocket_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"processThread") ) { return ::hx::Val( processThread_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendHandshake") ) { return ::hx::Val( sendHandshake_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateWSKey") ) { return ::hx::Val( generateWSKey_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_processThread") ) { return ::hx::Val( _processThread ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"additionalHeaders") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_additionalHeaders() : additionalHeaders ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_additionalHeaders") ) { return ::hx::Val( get_additionalHeaders_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WebSocket_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_host") ) { _host=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_port") ) { _port=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_path") ) { _path=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_protocol") ) { _protocol=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"binaryType") ) { binaryType=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_encodedKey") ) { _encodedKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_processThread") ) { _processThread=inValue.Cast<  ::sys::thread::_Thread::HaxeThread >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"additionalHeaders") ) { additionalHeaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WebSocket_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_protocol",b7,4d,f9,47));
	outFields->push(HX_("_host",47,eb,23,f8));
	outFields->push(HX_("_port",60,9f,6d,fd));
	outFields->push(HX_("_path",84,01,63,fd));
	outFields->push(HX_("_processThread",da,7e,5e,a3));
	outFields->push(HX_("_encodedKey",d0,19,72,df));
	outFields->push(HX_("binaryType",5b,6f,e2,ee));
	outFields->push(HX_("additionalHeaders",1f,7c,db,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WebSocket_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(WebSocket_obj,_protocol),HX_("_protocol",b7,4d,f9,47)},
	{::hx::fsString,(int)offsetof(WebSocket_obj,_host),HX_("_host",47,eb,23,f8)},
	{::hx::fsInt,(int)offsetof(WebSocket_obj,_port),HX_("_port",60,9f,6d,fd)},
	{::hx::fsString,(int)offsetof(WebSocket_obj,_path),HX_("_path",84,01,63,fd)},
	{::hx::fsObject /*  ::sys::thread::_Thread::HaxeThread */ ,(int)offsetof(WebSocket_obj,_processThread),HX_("_processThread",da,7e,5e,a3)},
	{::hx::fsString,(int)offsetof(WebSocket_obj,_encodedKey),HX_("_encodedKey",d0,19,72,df)},
	{::hx::fsString,(int)offsetof(WebSocket_obj,binaryType),HX_("binaryType",5b,6f,e2,ee)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(WebSocket_obj,additionalHeaders),HX_("additionalHeaders",1f,7c,db,ca)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WebSocket_obj_sStaticStorageInfo = 0;
#endif

static ::String WebSocket_obj_sMemberFields[] = {
	HX_("_protocol",b7,4d,f9,47),
	HX_("_host",47,eb,23,f8),
	HX_("_port",60,9f,6d,fd),
	HX_("_path",84,01,63,fd),
	HX_("_processThread",da,7e,5e,a3),
	HX_("_encodedKey",d0,19,72,df),
	HX_("binaryType",5b,6f,e2,ee),
	HX_("additionalHeaders",1f,7c,db,ca),
	HX_("parseUrl",fc,34,7b,d6),
	HX_("createSocket",cf,cb,9b,48),
	HX_("open",ca,03,b4,49),
	HX_("processThread",99,8e,0c,65),
	HX_("processLoop",73,d8,4e,64),
	HX_("get_additionalHeaders",f6,7e,89,49),
	HX_("sendHandshake",8f,4a,b0,18),
	HX_("handleData",f2,f9,08,61),
	HX_("handshake",f7,e0,35,b4),
	HX_("generateWSKey",8e,cf,41,62),
	::String(null()) };

::hx::Class WebSocket_obj::__mClass;

void WebSocket_obj::__register()
{
	WebSocket_obj _hx_dummy;
	WebSocket_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ws.WebSocket",bd,11,84,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WebSocket_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WebSocket_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WebSocket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WebSocket_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ws
