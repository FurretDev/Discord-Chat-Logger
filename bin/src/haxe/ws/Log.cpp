// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_ws_Log
#include <haxe/ws/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_16_info,"haxe.ws.Log","info",0x196b8b02,"haxe.ws.Log.info","haxe/ws/Log.hx",16,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_28_debug,"haxe.ws.Log","debug",0x3db7413f,"haxe.ws.Log.debug","haxe/ws/Log.hx",28,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_40_data,"haxe.ws.Log","data",0x1613a8be,"haxe.ws.Log.data","haxe/ws/Log.hx",40,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_4_boot,"haxe.ws.Log","boot",0x14cbd6c6,"haxe.ws.Log.boot","haxe/ws/Log.hx",4,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_5_boot,"haxe.ws.Log","boot",0x14cbd6c6,"haxe.ws.Log.boot","haxe/ws/Log.hx",5,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_6_boot,"haxe.ws.Log","boot",0x14cbd6c6,"haxe.ws.Log.boot","haxe/ws/Log.hx",6,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_8_boot,"haxe.ws.Log","boot",0x14cbd6c6,"haxe.ws.Log.boot","haxe/ws/Log.hx",8,0x6ea50f44)
HX_LOCAL_STACK_FRAME(_hx_pos_91cb3d6648825ae9_11_boot,"haxe.ws.Log","boot",0x14cbd6c6,"haxe.ws.Log.boot","haxe/ws/Log.hx",11,0x6ea50f44)
namespace haxe{
namespace ws{

void Log_obj::__construct() { }

Dynamic Log_obj::__CreateEmpty() { return new Log_obj; }

void *Log_obj::_hx_vtable = 0;

Dynamic Log_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Log_obj > _hx_result = new Log_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Log_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6988c5f6;
}

int Log_obj::INFO;

int Log_obj::DEBUG;

int Log_obj::DATA;

int Log_obj::mask;

 ::Dynamic Log_obj::logFn;

void Log_obj::info(::String data,::String id){
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_16_info)
HXLINE(  17)		if (((::haxe::ws::Log_obj::mask & 1) != 1)) {
HXLINE(  18)			return;
            		}
HXLINE(  21)		if (::hx::IsNotNull( id )) {
HXLINE(  22)			::haxe::ws::Log_obj::logFn((((HX_("INFO  :: ID-",00,41,83,b4) + id) + HX_(" :: ",40,09,53,15)) + data));
            		}
            		else {
HXLINE(  24)			::haxe::ws::Log_obj::logFn((HX_("INFO  :: ",32,4a,6b,0b) + data));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,info,(void))

void Log_obj::debug(::String data,::String id){
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_28_debug)
HXLINE(  29)		if (((::haxe::ws::Log_obj::mask & 16) != 16)) {
HXLINE(  30)			return;
            		}
HXLINE(  33)		if (::hx::IsNotNull( id )) {
HXLINE(  34)			::haxe::ws::Log_obj::logFn((((HX_("DEBUG :: ID-",df,50,22,8b) + id) + HX_(" :: ",40,09,53,15)) + data));
            		}
            		else {
HXLINE(  36)			::haxe::ws::Log_obj::logFn((HX_("DEBUG :: ",f3,28,5d,1e) + data));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,debug,(void))

void Log_obj::data(::String data,::String id){
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_40_data)
HXLINE(  41)		if (((::haxe::ws::Log_obj::mask & 256) != 256)) {
HXLINE(  42)			return;
            		}
HXLINE(  45)		if (::hx::IsNotNull( id )) {
HXLINE(  46)			::haxe::ws::Log_obj::logFn(((((HX_("DATA  :: ID-",bc,7a,59,db) + id) + HX_("\n------------------------------\n",a0,0c,4d,5e)) + data) + HX_("\n------------------------------",2a,18,c8,50)));
            		}
            		else {
HXLINE(  48)			::haxe::ws::Log_obj::logFn((HX_("",00,00,00,00) + data));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,data,(void))


Log_obj::Log_obj()
{
}

bool Log_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { outValue = ( mask ); return true; }
		if (HX_FIELD_EQ(inName,"info") ) { outValue = info_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"data") ) { outValue = data_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"logFn") ) { outValue = ( logFn ); return true; }
		if (HX_FIELD_EQ(inName,"debug") ) { outValue = debug_dyn(); return true; }
	}
	return false;
}

bool Log_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { mask=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"logFn") ) { logFn=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Log_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Log_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Log_obj::INFO,HX_("INFO",6e,00,7c,30)},
	{::hx::fsInt,(void *) &Log_obj::DEBUG,HX_("DEBUG",33,8a,0d,55)},
	{::hx::fsInt,(void *) &Log_obj::DATA,HX_("DATA",2a,1e,24,2d)},
	{::hx::fsInt,(void *) &Log_obj::mask,HX_("mask",ec,40,56,48)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Log_obj::logFn,HX_("logFn",ec,ba,f3,78)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Log_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Log_obj::INFO,"INFO");
	HX_MARK_MEMBER_NAME(Log_obj::DEBUG,"DEBUG");
	HX_MARK_MEMBER_NAME(Log_obj::DATA,"DATA");
	HX_MARK_MEMBER_NAME(Log_obj::mask,"mask");
	HX_MARK_MEMBER_NAME(Log_obj::logFn,"logFn");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Log_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Log_obj::INFO,"INFO");
	HX_VISIT_MEMBER_NAME(Log_obj::DEBUG,"DEBUG");
	HX_VISIT_MEMBER_NAME(Log_obj::DATA,"DATA");
	HX_VISIT_MEMBER_NAME(Log_obj::mask,"mask");
	HX_VISIT_MEMBER_NAME(Log_obj::logFn,"logFn");
};

#endif

::hx::Class Log_obj::__mClass;

static ::String Log_obj_sStaticFields[] = {
	HX_("INFO",6e,00,7c,30),
	HX_("DEBUG",33,8a,0d,55),
	HX_("DATA",2a,1e,24,2d),
	HX_("mask",ec,40,56,48),
	HX_("logFn",ec,ba,f3,78),
	HX_("info",6e,38,bb,45),
	HX_("debug",53,52,1f,d7),
	HX_("data",2a,56,63,42),
	::String(null())
};

void Log_obj::__register()
{
	Log_obj _hx_dummy;
	Log_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ws.Log",5a,16,ad,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Log_obj::__GetStatic;
	__mClass->mSetStaticField = &Log_obj::__SetStatic;
	__mClass->mMarkFunc = Log_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Log_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Log_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Log_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Log_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Log_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Log_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_4_boot)
HXDLIN(   4)		INFO = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_5_boot)
HXDLIN(   5)		DEBUG = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_6_boot)
HXDLIN(   6)		DATA = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_8_boot)
HXDLIN(   8)		mask = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_91cb3d6648825ae9_11_boot)
HXDLIN(  11)		logFn = ::Sys_obj::println_dyn();
            	}
}

} // end namespace haxe
} // end namespace ws
