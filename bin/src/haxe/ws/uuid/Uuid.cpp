// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#include <haxe/_Int64/Int64_Impl_.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_crypto_Sha1
#include <haxe/crypto/Sha1.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_ws_uuid_Uuid
#include <haxe/ws/uuid/Uuid.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_44_splitmix64_seed,"haxe.ws.uuid.Uuid","splitmix64_seed",0xed610206,"haxe.ws.uuid.Uuid.splitmix64_seed","haxe/ws/uuid/Uuid.hx",44,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_51_randomFromRange,"haxe.ws.uuid.Uuid","randomFromRange",0x0503ace6,"haxe.ws.uuid.Uuid.randomFromRange","haxe/ws/uuid/Uuid.hx",51,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_63_randomByte,"haxe.ws.uuid.Uuid","randomByte",0x3ee326f5,"haxe.ws.uuid.Uuid.randomByte","haxe/ws/uuid/Uuid.hx",63,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_68_fromShort,"haxe.ws.uuid.Uuid","fromShort",0x5bcd09a8,"haxe.ws.uuid.Uuid.fromShort","haxe/ws/uuid/Uuid.hx",68,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_71_toShort,"haxe.ws.uuid.Uuid","toShort",0x31d8a277,"haxe.ws.uuid.Uuid.toShort","haxe/ws/uuid/Uuid.hx",71,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_78_fromNano,"haxe.ws.uuid.Uuid","fromNano",0xc4d5b788,"haxe.ws.uuid.Uuid.fromNano","haxe/ws/uuid/Uuid.hx",78,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_81_toNano,"haxe.ws.uuid.Uuid","toNano",0x3c096d99,"haxe.ws.uuid.Uuid.toNano","haxe/ws/uuid/Uuid.hx",81,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_86_v1,"haxe.ws.uuid.Uuid","v1",0x9fb10945,"haxe.ws.uuid.Uuid.v1","haxe/ws/uuid/Uuid.hx",86,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_150_v3,"haxe.ws.uuid.Uuid","v3",0x9fb10947,"haxe.ws.uuid.Uuid.v3","haxe/ws/uuid/Uuid.hx",150,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_160_v4,"haxe.ws.uuid.Uuid","v4",0x9fb10948,"haxe.ws.uuid.Uuid.v4","haxe/ws/uuid/Uuid.hx",160,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_178_v5,"haxe.ws.uuid.Uuid","v5",0x9fb10949,"haxe.ws.uuid.Uuid.v5","haxe/ws/uuid/Uuid.hx",178,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_189_stringify,"haxe.ws.uuid.Uuid","stringify",0xf2eb10c1,"haxe.ws.uuid.Uuid.stringify","haxe/ws/uuid/Uuid.hx",189,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_193_parse,"haxe.ws.uuid.Uuid","parse",0x511ff829,"haxe.ws.uuid.Uuid.parse","haxe/ws/uuid/Uuid.hx",193,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_196_validate,"haxe.ws.uuid.Uuid","validate",0x22ee4660,"haxe.ws.uuid.Uuid.validate","haxe/ws/uuid/Uuid.hx",196,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_205_version,"haxe.ws.uuid.Uuid","version",0x661eb88e,"haxe.ws.uuid.Uuid.version","haxe/ws/uuid/Uuid.hx",205,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_211_hexToUuid,"haxe.ws.uuid.Uuid","hexToUuid",0xa422ed87,"haxe.ws.uuid.Uuid.hexToUuid","haxe/ws/uuid/Uuid.hx",211,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_214_convert,"haxe.ws.uuid.Uuid","convert",0x03f6cf69,"haxe.ws.uuid.Uuid.convert","haxe/ws/uuid/Uuid.hx",214,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_243_nanoId,"haxe.ws.uuid.Uuid","nanoId",0xdb7a7779,"haxe.ws.uuid.Uuid.nanoId","haxe/ws/uuid/Uuid.hx",243,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_265_short,"haxe.ws.uuid.Uuid","short",0x0ff1ec72,"haxe.ws.uuid.Uuid.short","haxe/ws/uuid/Uuid.hx",265,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_13_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",13,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_14_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",14,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_15_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",15,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_16_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",16,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_17_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",17,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_19_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",19,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_20_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",20,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_21_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",21,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_22_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",22,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_23_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",23,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_24_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",24,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_25_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",25,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_26_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",26,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_28_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",28,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_29_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",29,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_30_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",30,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_31_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",31,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_34_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",34,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_35_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",35,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_36_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",36,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_37_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",37,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_39_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",39,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_40_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",40,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_41_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",41,0xe5d41619)
HX_LOCAL_STACK_FRAME(_hx_pos_6df71bb90311c6a8_42_boot,"haxe.ws.uuid.Uuid","boot",0xa7f0ccfc,"haxe.ws.uuid.Uuid.boot","haxe/ws/uuid/Uuid.hx",42,0xe5d41619)
namespace haxe{
namespace ws{
namespace uuid{

void Uuid_obj::__construct() { }

Dynamic Uuid_obj::__CreateEmpty() { return new Uuid_obj; }

void *Uuid_obj::_hx_vtable = 0;

Dynamic Uuid_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Uuid_obj > _hx_result = new Uuid_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Uuid_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x21160c18;
}

::String Uuid_obj::DNS;

::String Uuid_obj::URL;

::String Uuid_obj::ISO_OID;

::String Uuid_obj::X500_DN;

::String Uuid_obj::NIL;

::String Uuid_obj::LOWERCASE_BASE26;

::String Uuid_obj::UPPERCASE_BASE26;

::String Uuid_obj::NO_LOOK_ALIKES_BASE51;

::String Uuid_obj::FLICKR_BASE58;

::String Uuid_obj::BASE_70;

::String Uuid_obj::BASE_85;

::String Uuid_obj::COOKIE_BASE90;

::String Uuid_obj::NANO_ID_ALPHABET;

::String Uuid_obj::NUMBERS_BIN;

::String Uuid_obj::NUMBERS_OCT;

::String Uuid_obj::NUMBERS_DEC;

::String Uuid_obj::NUMBERS_HEX;

Float Uuid_obj::lastMSecs;

int Uuid_obj::lastNSecs;

int Uuid_obj::clockSequenceBuffer;

 ::EReg Uuid_obj::regexp;

::cpp::Int64 Uuid_obj::rndSeed;

::cpp::Int64 Uuid_obj::state0;

::cpp::Int64 Uuid_obj::state1;

::cpp::Int64 Uuid_obj::DVS;

::cpp::Int64 Uuid_obj::splitmix64_seed(::cpp::Int64 index){
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_44_splitmix64_seed)
HXLINE(  45)		::cpp::Int64 result = _hx_int64_add(index,_hx_int64_make((int)-1640531527,(int)2135587861));
HXLINE(  46)		::cpp::Int64 a = _hx_int64_xor(result,_hx_int64_shr(result,30));
HXDLIN(  46)		result = _hx_int64_mul(a,_hx_int64_make((int)-1084733587,484763065));
HXLINE(  47)		::cpp::Int64 a1 = _hx_int64_xor(result,_hx_int64_shr(result,27));
HXDLIN(  47)		result = _hx_int64_mul(a1,_hx_int64_make((int)-1798288965,321982955));
HXLINE(  48)		return _hx_int64_xor(result,_hx_int64_shr(result,31));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Uuid_obj,splitmix64_seed,return )

int Uuid_obj::randomFromRange(int min,int max){
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_51_randomFromRange)
HXLINE(  52)		::cpp::Int64 s1 = ::haxe::ws::uuid::Uuid_obj::state0;
HXLINE(  53)		::cpp::Int64 s0 = ::haxe::ws::uuid::Uuid_obj::state1;
HXLINE(  54)		::haxe::ws::uuid::Uuid_obj::state0 = s0;
HXLINE(  55)		s1 = _hx_int64_xor(s1,_hx_int64_shl(s1,23));
HXLINE(  56)		::cpp::Int64 a = _hx_int64_xor(s1,s0);
HXDLIN(  56)		::cpp::Int64 a1 = _hx_int64_xor(a,_hx_int64_ushr(s1,18));
HXDLIN(  56)		::haxe::ws::uuid::Uuid_obj::state1 = _hx_int64_xor(a1,_hx_int64_ushr(s0,5));
HXLINE(  57)		::cpp::Int64 a2 = _hx_int64_add(::haxe::ws::uuid::Uuid_obj::state1,s0);
HXDLIN(  57)		::cpp::Int64 b = ( (::cpp::Int64)(((max - min) + 1)) );
HXDLIN(  57)		if (_hx_int64_is_zero(b)) {
HXLINE(  57)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  57)		int result = _hx_int64_low(_hx_int64_mod(a2,b));
HXLINE(  58)		if ((result < 0)) {
HXLINE(  58)			result = -(result);
            		}
HXLINE(  59)		return (result + min);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,randomFromRange,return )

int Uuid_obj::randomByte(){
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_63_randomByte)
HXDLIN(  63)		return ::haxe::ws::uuid::Uuid_obj::randomFromRange(0,255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Uuid_obj,randomByte,return )

::String Uuid_obj::fromShort(::String shortUuid,::String __o_separator,::String __o_fromAlphabet){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		::String fromAlphabet = __o_fromAlphabet;
            		if (::hx::IsNull(__o_fromAlphabet)) fromAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_68_fromShort)
HXDLIN(  68)		return ::haxe::ws::uuid::Uuid_obj::hexToUuid(::haxe::ws::uuid::Uuid_obj::convert(shortUuid,fromAlphabet,HX_("0123456789abcdef",68,7e,d5,ef)),separator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uuid_obj,fromShort,return )

::String Uuid_obj::toShort(::String uuid,::String __o_separator,::String __o_toAlphabet){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_71_toShort)
HXLINE(  72)		uuid = ::StringTools_obj::replace(uuid,separator,HX_("",00,00,00,00)).toLowerCase();
HXLINE(  73)		return ::haxe::ws::uuid::Uuid_obj::convert(uuid,HX_("0123456789abcdef",68,7e,d5,ef),toAlphabet);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uuid_obj,toShort,return )

::String Uuid_obj::fromNano(::String nanoUuid,::String __o_separator,::String __o_fromAlphabet){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		::String fromAlphabet = __o_fromAlphabet;
            		if (::hx::IsNull(__o_fromAlphabet)) fromAlphabet = HX_("_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",0d,d1,1f,57);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_78_fromNano)
HXDLIN(  78)		return ::haxe::ws::uuid::Uuid_obj::hexToUuid(::haxe::ws::uuid::Uuid_obj::convert(nanoUuid,fromAlphabet,HX_("0123456789abcdef",68,7e,d5,ef)),separator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uuid_obj,fromNano,return )

::String Uuid_obj::toNano(::String uuid,::String __o_separator,::String __o_toAlphabet){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",0d,d1,1f,57);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_81_toNano)
HXLINE(  82)		uuid = ::StringTools_obj::replace(uuid,separator,HX_("",00,00,00,00)).toLowerCase();
HXLINE(  83)		return ::haxe::ws::uuid::Uuid_obj::convert(uuid,HX_("0123456789abcdef",68,7e,d5,ef),toAlphabet);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uuid_obj,toNano,return )

::String Uuid_obj::v1( ::haxe::io::Bytes node,::hx::Null< int >  __o_optClockSequence,::hx::Null< Float >  __o_msecs,::hx::Null< int >  __o_optNsecs, ::Dynamic randomFunc,::String __o_separator,::hx::Null< bool >  __o_shortUuid,::String __o_toAlphabet){
            		int optClockSequence = __o_optClockSequence.Default(-1);
            		Float msecs = __o_msecs.Default(-1);
            		int optNsecs = __o_optNsecs.Default(-1);
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		bool shortUuid = __o_shortUuid.Default(false);
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_86_v1)
HXLINE(  87)		if (::hx::IsNull( randomFunc )) {
HXLINE(  87)			randomFunc = ::haxe::ws::uuid::Uuid_obj::randomByte_dyn();
            		}
HXLINE(  88)		 ::haxe::io::Bytes buffer = ::haxe::io::Bytes_obj::alloc(16);
HXLINE(  89)		if (::hx::IsNull( node )) {
HXLINE(  90)			node = ::haxe::io::Bytes_obj::alloc(6);
HXLINE(  91)			{
HXLINE(  92)				{
HXLINE(  92)					int v = ( (int)(randomFunc()) );
HXDLIN(  92)					node->b[0] = ( (unsigned char)(v) );
            				}
HXDLIN(  92)				{
HXLINE(  92)					int v1 = ( (int)(randomFunc()) );
HXDLIN(  92)					node->b[1] = ( (unsigned char)(v1) );
            				}
HXDLIN(  92)				{
HXLINE(  92)					int v2 = ( (int)(randomFunc()) );
HXDLIN(  92)					node->b[2] = ( (unsigned char)(v2) );
            				}
HXDLIN(  92)				{
HXLINE(  92)					int v3 = ( (int)(randomFunc()) );
HXDLIN(  92)					node->b[3] = ( (unsigned char)(v3) );
            				}
HXDLIN(  92)				{
HXLINE(  92)					int v4 = ( (int)(randomFunc()) );
HXDLIN(  92)					node->b[4] = ( (unsigned char)(v4) );
            				}
HXDLIN(  92)				{
HXLINE(  92)					int v5 = ( (int)(randomFunc()) );
HXDLIN(  92)					node->b[5] = ( (unsigned char)(v5) );
            				}
            			}
HXLINE(  93)			node->b[0] = ( (unsigned char)((( (int)(node->b->__get(0)) ) | 1)) );
            		}
HXLINE(  95)		if ((::haxe::ws::uuid::Uuid_obj::clockSequenceBuffer == -1)) {
HXLINE(  96)			int _hx_tmp = (( (int)(randomFunc()) ) << 8);
HXDLIN(  96)			::haxe::ws::uuid::Uuid_obj::clockSequenceBuffer = ((_hx_tmp | ( (int)(randomFunc()) )) & 16383);
            		}
HXLINE(  98)		int clockSeq = optClockSequence;
HXLINE(  99)		if ((optClockSequence == -1)) {
HXLINE( 100)			clockSeq = ::haxe::ws::uuid::Uuid_obj::clockSequenceBuffer;
            		}
HXLINE( 102)		if ((msecs == -1)) {
HXLINE( 103)			msecs = ::Math_obj::fround((::Sys_obj::time() * ( (Float)(1000) )));
            		}
HXLINE( 105)		int nsecs = optNsecs;
HXLINE( 106)		if ((optNsecs == -1)) {
HXLINE( 107)			nsecs = (::haxe::ws::uuid::Uuid_obj::lastNSecs + 1);
            		}
HXLINE( 109)		Float dt = ((msecs - ::haxe::ws::uuid::Uuid_obj::lastMSecs) + (( (Float)((nsecs - ::haxe::ws::uuid::Uuid_obj::lastNSecs)) ) / ( (Float)(10000) )));
HXLINE( 110)		bool _hx_tmp1;
HXDLIN( 110)		if ((dt < 0)) {
HXLINE( 110)			_hx_tmp1 = (optClockSequence == -1);
            		}
            		else {
HXLINE( 110)			_hx_tmp1 = false;
            		}
HXDLIN( 110)		if (_hx_tmp1) {
HXLINE( 111)			clockSeq = ((clockSeq + 1) & 16383);
            		}
HXLINE( 113)		bool _hx_tmp2;
HXDLIN( 113)		bool _hx_tmp3;
HXDLIN( 113)		if (!((dt < 0))) {
HXLINE( 113)			_hx_tmp3 = (msecs > ::haxe::ws::uuid::Uuid_obj::lastMSecs);
            		}
            		else {
HXLINE( 113)			_hx_tmp3 = true;
            		}
HXDLIN( 113)		if (_hx_tmp3) {
HXLINE( 113)			_hx_tmp2 = (optNsecs == -1);
            		}
            		else {
HXLINE( 113)			_hx_tmp2 = false;
            		}
HXDLIN( 113)		if (_hx_tmp2) {
HXLINE( 114)			nsecs = 0;
            		}
HXLINE( 116)		if ((nsecs >= 10000)) {
HXLINE( 117)			HX_STACK_DO_THROW(HX_("Can't create more than 10M uuids/sec",73,da,04,57));
            		}
HXLINE( 119)		::haxe::ws::uuid::Uuid_obj::lastMSecs = msecs;
HXLINE( 120)		::haxe::ws::uuid::Uuid_obj::lastNSecs = nsecs;
HXLINE( 121)		::haxe::ws::uuid::Uuid_obj::clockSequenceBuffer = clockSeq;
HXLINE( 123)		msecs = (msecs + ((Float)12219292800000));
HXLINE( 124)		::cpp::Int64 imsecs = ::haxe::_Int64::Int64_Impl__obj::fromFloat(msecs);
HXLINE( 125)		::cpp::Int64 a = _hx_int64_add(_hx_int64_mul(_hx_int64_and(imsecs,( (::cpp::Int64)(268435455) )),( (::cpp::Int64)(10000) )),( (::cpp::Int64)(nsecs) ));
HXDLIN( 125)		::cpp::Int64 b = ::haxe::ws::uuid::Uuid_obj::DVS;
HXDLIN( 125)		if (_hx_int64_is_zero(b)) {
HXLINE( 125)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 125)		int tl = _hx_int64_low(_hx_int64_mod(a,b));
HXLINE( 126)		buffer->b[0] = ( (unsigned char)((::hx::UShr(tl,24) & 255)) );
HXLINE( 127)		buffer->b[1] = ( (unsigned char)((::hx::UShr(tl,16) & 255)) );
HXLINE( 128)		buffer->b[2] = ( (unsigned char)((::hx::UShr(tl,8) & 255)) );
HXLINE( 129)		buffer->b[3] = ( (unsigned char)((tl & 255)) );
HXLINE( 131)		::cpp::Int64 b1 = ::haxe::ws::uuid::Uuid_obj::DVS;
HXDLIN( 131)		if (_hx_int64_is_zero(b1)) {
HXLINE( 131)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 131)		int tmh = _hx_int64_low(_hx_int64_and(_hx_int64_mul(_hx_int64_div(imsecs,b1),( (::cpp::Int64)(10000) )),( (::cpp::Int64)(268435455) )));
HXLINE( 132)		buffer->b[4] = ( (unsigned char)((::hx::UShr(tmh,8) & 255)) );
HXLINE( 133)		buffer->b[5] = ( (unsigned char)((tmh & 255)) );
HXLINE( 135)		buffer->b[6] = ( (unsigned char)(((::hx::UShr(tmh,24) & 15) | 16)) );
HXLINE( 136)		buffer->b[7] = ( (unsigned char)((::hx::UShr(tmh,16) & 255)) );
HXLINE( 138)		buffer->b[8] = ( (unsigned char)((::hx::UShr(clockSeq,8) | 128)) );
HXLINE( 139)		buffer->b[9] = ( (unsigned char)((clockSeq & 255)) );
HXLINE( 141)		{
HXLINE( 142)			buffer->b[10] = node->b->__get(0);
HXDLIN( 142)			buffer->b[11] = node->b->__get(1);
HXDLIN( 142)			buffer->b[12] = node->b->__get(2);
HXDLIN( 142)			buffer->b[13] = node->b->__get(3);
HXDLIN( 142)			buffer->b[14] = node->b->__get(4);
HXDLIN( 142)			buffer->b[15] = node->b->__get(5);
            		}
HXLINE( 144)		::String uuid = ::haxe::ws::uuid::Uuid_obj::stringify(buffer,separator);
HXLINE( 145)		if (shortUuid) {
HXLINE( 145)			uuid = ::haxe::ws::uuid::Uuid_obj::toShort(uuid,separator,toAlphabet);
            		}
HXLINE( 147)		return uuid;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Uuid_obj,v1,return )

::String Uuid_obj::v3(::String name,::String __o__hx_namespace,::String __o_separator,::hx::Null< bool >  __o_shortUuid,::String __o_toAlphabet){
            		::String _hx_namespace = __o__hx_namespace;
            		if (::hx::IsNull(__o__hx_namespace)) _hx_namespace = HX_("",00,00,00,00);
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		bool shortUuid = __o_shortUuid.Default(false);
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_150_v3)
HXLINE( 151)		_hx_namespace = ::StringTools_obj::replace(_hx_namespace,HX_("-",2d,00,00,00),HX_("",00,00,00,00));
HXLINE( 152)		 ::haxe::io::Bytes buffer = ::haxe::crypto::Md5_obj::make(::haxe::io::Bytes_obj::ofHex((_hx_namespace + ::haxe::io::Bytes_obj::ofString(name,null())->toHex())));
HXLINE( 153)		buffer->b[6] = ( (unsigned char)(((( (int)(buffer->b->__get(6)) ) & 15) | 48)) );
HXLINE( 154)		buffer->b[8] = ( (unsigned char)(((( (int)(buffer->b->__get(8)) ) & 63) | 128)) );
HXLINE( 155)		::String uuid = ::haxe::ws::uuid::Uuid_obj::stringify(buffer,separator);
HXLINE( 156)		if (shortUuid) {
HXLINE( 156)			uuid = ::haxe::ws::uuid::Uuid_obj::toShort(uuid,separator,toAlphabet);
            		}
HXLINE( 157)		return uuid;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Uuid_obj,v3,return )

::String Uuid_obj::v4( ::haxe::io::Bytes randBytes, ::Dynamic randomFunc,::String __o_separator,::hx::Null< bool >  __o_shortUuid,::String __o_toAlphabet){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		bool shortUuid = __o_shortUuid.Default(false);
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_160_v4)
HXLINE( 161)		if (::hx::IsNull( randomFunc )) {
HXLINE( 161)			randomFunc = ::haxe::ws::uuid::Uuid_obj::randomByte_dyn();
            		}
HXLINE( 162)		 ::haxe::io::Bytes buffer = randBytes;
HXLINE( 163)		if (::hx::IsNull( randBytes )) {
HXLINE( 164)			buffer = ::haxe::io::Bytes_obj::alloc(16);
HXLINE( 165)			{
HXLINE( 166)				{
HXLINE( 166)					int v = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[0] = ( (unsigned char)(v) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v1 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[1] = ( (unsigned char)(v1) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v2 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[2] = ( (unsigned char)(v2) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v3 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[3] = ( (unsigned char)(v3) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v4 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[4] = ( (unsigned char)(v4) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v5 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[5] = ( (unsigned char)(v5) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v6 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[6] = ( (unsigned char)(v6) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v7 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[7] = ( (unsigned char)(v7) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v8 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[8] = ( (unsigned char)(v8) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v9 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[9] = ( (unsigned char)(v9) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v10 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[10] = ( (unsigned char)(v10) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v11 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[11] = ( (unsigned char)(v11) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v12 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[12] = ( (unsigned char)(v12) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v13 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[13] = ( (unsigned char)(v13) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v14 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[14] = ( (unsigned char)(v14) );
            				}
HXDLIN( 166)				{
HXLINE( 166)					int v15 = ( (int)(randomFunc()) );
HXDLIN( 166)					buffer->b[15] = ( (unsigned char)(v15) );
            				}
            			}
            		}
            		else {
HXLINE( 169)			if ((randBytes->length < 16)) {
HXLINE( 169)				HX_STACK_DO_THROW(HX_("Random bytes should be at least 16 bytes",12,b9,c9,d0));
            			}
            		}
HXLINE( 171)		buffer->b[6] = ( (unsigned char)(((( (int)(buffer->b->__get(6)) ) & 15) | 64)) );
HXLINE( 172)		buffer->b[8] = ( (unsigned char)(((( (int)(buffer->b->__get(8)) ) & 63) | 128)) );
HXLINE( 173)		::String uuid = ::haxe::ws::uuid::Uuid_obj::stringify(buffer,separator);
HXLINE( 174)		if (shortUuid) {
HXLINE( 174)			uuid = ::haxe::ws::uuid::Uuid_obj::toShort(uuid,separator,toAlphabet);
            		}
HXLINE( 175)		return uuid;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Uuid_obj,v4,return )

::String Uuid_obj::v5(::String name,::String __o__hx_namespace,::String __o_separator,::hx::Null< bool >  __o_shortUuid,::String __o_toAlphabet){
            		::String _hx_namespace = __o__hx_namespace;
            		if (::hx::IsNull(__o__hx_namespace)) _hx_namespace = HX_("",00,00,00,00);
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            		bool shortUuid = __o_shortUuid.Default(false);
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_178_v5)
HXLINE( 179)		_hx_namespace = ::StringTools_obj::replace(_hx_namespace,HX_("-",2d,00,00,00),HX_("",00,00,00,00));
HXLINE( 180)		 ::haxe::io::Bytes buffer = ::haxe::crypto::Sha1_obj::make(::haxe::io::Bytes_obj::ofHex((_hx_namespace + ::haxe::io::Bytes_obj::ofString(name,null())->toHex())));
HXLINE( 181)		buffer->b[6] = ( (unsigned char)(((( (int)(buffer->b->__get(6)) ) & 15) | 80)) );
HXLINE( 182)		buffer->b[8] = ( (unsigned char)(((( (int)(buffer->b->__get(8)) ) & 63) | 128)) );
HXLINE( 183)		::String uuid = ::haxe::ws::uuid::Uuid_obj::stringify(buffer,separator);
HXLINE( 184)		if (shortUuid) {
HXLINE( 184)			uuid = ::haxe::ws::uuid::Uuid_obj::toShort(uuid,separator,toAlphabet);
            		}
HXLINE( 185)		return uuid;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Uuid_obj,v5,return )

::String Uuid_obj::stringify( ::haxe::io::Bytes data,::String __o_separator){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_189_stringify)
HXDLIN( 189)		return ::haxe::ws::uuid::Uuid_obj::hexToUuid(data->toHex(),separator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,stringify,return )

 ::haxe::io::Bytes Uuid_obj::parse(::String uuid,::String __o_separator){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_193_parse)
HXDLIN( 193)		return ::haxe::io::Bytes_obj::ofHex(::StringTools_obj::replace(uuid,separator,HX_("",00,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,parse,return )

bool Uuid_obj::validate(::String uuid,::String __o_separator){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_196_validate)
HXLINE( 197)		if ((separator == HX_("",00,00,00,00))) {
HXLINE( 198)			::String uuid1 = (uuid.substr(0,8) + HX_("-",2d,00,00,00));
HXDLIN( 198)			::String uuid2 = ((uuid1 + uuid.substr(8,4)) + HX_("-",2d,00,00,00));
HXDLIN( 198)			::String uuid3 = ((uuid2 + uuid.substr(12,4)) + HX_("-",2d,00,00,00));
HXDLIN( 198)			::String uuid4 = ((uuid3 + uuid.substr(16,4)) + HX_("-",2d,00,00,00));
HXDLIN( 198)			uuid = (uuid4 + uuid.substr(20,12));
            		}
            		else {
HXLINE( 199)			if ((separator != HX_("-",2d,00,00,00))) {
HXLINE( 200)				uuid = ::StringTools_obj::replace(uuid,separator,HX_("-",2d,00,00,00));
            			}
            		}
HXLINE( 202)		return ::haxe::ws::uuid::Uuid_obj::regexp->match(uuid);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,validate,return )

int Uuid_obj::version(::String uuid,::String __o_separator){
            		::String separator = __o_separator;
            		if (::hx::IsNull(__o_separator)) separator = HX_("-",2d,00,00,00);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_205_version)
HXLINE( 206)		uuid = ::StringTools_obj::replace(uuid,separator,HX_("",00,00,00,00));
HXLINE( 207)		return ( (int)(::Std_obj::parseInt((HX_("0x",48,2a,00,00) + uuid.substr(12,1)))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,version,return )

::String Uuid_obj::hexToUuid(::String hex,::String separator){
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_211_hexToUuid)
HXDLIN( 211)		::String _hx_tmp = (hex.substr(0,8) + separator);
HXDLIN( 211)		::String _hx_tmp1 = ((_hx_tmp + hex.substr(8,4)) + separator);
HXDLIN( 211)		::String _hx_tmp2 = ((_hx_tmp1 + hex.substr(12,4)) + separator);
HXDLIN( 211)		::String _hx_tmp3 = ((_hx_tmp2 + hex.substr(16,4)) + separator);
HXDLIN( 211)		return (_hx_tmp3 + hex.substr(20,12));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,hexToUuid,return )

::String Uuid_obj::convert(::String number,::String fromAlphabet,::String toAlphabet){
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_214_convert)
HXLINE( 215)		int fromBase = fromAlphabet.length;
HXLINE( 216)		int toBase = toAlphabet.length;
HXLINE( 217)		int len = number.length;
HXLINE( 218)		::String buf = HX_("",00,00,00,00);
HXLINE( 219)		::Array< int > numberMap = ::Array_obj< int >::__new(len);
HXLINE( 220)		int divide = 0;
HXDLIN( 220)		int newlen = 0;
HXLINE( 221)		{
HXLINE( 221)			int _g = 0;
HXDLIN( 221)			int _g1 = len;
HXDLIN( 221)			while((_g < _g1)){
HXLINE( 221)				_g = (_g + 1);
HXDLIN( 221)				int i = (_g - 1);
HXLINE( 222)				{
HXLINE( 222)					int val = fromAlphabet.indexOf(number.charAt(i),null());
HXDLIN( 222)					numberMap->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 224)		do {
HXLINE( 225)			divide = 0;
HXLINE( 226)			newlen = 0;
HXLINE( 227)			{
HXLINE( 227)				int _g2 = 0;
HXDLIN( 227)				int _g3 = len;
HXDLIN( 227)				while((_g2 < _g3)){
HXLINE( 227)					_g2 = (_g2 + 1);
HXLINE( 228)					divide = ((divide * fromBase) + ( (int)(_hx_array_unsafe_get(numberMap,(_g2 - 1))) ));
HXLINE( 229)					if ((divide >= toBase)) {
HXLINE( 230)						{
HXLINE( 230)							newlen = (newlen + 1);
HXDLIN( 230)							numberMap->__unsafe_set((newlen - 1),::Math_obj::floor((( (Float)(divide) ) / ( (Float)(toBase) ))));
            						}
HXLINE( 231)						divide = ::hx::Mod(divide,toBase);
            					}
            					else {
HXLINE( 232)						if ((newlen > 0)) {
HXLINE( 233)							newlen = (newlen + 1);
HXDLIN( 233)							numberMap->__unsafe_set((newlen - 1),0);
            						}
            					}
            				}
            			}
HXLINE( 236)			len = newlen;
HXLINE( 237)			buf = (toAlphabet.charAt(divide) + buf);
            		} while((newlen != 0));
;
HXLINE( 240)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uuid_obj,convert,return )

::String Uuid_obj::nanoId(::hx::Null< int >  __o_len,::String __o_alphabet, ::Dynamic randomFunc){
            		int len = __o_len.Default(21);
            		::String alphabet = __o_alphabet;
            		if (::hx::IsNull(__o_alphabet)) alphabet = HX_("_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",0d,d1,1f,57);
            	HX_GC_STACKFRAME(&_hx_pos_6df71bb90311c6a8_243_nanoId)
HXLINE( 244)		if (::hx::IsNull( randomFunc )) {
HXLINE( 244)			randomFunc = ::haxe::ws::uuid::Uuid_obj::randomByte_dyn();
            		}
HXLINE( 245)		if (::hx::IsNull( alphabet )) {
HXLINE( 245)			HX_STACK_DO_THROW(HX_("Alphabet cannot be null",94,88,64,a7));
            		}
HXLINE( 246)		bool _hx_tmp;
HXDLIN( 246)		if ((alphabet.length != 0)) {
HXLINE( 246)			_hx_tmp = (alphabet.length >= 256);
            		}
            		else {
HXLINE( 246)			_hx_tmp = true;
            		}
HXDLIN( 246)		if (_hx_tmp) {
HXLINE( 246)			HX_STACK_DO_THROW(HX_("Alphabet must contain between 1 and 255 symbols",87,c8,75,f0));
            		}
HXLINE( 247)		if ((len <= 0)) {
HXLINE( 247)			HX_STACK_DO_THROW(HX_("Length must be greater than zero",e1,1b,09,24));
            		}
HXLINE( 248)		int mask = ((2 << ::Math_obj::floor((::Math_obj::log(( (Float)((alphabet.length - 1)) )) / ::Math_obj::log(( (Float)(2) ))))) - 1);
HXLINE( 249)		int step = ::Math_obj::ceil((((((Float)1.6) * ( (Float)(mask) )) * ( (Float)(len) )) / ( (Float)(alphabet.length) )));
HXLINE( 250)		 ::StringBuf sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 251)		while((sb->get_length() != len)){
HXLINE( 252)			int _g = 0;
HXDLIN( 252)			while((_g < step)){
HXLINE( 252)				_g = (_g + 1);
HXLINE( 254)				int aIndex = (( (int)(randomFunc()) ) & mask);
HXLINE( 255)				if ((aIndex < alphabet.length)) {
HXLINE( 256)					{
HXLINE( 256)						::String x = alphabet.charAt(aIndex);
HXDLIN( 256)						if (::hx::IsNotNull( sb->charBuf )) {
HXLINE( 256)							sb->flush();
            						}
HXDLIN( 256)						if (::hx::IsNull( sb->b )) {
HXLINE( 256)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE( 256)							::Array< ::String > sb1 = sb->b;
HXDLIN( 256)							sb1->push(::Std_obj::string(x));
            						}
            					}
HXLINE( 257)					if ((sb->get_length() == len)) {
HXLINE( 257)						goto _hx_goto_21;
            					}
            				}
            			}
            			_hx_goto_21:;
            		}
HXLINE( 261)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uuid_obj,nanoId,return )

::String Uuid_obj::_hx_short(::String __o_toAlphabet, ::Dynamic randomFunc){
            		::String toAlphabet = __o_toAlphabet;
            		if (::hx::IsNull(__o_toAlphabet)) toAlphabet = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_265_short)
HXDLIN( 265)		return ::haxe::ws::uuid::Uuid_obj::v4(null(),randomFunc,null(),true,toAlphabet);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Uuid_obj,_hx_short,return )


Uuid_obj::Uuid_obj()
{
}

bool Uuid_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"v1") ) { outValue = v1_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"v3") ) { outValue = v3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"v4") ) { outValue = v4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"v5") ) { outValue = v5_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"DVS") ) { outValue = ( DVS ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"short") ) { outValue = _hx_short_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"regexp") ) { outValue = ( regexp ); return true; }
		if (HX_FIELD_EQ(inName,"state0") ) { outValue = ( state0 ); return true; }
		if (HX_FIELD_EQ(inName,"state1") ) { outValue = ( state1 ); return true; }
		if (HX_FIELD_EQ(inName,"toNano") ) { outValue = toNano_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nanoId") ) { outValue = nanoId_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rndSeed") ) { outValue = ( rndSeed ); return true; }
		if (HX_FIELD_EQ(inName,"toShort") ) { outValue = toShort_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"version") ) { outValue = version_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromNano") ) { outValue = fromNano_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"validate") ) { outValue = validate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastMSecs") ) { outValue = ( lastMSecs ); return true; }
		if (HX_FIELD_EQ(inName,"lastNSecs") ) { outValue = ( lastNSecs ); return true; }
		if (HX_FIELD_EQ(inName,"fromShort") ) { outValue = fromShort_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stringify") ) { outValue = stringify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hexToUuid") ) { outValue = hexToUuid_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"randomByte") ) { outValue = randomByte_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"splitmix64_seed") ) { outValue = splitmix64_seed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"randomFromRange") ) { outValue = randomFromRange_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clockSequenceBuffer") ) { outValue = ( clockSequenceBuffer ); return true; }
	}
	return false;
}

bool Uuid_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"DVS") ) { DVS=ioValue.Cast< ::cpp::Int64 >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"regexp") ) { regexp=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"state0") ) { state0=ioValue.Cast< ::cpp::Int64 >(); return true; }
		if (HX_FIELD_EQ(inName,"state1") ) { state1=ioValue.Cast< ::cpp::Int64 >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rndSeed") ) { rndSeed=ioValue.Cast< ::cpp::Int64 >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastMSecs") ) { lastMSecs=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lastNSecs") ) { lastNSecs=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clockSequenceBuffer") ) { clockSequenceBuffer=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Uuid_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Uuid_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Uuid_obj::DNS,HX_("DNS",89,dd,33,00)},
	{::hx::fsString,(void *) &Uuid_obj::URL,HX_("URL",4f,c7,40,00)},
	{::hx::fsString,(void *) &Uuid_obj::ISO_OID,HX_("ISO_OID",90,1a,ed,c6)},
	{::hx::fsString,(void *) &Uuid_obj::X500_DN,HX_("X500_DN",ac,59,89,3f)},
	{::hx::fsString,(void *) &Uuid_obj::NIL,HX_("NIL",b1,6f,3b,00)},
	{::hx::fsString,(void *) &Uuid_obj::LOWERCASE_BASE26,HX_("LOWERCASE_BASE26",c3,ea,2a,f3)},
	{::hx::fsString,(void *) &Uuid_obj::UPPERCASE_BASE26,HX_("UPPERCASE_BASE26",02,b5,1a,36)},
	{::hx::fsString,(void *) &Uuid_obj::NO_LOOK_ALIKES_BASE51,HX_("NO_LOOK_ALIKES_BASE51",cf,f3,71,02)},
	{::hx::fsString,(void *) &Uuid_obj::FLICKR_BASE58,HX_("FLICKR_BASE58",ec,f8,64,3f)},
	{::hx::fsString,(void *) &Uuid_obj::BASE_70,HX_("BASE_70",c7,36,e1,ad)},
	{::hx::fsString,(void *) &Uuid_obj::BASE_85,HX_("BASE_85",ab,37,e1,ad)},
	{::hx::fsString,(void *) &Uuid_obj::COOKIE_BASE90,HX_("COOKIE_BASE90",a3,71,79,ad)},
	{::hx::fsString,(void *) &Uuid_obj::NANO_ID_ALPHABET,HX_("NANO_ID_ALPHABET",0c,58,58,57)},
	{::hx::fsString,(void *) &Uuid_obj::NUMBERS_BIN,HX_("NUMBERS_BIN",12,d4,e8,55)},
	{::hx::fsString,(void *) &Uuid_obj::NUMBERS_OCT,HX_("NUMBERS_OCT",2b,ac,f2,55)},
	{::hx::fsString,(void *) &Uuid_obj::NUMBERS_DEC,HX_("NUMBERS_DEC",0d,55,ea,55)},
	{::hx::fsString,(void *) &Uuid_obj::NUMBERS_HEX,HX_("NUMBERS_HEX",26,5e,ed,55)},
	{::hx::fsFloat,(void *) &Uuid_obj::lastMSecs,HX_("lastMSecs",99,18,84,46)},
	{::hx::fsInt,(void *) &Uuid_obj::lastNSecs,HX_("lastNSecs",1a,ad,ea,d9)},
	{::hx::fsInt,(void *) &Uuid_obj::clockSequenceBuffer,HX_("clockSequenceBuffer",8f,e0,c4,65)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &Uuid_obj::regexp,HX_("regexp",c9,bf,89,00)},
	{::hx::fsUnknown /* ::cpp::Int64 */ ,(void *) &Uuid_obj::rndSeed,HX_("rndSeed",b9,46,0c,4b)},
	{::hx::fsUnknown /* ::cpp::Int64 */ ,(void *) &Uuid_obj::state0,HX_("state0",ff,d8,fb,05)},
	{::hx::fsUnknown /* ::cpp::Int64 */ ,(void *) &Uuid_obj::state1,HX_("state1",00,d9,fb,05)},
	{::hx::fsUnknown /* ::cpp::Int64 */ ,(void *) &Uuid_obj::DVS,HX_("DVS",81,e4,33,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Uuid_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Uuid_obj::DNS,"DNS");
	HX_MARK_MEMBER_NAME(Uuid_obj::URL,"URL");
	HX_MARK_MEMBER_NAME(Uuid_obj::ISO_OID,"ISO_OID");
	HX_MARK_MEMBER_NAME(Uuid_obj::X500_DN,"X500_DN");
	HX_MARK_MEMBER_NAME(Uuid_obj::NIL,"NIL");
	HX_MARK_MEMBER_NAME(Uuid_obj::LOWERCASE_BASE26,"LOWERCASE_BASE26");
	HX_MARK_MEMBER_NAME(Uuid_obj::UPPERCASE_BASE26,"UPPERCASE_BASE26");
	HX_MARK_MEMBER_NAME(Uuid_obj::NO_LOOK_ALIKES_BASE51,"NO_LOOK_ALIKES_BASE51");
	HX_MARK_MEMBER_NAME(Uuid_obj::FLICKR_BASE58,"FLICKR_BASE58");
	HX_MARK_MEMBER_NAME(Uuid_obj::BASE_70,"BASE_70");
	HX_MARK_MEMBER_NAME(Uuid_obj::BASE_85,"BASE_85");
	HX_MARK_MEMBER_NAME(Uuid_obj::COOKIE_BASE90,"COOKIE_BASE90");
	HX_MARK_MEMBER_NAME(Uuid_obj::NANO_ID_ALPHABET,"NANO_ID_ALPHABET");
	HX_MARK_MEMBER_NAME(Uuid_obj::NUMBERS_BIN,"NUMBERS_BIN");
	HX_MARK_MEMBER_NAME(Uuid_obj::NUMBERS_OCT,"NUMBERS_OCT");
	HX_MARK_MEMBER_NAME(Uuid_obj::NUMBERS_DEC,"NUMBERS_DEC");
	HX_MARK_MEMBER_NAME(Uuid_obj::NUMBERS_HEX,"NUMBERS_HEX");
	HX_MARK_MEMBER_NAME(Uuid_obj::lastMSecs,"lastMSecs");
	HX_MARK_MEMBER_NAME(Uuid_obj::lastNSecs,"lastNSecs");
	HX_MARK_MEMBER_NAME(Uuid_obj::clockSequenceBuffer,"clockSequenceBuffer");
	HX_MARK_MEMBER_NAME(Uuid_obj::regexp,"regexp");
	HX_MARK_MEMBER_NAME(Uuid_obj::rndSeed,"rndSeed");
	HX_MARK_MEMBER_NAME(Uuid_obj::state0,"state0");
	HX_MARK_MEMBER_NAME(Uuid_obj::state1,"state1");
	HX_MARK_MEMBER_NAME(Uuid_obj::DVS,"DVS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Uuid_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Uuid_obj::DNS,"DNS");
	HX_VISIT_MEMBER_NAME(Uuid_obj::URL,"URL");
	HX_VISIT_MEMBER_NAME(Uuid_obj::ISO_OID,"ISO_OID");
	HX_VISIT_MEMBER_NAME(Uuid_obj::X500_DN,"X500_DN");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NIL,"NIL");
	HX_VISIT_MEMBER_NAME(Uuid_obj::LOWERCASE_BASE26,"LOWERCASE_BASE26");
	HX_VISIT_MEMBER_NAME(Uuid_obj::UPPERCASE_BASE26,"UPPERCASE_BASE26");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NO_LOOK_ALIKES_BASE51,"NO_LOOK_ALIKES_BASE51");
	HX_VISIT_MEMBER_NAME(Uuid_obj::FLICKR_BASE58,"FLICKR_BASE58");
	HX_VISIT_MEMBER_NAME(Uuid_obj::BASE_70,"BASE_70");
	HX_VISIT_MEMBER_NAME(Uuid_obj::BASE_85,"BASE_85");
	HX_VISIT_MEMBER_NAME(Uuid_obj::COOKIE_BASE90,"COOKIE_BASE90");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NANO_ID_ALPHABET,"NANO_ID_ALPHABET");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NUMBERS_BIN,"NUMBERS_BIN");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NUMBERS_OCT,"NUMBERS_OCT");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NUMBERS_DEC,"NUMBERS_DEC");
	HX_VISIT_MEMBER_NAME(Uuid_obj::NUMBERS_HEX,"NUMBERS_HEX");
	HX_VISIT_MEMBER_NAME(Uuid_obj::lastMSecs,"lastMSecs");
	HX_VISIT_MEMBER_NAME(Uuid_obj::lastNSecs,"lastNSecs");
	HX_VISIT_MEMBER_NAME(Uuid_obj::clockSequenceBuffer,"clockSequenceBuffer");
	HX_VISIT_MEMBER_NAME(Uuid_obj::regexp,"regexp");
	HX_VISIT_MEMBER_NAME(Uuid_obj::rndSeed,"rndSeed");
	HX_VISIT_MEMBER_NAME(Uuid_obj::state0,"state0");
	HX_VISIT_MEMBER_NAME(Uuid_obj::state1,"state1");
	HX_VISIT_MEMBER_NAME(Uuid_obj::DVS,"DVS");
};

#endif

::hx::Class Uuid_obj::__mClass;

static ::String Uuid_obj_sStaticFields[] = {
	HX_("DNS",89,dd,33,00),
	HX_("URL",4f,c7,40,00),
	HX_("ISO_OID",90,1a,ed,c6),
	HX_("X500_DN",ac,59,89,3f),
	HX_("NIL",b1,6f,3b,00),
	HX_("LOWERCASE_BASE26",c3,ea,2a,f3),
	HX_("UPPERCASE_BASE26",02,b5,1a,36),
	HX_("NO_LOOK_ALIKES_BASE51",cf,f3,71,02),
	HX_("FLICKR_BASE58",ec,f8,64,3f),
	HX_("BASE_70",c7,36,e1,ad),
	HX_("BASE_85",ab,37,e1,ad),
	HX_("COOKIE_BASE90",a3,71,79,ad),
	HX_("NANO_ID_ALPHABET",0c,58,58,57),
	HX_("NUMBERS_BIN",12,d4,e8,55),
	HX_("NUMBERS_OCT",2b,ac,f2,55),
	HX_("NUMBERS_DEC",0d,55,ea,55),
	HX_("NUMBERS_HEX",26,5e,ed,55),
	HX_("lastMSecs",99,18,84,46),
	HX_("lastNSecs",1a,ad,ea,d9),
	HX_("clockSequenceBuffer",8f,e0,c4,65),
	HX_("regexp",c9,bf,89,00),
	HX_("rndSeed",b9,46,0c,4b),
	HX_("state0",ff,d8,fb,05),
	HX_("state1",00,d9,fb,05),
	HX_("DVS",81,e4,33,00),
	HX_("splitmix64_seed",90,ca,34,a6),
	HX_("randomFromRange",70,75,d7,bd),
	HX_("randomByte",ab,2a,f8,b0),
	HX_("fromShort",b2,6e,b0,30),
	HX_("toShort",01,d1,ab,48),
	HX_("fromNano",be,41,cb,a6),
	HX_("toNano",4f,de,b8,7e),
	HX_("v1",fb,66,00,00),
	HX_("v3",fd,66,00,00),
	HX_("v4",fe,66,00,00),
	HX_("v5",ff,66,00,00),
	HX_("stringify",cb,75,ce,c7),
	HX_("parse",33,90,55,bd),
	HX_("validate",96,d0,e3,04),
	HX_("version",18,e7,f1,7c),
	HX_("hexToUuid",91,52,06,79),
	HX_("convert",f3,fd,c9,1a),
	HX_("nanoId",2f,e8,29,1e),
	HX_("short",7c,84,27,7c),
	::String(null())
};

void Uuid_obj::__register()
{
	Uuid_obj _hx_dummy;
	Uuid_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ws.uuid.Uuid",e4,cb,d7,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Uuid_obj::__GetStatic;
	__mClass->mSetStaticField = &Uuid_obj::__SetStatic;
	__mClass->mMarkFunc = Uuid_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Uuid_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Uuid_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Uuid_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Uuid_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Uuid_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Uuid_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_13_boot)
HXDLIN(  13)		DNS = HX_("6ba7b810-9dad-11d1-80b4-00c04fd430c8",4d,cd,59,c0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_14_boot)
HXDLIN(  14)		URL = HX_("6ba7b811-9dad-11d1-80b4-00c04fd430c8",ce,1c,81,90);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_15_boot)
HXDLIN(  15)		ISO_OID = HX_("6ba7b812-9dad-11d1-80b4-00c04fd430c8",4f,6c,a8,60);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_16_boot)
HXDLIN(  16)		X500_DN = HX_("6ba7b814-9dad-11d1-80b4-00c04fd430c8",51,0b,f7,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_17_boot)
HXDLIN(  17)		NIL = HX_("00000000-0000-0000-0000-000000000000",c0,41,2d,20);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_19_boot)
HXDLIN(  19)		LOWERCASE_BASE26 = HX_("abcdefghijklmnopqrstuvwxyz",6d,97,f1,fb);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_20_boot)
HXDLIN(  20)		UPPERCASE_BASE26 = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZ",6d,2b,3e,d6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_21_boot)
HXDLIN(  21)		NO_LOOK_ALIKES_BASE51 = HX_("2346789ABCDEFGHJKLMNPQRTUVWXYZabcdefghijkmnpqrtwxyz",33,c4,99,12);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_22_boot)
HXDLIN(  22)		FLICKR_BASE58 = HX_("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",e5,0e,cb,db);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_23_boot)
HXDLIN(  23)		BASE_70 = HX_("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+!@#$^",00,35,ac,65);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_24_boot)
HXDLIN(  24)		BASE_85 = HX_("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#",5e,42,f1,2f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_25_boot)
HXDLIN(  25)		COOKIE_BASE90 = HX_("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~",f2,ed,f3,fc);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_26_boot)
HXDLIN(  26)		NANO_ID_ALPHABET = HX_("_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",0d,d1,1f,57);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_28_boot)
HXDLIN(  28)		NUMBERS_BIN = HX_("01",01,2a,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_29_boot)
HXDLIN(  29)		NUMBERS_OCT = HX_("01234567",04,40,e0,2c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_30_boot)
HXDLIN(  30)		NUMBERS_DEC = HX_("0123456789",05,7a,73,55);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_31_boot)
HXDLIN(  31)		NUMBERS_HEX = HX_("0123456789abcdef",68,7e,d5,ef);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_34_boot)
HXDLIN(  34)		lastMSecs = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_35_boot)
HXDLIN(  35)		lastNSecs = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_36_boot)
HXDLIN(  36)		clockSequenceBuffer = -1;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6df71bb90311c6a8_37_boot)
HXDLIN(  37)		regexp =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$",5e,d2,97,df),HX_("i",69,00,00,00));
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_39_boot)
HXDLIN(  39)		rndSeed = ::haxe::_Int64::Int64_Impl__obj::fromFloat((::Sys_obj::time() * ( (Float)(1000) )));
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_40_boot)
HXDLIN(  40)		state0 = ::haxe::ws::uuid::Uuid_obj::splitmix64_seed(::haxe::ws::uuid::Uuid_obj::rndSeed);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::cpp::Int64 _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_41_boot)
HXDLIN(  41)			::cpp::Int64 a = ::haxe::ws::uuid::Uuid_obj::rndSeed;
HXDLIN(  41)			return ::haxe::ws::uuid::Uuid_obj::splitmix64_seed(_hx_int64_add(_hx_int64_add(a,( (::cpp::Int64)(::Std_obj::random(10000)) )),( (::cpp::Int64)(1) )));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_41_boot)
HXDLIN(  41)		state1 = ( (::cpp::Int64)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_6df71bb90311c6a8_42_boot)
HXDLIN(  42)		DVS = _hx_int64_make(1,0);
            	}
}

} // end namespace haxe
} // end namespace ws
} // end namespace uuid
