// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_crypto_Sha1
#include <haxe/crypto/Sha1.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_ws_Buffer
#include <haxe/ws/Buffer.h>
#endif
#ifndef INCLUDED_haxe_ws_HttpRequest
#include <haxe/ws/HttpRequest.h>
#endif
#ifndef INCLUDED_haxe_ws_HttpResponse
#include <haxe/ws/HttpResponse.h>
#endif
#ifndef INCLUDED_haxe_ws_Log
#include <haxe/ws/Log.h>
#endif
#ifndef INCLUDED_haxe_ws_MessageType
#include <haxe/ws/MessageType.h>
#endif
#ifndef INCLUDED_haxe_ws_State
#include <haxe/ws/State.h>
#endif
#ifndef INCLUDED_haxe_ws_Utf8Encoder
#include <haxe/ws/Utf8Encoder.h>
#endif
#ifndef INCLUDED_haxe_ws_Util
#include <haxe/ws/Util.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocketCommon
#include <haxe/ws/WebSocketCommon.h>
#endif
#ifndef INCLUDED_haxe_ws__OpCode_OpCode_Impl_
#include <haxe/ws/_OpCode/OpCode_Impl_.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eddff4a08d3899e6_10_new,"haxe.ws.WebSocketCommon","new",0x878d0bba,"haxe.ws.WebSocketCommon.new","haxe/ws/WebSocketCommon.hx",10,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_40_send,"haxe.ws.WebSocketCommon","send",0x172b40ae,"haxe.ws.WebSocketCommon.send","haxe/ws/WebSocketCommon.hx",40,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_51_sendFrame,"haxe.ws.WebSocketCommon","sendFrame",0x0fd6709f,"haxe.ws.WebSocketCommon.sendFrame","haxe/ws/WebSocketCommon.hx",51,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_65_handleData,"haxe.ws.WebSocketCommon","handleData",0xdef93dd8,"haxe.ws.WebSocketCommon.handleData","haxe/ws/WebSocketCommon.hx",65,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_146_close,"haxe.ws.WebSocketCommon","close",0xfce55d92,"haxe.ws.WebSocketCommon.close","haxe/ws/WebSocketCommon.hx",146,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_161_writeBytes,"haxe.ws.WebSocketCommon","writeBytes",0xd04a46f2,"haxe.ws.WebSocketCommon.writeBytes","haxe/ws/WebSocketCommon.hx",161,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_172_prepareFrame,"haxe.ws.WebSocketCommon","prepareFrame",0x87a8f68c,"haxe.ws.WebSocketCommon.prepareFrame","haxe/ws/WebSocketCommon.hx",172,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_212_process,"haxe.ws.WebSocketCommon","process",0x7f4d92c9,"haxe.ws.WebSocketCommon.process","haxe/ws/WebSocketCommon.hx",212,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_288_sendHttpRequest,"haxe.ws.WebSocketCommon","sendHttpRequest",0x4bd14699,"haxe.ws.WebSocketCommon.sendHttpRequest","haxe/ws/WebSocketCommon.hx",288,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_304_sendHttpResponse,"haxe.ws.WebSocketCommon","sendHttpResponse",0xfd9aa7f7,"haxe.ws.WebSocketCommon.sendHttpResponse","haxe/ws/WebSocketCommon.hx",304,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_313_recvHttpRequest,"haxe.ws.WebSocketCommon","recvHttpRequest",0x5705f77b,"haxe.ws.WebSocketCommon.recvHttpRequest","haxe/ws/WebSocketCommon.hx",313,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_333_recvHttpResponse,"haxe.ws.WebSocketCommon","recvHttpResponse",0xc080bcd5,"haxe.ws.WebSocketCommon.recvHttpResponse","haxe/ws/WebSocketCommon.hx",333,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_355_makeWSKeyResponse,"haxe.ws.WebSocketCommon","makeWSKeyResponse",0xd9bd42b0,"haxe.ws.WebSocketCommon.makeWSKeyResponse","haxe/ws/WebSocketCommon.hx",355,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_197_generateMask,"haxe.ws.WebSocketCommon","generateMask",0x289f9427,"haxe.ws.WebSocketCommon.generateMask","haxe/ws/WebSocketCommon.hx",197,0xfe32a796)
HX_LOCAL_STACK_FRAME(_hx_pos_eddff4a08d3899e6_206_applyMask,"haxe.ws.WebSocketCommon","applyMask",0x7b087c54,"haxe.ws.WebSocketCommon.applyMask","haxe/ws/WebSocketCommon.hx",206,0xfe32a796)
namespace haxe{
namespace ws{

void WebSocketCommon_obj::__construct( ::sys::net::Socket socket){
            	HX_GC_STACKFRAME(&_hx_pos_eddff4a08d3899e6_10_new)
HXLINE(  62)		this->_lastPong = null();
HXLINE(  61)		this->_payload = null();
HXLINE(  26)		this->_buffer =  ::haxe::ws::Buffer_obj::__alloc( HX_CTX );
HXLINE(  19)		this->_lastError = null();
HXLINE(  18)		this->_onopenCalled = null();
HXLINE(  14)		this->isClient = true;
HXLINE(  12)		this->state = ::haxe::ws::State_obj::Handshake_dyn();
HXLINE(  29)		this->id = ::haxe::ws::Util_obj::generateUUID();
HXLINE(  30)		if (::hx::IsNull( socket )) {
HXLINE(  31)			this->_socket =  ::sys::net::Socket_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(  33)			this->_socket = socket;
            		}
HXLINE(  35)		this->_socket->setBlocking(false);
HXLINE(  36)		this->_socket->setTimeout(( (Float)(0) ));
            	}

Dynamic WebSocketCommon_obj::__CreateEmpty() { return new WebSocketCommon_obj; }

void *WebSocketCommon_obj::_hx_vtable = 0;

Dynamic WebSocketCommon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WebSocketCommon_obj > _hx_result = new WebSocketCommon_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WebSocketCommon_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6a897c2c;
}

void WebSocketCommon_obj::send( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_40_send)
HXDLIN(  40)		if (::Std_obj::isOfType(data,::hx::ClassOf< ::String >())) {
HXLINE(  41)			::haxe::ws::Log_obj::data(( (::String)(data) ),this->id);
HXLINE(  42)			this->sendFrame(::haxe::ws::Utf8Encoder_obj::encode(( (::String)(data) )),1);
            		}
            		else {
HXLINE(  43)			if (::Std_obj::isOfType(data,::hx::ClassOf< ::haxe::io::Bytes >())) {
HXLINE(  44)				this->sendFrame(( ( ::haxe::io::Bytes)(data) ),2);
            			}
            			else {
HXLINE(  45)				if (::Std_obj::isOfType(data,::hx::ClassOf< ::haxe::ws::Buffer >())) {
HXLINE(  46)					this->sendFrame(::hx::TCast<  ::haxe::ws::Buffer >::cast(data)->readAllAvailableBytes(),2);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocketCommon_obj,send,(void))

void WebSocketCommon_obj::sendFrame( ::haxe::io::Bytes data,int type){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_51_sendFrame)
HXDLIN(  51)		this->writeBytes(this->prepareFrame(data,type,true));
            	}


HX_DEFINE_DYNAMIC_FUNC2(WebSocketCommon_obj,sendFrame,(void))

void WebSocketCommon_obj::handleData(){
            	HX_GC_STACKFRAME(&_hx_pos_eddff4a08d3899e6_65_handleData)
HXDLIN(  65)		switch((int)(this->state->_hx_getIndex())){
            			case (int)1: {
HXLINE(  67)				if ((this->_buffer->available < 2)) {
HXLINE(  67)					return;
            				}
HXLINE(  69)				int b0 = this->_buffer->readByte();
HXLINE(  70)				int b1 = this->_buffer->readByte();
HXLINE(  72)				this->_isFinal = (((b0 >> 7) & 1) != 0);
HXLINE(  73)				this->_opcode = (b0 & 15);
HXLINE(  74)				bool _hx_tmp;
HXDLIN(  74)				if ((this->_opcode == 1)) {
HXLINE(  74)					_hx_tmp = false;
            				}
            				else {
HXLINE(  74)					if ((this->_opcode == 2)) {
HXLINE(  74)						_hx_tmp = true;
            					}
            					else {
HXLINE(  74)						_hx_tmp = this->_frameIsBinary;
            					}
            				}
HXDLIN(  74)				this->_frameIsBinary = _hx_tmp;
HXLINE(  75)				this->_partialLength = (b1 & 127);
HXLINE(  76)				this->_isMasked = (((b1 >> 7) & 1) != 0);
HXLINE(  78)				this->state = ::haxe::ws::State_obj::HeadExtraLength_dyn();
HXLINE(  79)				this->handleData();
            			}
            			break;
            			case (int)2: {
HXLINE(  81)				if ((this->_partialLength == 126)) {
HXLINE(  82)					if ((this->_buffer->available < 2)) {
HXLINE(  82)						return;
            					}
HXLINE(  83)					this->_length = this->_buffer->readUnsignedShort();
            				}
            				else {
HXLINE(  84)					if ((this->_partialLength == 127)) {
HXLINE(  85)						if ((this->_buffer->available < 8)) {
HXLINE(  85)							return;
            						}
HXLINE(  87)						if ((this->_buffer->readUnsignedInt() != 0)) {
HXLINE(  87)							HX_STACK_DO_THROW(HX_("message too long",01,f0,81,67));
            						}
HXLINE(  88)						this->_length = this->_buffer->readUnsignedInt();
            					}
            					else {
HXLINE(  90)						this->_length = this->_partialLength;
            					}
            				}
HXLINE(  92)				this->state = ::haxe::ws::State_obj::HeadExtraMask_dyn();
HXLINE(  93)				this->handleData();
            			}
            			break;
            			case (int)3: {
HXLINE(  95)				if (this->_isMasked) {
HXLINE(  96)					if ((this->_buffer->available < 4)) {
HXLINE(  96)						return;
            					}
HXLINE(  97)					this->_mask = this->_buffer->readBytes(4);
            				}
HXLINE(  99)				this->state = ::haxe::ws::State_obj::Body_dyn();
HXLINE( 100)				this->handleData();
            			}
            			break;
            			case (int)4: {
HXLINE( 102)				if ((this->_buffer->available < this->_length)) {
HXLINE( 102)					return;
            				}
HXLINE( 103)				if (::hx::IsNull( this->_payload )) {
HXLINE( 104)					this->_payload =  ::haxe::ws::Buffer_obj::__alloc( HX_CTX );
            				}
HXLINE( 106)				 ::haxe::ws::Buffer _hx_tmp1 = this->_payload;
HXDLIN( 106)				_hx_tmp1->writeBytes(this->_buffer->readBytes(this->_length));
HXLINE( 108)				switch((int)(this->_opcode)){
            					case (int)0: case (int)1: case (int)2: {
HXLINE( 110)						if (this->_isFinal) {
HXLINE( 111)							 ::haxe::io::Bytes messageData = this->_payload->readAllAvailableBytes();
HXLINE( 112)							 ::haxe::io::Bytes unmaskedMessageData;
HXDLIN( 112)							if (this->_isMasked) {
HXLINE( 112)								unmaskedMessageData = ::haxe::ws::WebSocketCommon_obj::applyMask(messageData,this->_mask);
            							}
            							else {
HXLINE( 112)								unmaskedMessageData = messageData;
            							}
HXLINE( 113)							if (this->_frameIsBinary) {
HXLINE( 114)								if (::hx::IsNotNull( this->onmessage )) {
HXLINE( 115)									 ::haxe::ws::Buffer buffer =  ::haxe::ws::Buffer_obj::__alloc( HX_CTX );
HXLINE( 116)									buffer->writeBytes(unmaskedMessageData);
HXLINE( 117)									this->onmessage(::haxe::ws::MessageType_obj::BytesMessage(buffer));
            								}
            							}
            							else {
HXLINE( 120)								::String stringPayload = ::haxe::ws::Utf8Encoder_obj::decode(unmaskedMessageData);
HXLINE( 121)								::haxe::ws::Log_obj::data(stringPayload,this->id);
HXLINE( 122)								if (::hx::IsNotNull( this->onmessage )) {
HXLINE( 123)									this->onmessage(::haxe::ws::MessageType_obj::StrMessage(stringPayload));
            								}
            							}
HXLINE( 126)							this->_payload = null();
            						}
            					}
            					break;
            					case (int)8: {
HXLINE( 133)						this->close();
            					}
            					break;
            					case (int)9: {
HXLINE( 129)						this->sendFrame(this->_payload->readAllAvailableBytes(),10);
            					}
            					break;
            					case (int)10: {
HXLINE( 131)						this->_lastPong = ::Date_obj::now();
            					}
            					break;
            				}
HXLINE( 136)				if (::hx::IsPointerNotEq( this->state,::haxe::ws::State_obj::Closed_dyn() )) {
HXLINE( 136)					this->state = ::haxe::ws::State_obj::Head_dyn();
            				}
HXLINE( 137)				this->handleData();
            			}
            			break;
            			case (int)5: {
HXLINE( 139)				this->close();
            			}
            			break;
            			default:{
HXLINE( 141)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 141)				::String _hx_tmp3 = (HX_("State not impl: ",c2,96,91,be) + ::Std_obj::string(this->state));
HXDLIN( 141)				_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("haxe/ws/WebSocketCommon.hx",96,a7,32,fe),141,HX_("haxe.ws.WebSocketCommon",c8,66,82,f8),HX_("handleData",f2,f9,08,61)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocketCommon_obj,handleData,(void))

void WebSocketCommon_obj::close(){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_146_close)
HXDLIN( 146)		if (::hx::IsPointerNotEq( this->state,::haxe::ws::State_obj::Closed_dyn() )) {
HXLINE( 147)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 148)				::haxe::ws::Log_obj::debug(HX_("Closed",cc,1d,e6,42),this->id);
HXLINE( 149)				this->sendFrame(::haxe::io::Bytes_obj::alloc(0),8);
HXLINE( 150)				this->state = ::haxe::ws::State_obj::Closed_dyn();
HXLINE( 151)				this->_socket->close();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 152)					{
HXLINE( 152)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 154)			if (::hx::IsNotNull( this->onclose )) {
HXLINE( 155)				this->onclose();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocketCommon_obj,close,(void))

void WebSocketCommon_obj::writeBytes( ::haxe::io::Bytes data){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_161_writeBytes)
HXDLIN( 161)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 162)			this->_socket->output->write(data);
HXLINE( 163)			this->_socket->output->flush();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 164)				{
HXLINE( 164)					null();
            				}
HXLINE( 165)				::String _hx_tmp = ::Std_obj::string(_g);
HXDLIN( 165)				::haxe::ws::Log_obj::debug(_hx_tmp,this->id);
HXLINE( 166)				if (::hx::IsNotNull( this->onerror )) {
HXLINE( 167)					 ::Dynamic _hx_tmp1 = this->onerror;
HXDLIN( 167)					_hx_tmp1(::Std_obj::string(_g));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocketCommon_obj,writeBytes,(void))

 ::haxe::io::Bytes WebSocketCommon_obj::prepareFrame( ::haxe::io::Bytes data,int type,bool isFinal){
            	HX_GC_STACKFRAME(&_hx_pos_eddff4a08d3899e6_172_prepareFrame)
HXLINE( 173)		 ::haxe::ws::Buffer out =  ::haxe::ws::Buffer_obj::__alloc( HX_CTX );
HXLINE( 174)		bool isMasked = this->isClient;
HXLINE( 175)		 ::haxe::io::Bytes mask = ::haxe::ws::WebSocketCommon_obj::generateMask();
HXLINE( 176)		int sizeMask;
HXDLIN( 176)		if (isMasked) {
HXLINE( 176)			sizeMask = 128;
            		}
            		else {
HXLINE( 176)			sizeMask = 0;
            		}
HXLINE( 178)		int _hx_tmp;
HXDLIN( 178)		if (isFinal) {
HXLINE( 178)			_hx_tmp = 128;
            		}
            		else {
HXLINE( 178)			_hx_tmp = 0;
            		}
HXDLIN( 178)		out->writeByte((::haxe::ws::_OpCode::OpCode_Impl__obj::toInt(type) | _hx_tmp));
HXLINE( 180)		if ((data->length < 126)) {
HXLINE( 181)			out->writeByte((data->length | sizeMask));
            		}
            		else {
HXLINE( 182)			if ((data->length < 65536)) {
HXLINE( 183)				out->writeByte((126 | sizeMask));
HXLINE( 184)				out->writeShort(data->length);
            			}
            			else {
HXLINE( 186)				out->writeByte((127 | sizeMask));
HXLINE( 187)				out->writeInt(0);
HXLINE( 188)				out->writeInt(data->length);
            			}
            		}
HXLINE( 191)		if (isMasked) {
HXLINE( 191)			out->writeBytes(mask);
            		}
HXLINE( 193)		 ::haxe::io::Bytes _hx_tmp1;
HXDLIN( 193)		if (isMasked) {
HXLINE( 193)			_hx_tmp1 = ::haxe::ws::WebSocketCommon_obj::applyMask(data,mask);
            		}
            		else {
HXLINE( 193)			_hx_tmp1 = data;
            		}
HXDLIN( 193)		out->writeBytes(_hx_tmp1);
HXLINE( 194)		return out->readAllAvailableBytes();
            	}


HX_DEFINE_DYNAMIC_FUNC3(WebSocketCommon_obj,prepareFrame,return )

void WebSocketCommon_obj::process(){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_212_process)
HXLINE( 213)		if (::hx::IsEq( this->_onopenCalled,false )) {
HXLINE( 214)			this->_onopenCalled = true;
HXLINE( 215)			if (::hx::IsNotNull( this->onopen )) {
HXLINE( 216)				this->onopen();
            			}
            		}
HXLINE( 220)		if (::hx::IsNotNull( this->_lastError )) {
HXLINE( 221)			 ::Dynamic error = this->_lastError;
HXLINE( 222)			this->_lastError = null();
HXLINE( 223)			if (::hx::IsNotNull( this->onerror )) {
HXLINE( 224)				this->onerror(error);
            			}
            		}
HXLINE( 228)		bool needClose = false;
HXLINE( 229)		 ::Dynamic result = null();
HXLINE( 230)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 231)			result = ::sys::net::Socket_obj::select(::Array_obj< ::Dynamic>::__new(1)->init(0,this->_socket),null(),null(),((Float)0.01));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 232)				{
HXLINE( 232)					null();
            				}
HXLINE( 233)				::haxe::ws::Log_obj::debug((HX_("Error selecting socket: ",8b,92,96,93) + ::Std_obj::string(_g)),null());
HXLINE( 234)				needClose = true;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 237)		bool _hx_tmp;
HXDLIN( 237)		if (::hx::IsNotNull( result )) {
HXLINE( 237)			_hx_tmp = (needClose == false);
            		}
            		else {
HXLINE( 237)			_hx_tmp = false;
            		}
HXDLIN( 237)		if (_hx_tmp) {
HXLINE( 238)			if ((( (::Array< ::Dynamic>)(result->__Field(HX_("read",56,4b,a7,4b),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 239)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 240)					while(true){
HXLINE( 241)						 ::haxe::io::Bytes data = ::haxe::io::Bytes_obj::alloc(1024);
HXLINE( 242)						int read = this->_socket->input->readBytes(data,0,data->length);
HXLINE( 243)						if ((read <= 0)) {
HXLINE( 244)							goto _hx_goto_7;
            						}
HXLINE( 246)						::haxe::ws::Log_obj::debug((HX_("Bytes read: ",b1,4e,61,18) + read),this->id);
HXLINE( 247)						 ::haxe::ws::Buffer _hx_tmp1 = this->_buffer;
HXDLIN( 247)						_hx_tmp1->writeBytes(data->sub(0,read));
            					}
            					_hx_goto_7:;
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g1 = _hx_e;
HXLINE( 249)						{
HXLINE( 249)							null();
            						}
HXLINE( 262)						bool needClose1;
HXDLIN( 262)						if (::hx::IsNotEq( _g1,HX_("Blocking",d5,e1,61,f3) )) {
HXLINE( 262)							if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::haxe::io::Error >())) {
HXLINE( 262)								if ((_g1.StaticCast< ::hx::EnumBase >()->_hx_getIndex() == 0)) {
HXLINE( 262)									needClose1 = true;
            								}
            								else {
HXLINE( 262)									needClose1 = false;
            								}
            							}
            							else {
HXLINE( 262)								needClose1 = false;
            							}
            						}
            						else {
HXLINE( 262)							needClose1 = true;
            						}
HXDLIN( 262)						needClose = !(needClose1);
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 267)				if ((needClose == false)) {
HXLINE( 268)					this->handleData();
            				}
            			}
            		}
HXLINE( 273)		if ((needClose == true)) {
HXLINE( 274)			if (::hx::IsPointerNotEq( this->state,::haxe::ws::State_obj::Closed_dyn() )) {
HXLINE( 275)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 276)					::haxe::ws::Log_obj::debug(HX_("Closed",cc,1d,e6,42),this->id);
HXLINE( 277)					this->state = ::haxe::ws::State_obj::Closed_dyn();
HXLINE( 278)					this->_socket->close();
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g2 = _hx_e;
HXLINE( 279)						{
HXLINE( 279)							null();
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 281)				if (::hx::IsNotNull( this->onclose )) {
HXLINE( 282)					this->onclose();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocketCommon_obj,process,(void))

void WebSocketCommon_obj::sendHttpRequest( ::haxe::ws::HttpRequest httpRequest){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_288_sendHttpRequest)
HXLINE( 289)		::String data = httpRequest->build();
HXLINE( 291)		::haxe::ws::Log_obj::data(data,this->id);
HXLINE( 293)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 294)			this->_socket->output->write(::haxe::io::Bytes_obj::ofString(data,null()));
HXLINE( 295)			this->_socket->output->flush();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 296)				{
HXLINE( 296)					null();
            				}
HXLINE( 297)				if (::hx::IsNotNull( this->onerror )) {
HXLINE( 298)					 ::Dynamic _hx_tmp = this->onerror;
HXDLIN( 298)					_hx_tmp(::Std_obj::string(_g));
            				}
HXLINE( 300)				this->close();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocketCommon_obj,sendHttpRequest,(void))

void WebSocketCommon_obj::sendHttpResponse( ::haxe::ws::HttpResponse httpResponse){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_304_sendHttpResponse)
HXLINE( 305)		::String data = httpResponse->build();
HXLINE( 307)		::haxe::ws::Log_obj::data(data,this->id);
HXLINE( 309)		this->_socket->output->write(::haxe::io::Bytes_obj::ofString(data,null()));
HXLINE( 310)		this->_socket->output->flush();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocketCommon_obj,sendHttpResponse,(void))

 ::haxe::ws::HttpRequest WebSocketCommon_obj::recvHttpRequest(){
            	HX_GC_STACKFRAME(&_hx_pos_eddff4a08d3899e6_313_recvHttpRequest)
HXLINE( 314)		::Array< ::String > response = this->_buffer->readLinesUntil(HX_("\r\n\r\n",fa,67,9f,08));
HXLINE( 316)		if (::hx::IsNull( response )) {
HXLINE( 317)			return null();
            		}
HXLINE( 320)		 ::haxe::ws::HttpRequest httpRequest =  ::haxe::ws::HttpRequest_obj::__alloc( HX_CTX );
HXLINE( 321)		{
HXLINE( 321)			int _g = 0;
HXDLIN( 321)			while((_g < response->length)){
HXLINE( 321)				::String line = response->__get(_g);
HXDLIN( 321)				_g = (_g + 1);
HXLINE( 322)				bool _hx_tmp;
HXDLIN( 322)				if (::hx::IsNotNull( line )) {
HXLINE( 322)					_hx_tmp = (line == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 322)					_hx_tmp = true;
            				}
HXDLIN( 322)				if (_hx_tmp) {
HXLINE( 323)					goto _hx_goto_11;
            				}
HXLINE( 325)				httpRequest->addLine(line);
            			}
            			_hx_goto_11:;
            		}
HXLINE( 328)		::String _hx_tmp1 = httpRequest->toString();
HXDLIN( 328)		::haxe::ws::Log_obj::data(_hx_tmp1,this->id);
HXLINE( 330)		return httpRequest;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocketCommon_obj,recvHttpRequest,return )

 ::haxe::ws::HttpResponse WebSocketCommon_obj::recvHttpResponse(){
            	HX_GC_STACKFRAME(&_hx_pos_eddff4a08d3899e6_333_recvHttpResponse)
HXLINE( 334)		::Array< ::String > response = this->_buffer->readLinesUntil(HX_("\r\n\r\n",fa,67,9f,08));
HXLINE( 336)		if (::hx::IsNull( response )) {
HXLINE( 337)			return null();
            		}
HXLINE( 340)		 ::haxe::ws::HttpResponse httpResponse =  ::haxe::ws::HttpResponse_obj::__alloc( HX_CTX );
HXLINE( 341)		{
HXLINE( 341)			int _g = 0;
HXDLIN( 341)			while((_g < response->length)){
HXLINE( 341)				::String line = response->__get(_g);
HXDLIN( 341)				_g = (_g + 1);
HXLINE( 342)				bool _hx_tmp;
HXDLIN( 342)				if (::hx::IsNotNull( line )) {
HXLINE( 342)					_hx_tmp = (line == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 342)					_hx_tmp = true;
            				}
HXDLIN( 342)				if (_hx_tmp) {
HXLINE( 343)					goto _hx_goto_13;
            				}
HXLINE( 345)				httpResponse->addLine(line);
            			}
            			_hx_goto_13:;
            		}
HXLINE( 349)		::String _hx_tmp1 = httpResponse->toString();
HXDLIN( 349)		::haxe::ws::Log_obj::data(_hx_tmp1,this->id);
HXLINE( 351)		return httpResponse;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebSocketCommon_obj,recvHttpResponse,return )

::String WebSocketCommon_obj::makeWSKeyResponse(::String key){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_355_makeWSKeyResponse)
HXDLIN( 355)		return ::haxe::crypto::Base64_obj::encode(::haxe::crypto::Sha1_obj::make(::haxe::io::Bytes_obj::ofString((key + HX_("258EAFA5-E914-47DA-95CA-C5AB0DC85B11",21,20,50,02)),null())),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebSocketCommon_obj,makeWSKeyResponse,return )

 ::haxe::io::Bytes WebSocketCommon_obj::generateMask(){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_197_generateMask)
HXLINE( 198)		 ::haxe::io::Bytes maskData = ::haxe::io::Bytes_obj::alloc(4);
HXLINE( 199)		{
HXLINE( 199)			int v = ::Std_obj::random(256);
HXDLIN( 199)			maskData->b[0] = ( (unsigned char)(v) );
            		}
HXLINE( 200)		{
HXLINE( 200)			int v1 = ::Std_obj::random(256);
HXDLIN( 200)			maskData->b[1] = ( (unsigned char)(v1) );
            		}
HXLINE( 201)		{
HXLINE( 201)			int v2 = ::Std_obj::random(256);
HXDLIN( 201)			maskData->b[2] = ( (unsigned char)(v2) );
            		}
HXLINE( 202)		{
HXLINE( 202)			int v3 = ::Std_obj::random(256);
HXDLIN( 202)			maskData->b[3] = ( (unsigned char)(v3) );
            		}
HXLINE( 203)		return maskData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(WebSocketCommon_obj,generateMask,return )

 ::haxe::io::Bytes WebSocketCommon_obj::applyMask( ::haxe::io::Bytes payload, ::haxe::io::Bytes mask){
            	HX_STACKFRAME(&_hx_pos_eddff4a08d3899e6_206_applyMask)
HXLINE( 207)		 ::haxe::io::Bytes maskedPayload = ::haxe::io::Bytes_obj::alloc(payload->length);
HXLINE( 208)		{
HXLINE( 208)			int _g = 0;
HXDLIN( 208)			int _g1 = payload->length;
HXDLIN( 208)			while((_g < _g1)){
HXLINE( 208)				_g = (_g + 1);
HXDLIN( 208)				int n = (_g - 1);
HXDLIN( 208)				maskedPayload->b[n] = ( (unsigned char)((( (int)(payload->b->__get(n)) ) ^ ( (int)(mask->b->__get(::hx::Mod(n,mask->length))) ))) );
            			}
            		}
HXLINE( 209)		return maskedPayload;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(WebSocketCommon_obj,applyMask,return )


::hx::ObjectPtr< WebSocketCommon_obj > WebSocketCommon_obj::__new( ::sys::net::Socket socket) {
	::hx::ObjectPtr< WebSocketCommon_obj > __this = new WebSocketCommon_obj();
	__this->__construct(socket);
	return __this;
}

::hx::ObjectPtr< WebSocketCommon_obj > WebSocketCommon_obj::__alloc(::hx::Ctx *_hx_ctx, ::sys::net::Socket socket) {
	WebSocketCommon_obj *__this = (WebSocketCommon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WebSocketCommon_obj), true, "haxe.ws.WebSocketCommon"));
	*(void **)__this = WebSocketCommon_obj::_hx_vtable;
	__this->__construct(socket);
	return __this;
}

WebSocketCommon_obj::WebSocketCommon_obj()
{
}

void WebSocketCommon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WebSocketCommon);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(isClient,"isClient");
	HX_MARK_MEMBER_NAME(_socket,"_socket");
	HX_MARK_MEMBER_NAME(_onopenCalled,"_onopenCalled");
	HX_MARK_MEMBER_NAME(_lastError,"_lastError");
	HX_MARK_MEMBER_NAME(onopen,"onopen");
	HX_MARK_MEMBER_NAME(onclose,"onclose");
	HX_MARK_MEMBER_NAME(onerror,"onerror");
	HX_MARK_MEMBER_NAME(onmessage,"onmessage");
	HX_MARK_MEMBER_NAME(_buffer,"_buffer");
	HX_MARK_MEMBER_NAME(_isFinal,"_isFinal");
	HX_MARK_MEMBER_NAME(_isMasked,"_isMasked");
	HX_MARK_MEMBER_NAME(_opcode,"_opcode");
	HX_MARK_MEMBER_NAME(_frameIsBinary,"_frameIsBinary");
	HX_MARK_MEMBER_NAME(_partialLength,"_partialLength");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(_mask,"_mask");
	HX_MARK_MEMBER_NAME(_payload,"_payload");
	HX_MARK_MEMBER_NAME(_lastPong,"_lastPong");
	HX_MARK_END_CLASS();
}

void WebSocketCommon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(isClient,"isClient");
	HX_VISIT_MEMBER_NAME(_socket,"_socket");
	HX_VISIT_MEMBER_NAME(_onopenCalled,"_onopenCalled");
	HX_VISIT_MEMBER_NAME(_lastError,"_lastError");
	HX_VISIT_MEMBER_NAME(onopen,"onopen");
	HX_VISIT_MEMBER_NAME(onclose,"onclose");
	HX_VISIT_MEMBER_NAME(onerror,"onerror");
	HX_VISIT_MEMBER_NAME(onmessage,"onmessage");
	HX_VISIT_MEMBER_NAME(_buffer,"_buffer");
	HX_VISIT_MEMBER_NAME(_isFinal,"_isFinal");
	HX_VISIT_MEMBER_NAME(_isMasked,"_isMasked");
	HX_VISIT_MEMBER_NAME(_opcode,"_opcode");
	HX_VISIT_MEMBER_NAME(_frameIsBinary,"_frameIsBinary");
	HX_VISIT_MEMBER_NAME(_partialLength,"_partialLength");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(_mask,"_mask");
	HX_VISIT_MEMBER_NAME(_payload,"_payload");
	HX_VISIT_MEMBER_NAME(_lastPong,"_lastPong");
}

::hx::Val WebSocketCommon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"send") ) { return ::hx::Val( send_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"_mask") ) { return ::hx::Val( _mask ); }
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onopen") ) { return ::hx::Val( onopen ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_socket") ) { return ::hx::Val( _socket ); }
		if (HX_FIELD_EQ(inName,"onclose") ) { return ::hx::Val( onclose ); }
		if (HX_FIELD_EQ(inName,"onerror") ) { return ::hx::Val( onerror ); }
		if (HX_FIELD_EQ(inName,"_buffer") ) { return ::hx::Val( _buffer ); }
		if (HX_FIELD_EQ(inName,"_opcode") ) { return ::hx::Val( _opcode ); }
		if (HX_FIELD_EQ(inName,"_length") ) { return ::hx::Val( _length ); }
		if (HX_FIELD_EQ(inName,"process") ) { return ::hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isClient") ) { return ::hx::Val( isClient ); }
		if (HX_FIELD_EQ(inName,"_isFinal") ) { return ::hx::Val( _isFinal ); }
		if (HX_FIELD_EQ(inName,"_payload") ) { return ::hx::Val( _payload ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onmessage") ) { return ::hx::Val( onmessage ); }
		if (HX_FIELD_EQ(inName,"sendFrame") ) { return ::hx::Val( sendFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"_isMasked") ) { return ::hx::Val( _isMasked ); }
		if (HX_FIELD_EQ(inName,"_lastPong") ) { return ::hx::Val( _lastPong ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_lastError") ) { return ::hx::Val( _lastError ); }
		if (HX_FIELD_EQ(inName,"handleData") ) { return ::hx::Val( handleData_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return ::hx::Val( writeBytes_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"prepareFrame") ) { return ::hx::Val( prepareFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_onopenCalled") ) { return ::hx::Val( _onopenCalled ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_frameIsBinary") ) { return ::hx::Val( _frameIsBinary ); }
		if (HX_FIELD_EQ(inName,"_partialLength") ) { return ::hx::Val( _partialLength ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sendHttpRequest") ) { return ::hx::Val( sendHttpRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"recvHttpRequest") ) { return ::hx::Val( recvHttpRequest_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sendHttpResponse") ) { return ::hx::Val( sendHttpResponse_dyn() ); }
		if (HX_FIELD_EQ(inName,"recvHttpResponse") ) { return ::hx::Val( recvHttpResponse_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"makeWSKeyResponse") ) { return ::hx::Val( makeWSKeyResponse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WebSocketCommon_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"applyMask") ) { outValue = applyMask_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"generateMask") ) { outValue = generateMask_dyn(); return true; }
	}
	return false;
}

::hx::Val WebSocketCommon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::haxe::ws::State >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mask") ) { _mask=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onopen") ) { onopen=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_socket") ) { _socket=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onclose") ) { onclose=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onerror") ) { onerror=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_buffer") ) { _buffer=inValue.Cast<  ::haxe::ws::Buffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_opcode") ) { _opcode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isClient") ) { isClient=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_isFinal") ) { _isFinal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_payload") ) { _payload=inValue.Cast<  ::haxe::ws::Buffer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onmessage") ) { onmessage=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_isMasked") ) { _isMasked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastPong") ) { _lastPong=inValue.Cast<  ::Date >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_lastError") ) { _lastError=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_onopenCalled") ) { _onopenCalled=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_frameIsBinary") ) { _frameIsBinary=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_partialLength") ) { _partialLength=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WebSocketCommon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("isClient",d5,65,b9,62));
	outFields->push(HX_("_socket",52,9d,bd,94));
	outFields->push(HX_("_onopenCalled",a5,f0,85,c8));
	outFields->push(HX_("_lastError",53,75,79,1b));
	outFields->push(HX_("_buffer",9f,ce,0b,3f));
	outFields->push(HX_("_isFinal",ad,5c,d8,d6));
	outFields->push(HX_("_isMasked",34,3f,19,5b));
	outFields->push(HX_("_opcode",6d,c8,b9,8e));
	outFields->push(HX_("_frameIsBinary",19,f1,a3,5c));
	outFields->push(HX_("_partialLength",88,e7,a6,c0));
	outFields->push(HX_("_length",85,a6,7e,0d));
	outFields->push(HX_("_mask",cb,5c,67,fb));
	outFields->push(HX_("_payload",0f,19,ee,26));
	outFields->push(HX_("_lastPong",cd,90,3b,25));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WebSocketCommon_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(WebSocketCommon_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /*  ::haxe::ws::State */ ,(int)offsetof(WebSocketCommon_obj,state),HX_("state",11,76,0b,84)},
	{::hx::fsBool,(int)offsetof(WebSocketCommon_obj,isClient),HX_("isClient",d5,65,b9,62)},
	{::hx::fsObject /*  ::sys::net::Socket */ ,(int)offsetof(WebSocketCommon_obj,_socket),HX_("_socket",52,9d,bd,94)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WebSocketCommon_obj,_onopenCalled),HX_("_onopenCalled",a5,f0,85,c8)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WebSocketCommon_obj,_lastError),HX_("_lastError",53,75,79,1b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WebSocketCommon_obj,onopen),HX_("onopen",69,e0,64,01)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WebSocketCommon_obj,onclose),HX_("onclose",39,46,73,4b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WebSocketCommon_obj,onerror),HX_("onerror",49,fa,39,76)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WebSocketCommon_obj,onmessage),HX_("onmessage",88,c6,6a,a4)},
	{::hx::fsObject /*  ::haxe::ws::Buffer */ ,(int)offsetof(WebSocketCommon_obj,_buffer),HX_("_buffer",9f,ce,0b,3f)},
	{::hx::fsBool,(int)offsetof(WebSocketCommon_obj,_isFinal),HX_("_isFinal",ad,5c,d8,d6)},
	{::hx::fsBool,(int)offsetof(WebSocketCommon_obj,_isMasked),HX_("_isMasked",34,3f,19,5b)},
	{::hx::fsInt,(int)offsetof(WebSocketCommon_obj,_opcode),HX_("_opcode",6d,c8,b9,8e)},
	{::hx::fsBool,(int)offsetof(WebSocketCommon_obj,_frameIsBinary),HX_("_frameIsBinary",19,f1,a3,5c)},
	{::hx::fsInt,(int)offsetof(WebSocketCommon_obj,_partialLength),HX_("_partialLength",88,e7,a6,c0)},
	{::hx::fsInt,(int)offsetof(WebSocketCommon_obj,_length),HX_("_length",85,a6,7e,0d)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(WebSocketCommon_obj,_mask),HX_("_mask",cb,5c,67,fb)},
	{::hx::fsObject /*  ::haxe::ws::Buffer */ ,(int)offsetof(WebSocketCommon_obj,_payload),HX_("_payload",0f,19,ee,26)},
	{::hx::fsObject /*  ::Date */ ,(int)offsetof(WebSocketCommon_obj,_lastPong),HX_("_lastPong",cd,90,3b,25)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WebSocketCommon_obj_sStaticStorageInfo = 0;
#endif

static ::String WebSocketCommon_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("state",11,76,0b,84),
	HX_("isClient",d5,65,b9,62),
	HX_("_socket",52,9d,bd,94),
	HX_("_onopenCalled",a5,f0,85,c8),
	HX_("_lastError",53,75,79,1b),
	HX_("onopen",69,e0,64,01),
	HX_("onclose",39,46,73,4b),
	HX_("onerror",49,fa,39,76),
	HX_("onmessage",88,c6,6a,a4),
	HX_("_buffer",9f,ce,0b,3f),
	HX_("send",48,8d,50,4c),
	HX_("sendFrame",c5,35,f3,c6),
	HX_("_isFinal",ad,5c,d8,d6),
	HX_("_isMasked",34,3f,19,5b),
	HX_("_opcode",6d,c8,b9,8e),
	HX_("_frameIsBinary",19,f1,a3,5c),
	HX_("_partialLength",88,e7,a6,c0),
	HX_("_length",85,a6,7e,0d),
	HX_("_mask",cb,5c,67,fb),
	HX_("_payload",0f,19,ee,26),
	HX_("_lastPong",cd,90,3b,25),
	HX_("handleData",f2,f9,08,61),
	HX_("close",b8,17,63,48),
	HX_("writeBytes",0c,03,5a,52),
	HX_("prepareFrame",26,6d,33,7a),
	HX_("process",6f,a2,4a,f1),
	HX_("sendHttpRequest",3f,6c,7f,70),
	HX_("sendHttpResponse",91,73,4d,f1),
	HX_("recvHttpRequest",21,1d,b4,7b),
	HX_("recvHttpResponse",6f,88,33,b4),
	HX_("makeWSKeyResponse",d6,9d,7c,22),
	::String(null()) };

::hx::Class WebSocketCommon_obj::__mClass;

static ::String WebSocketCommon_obj_sStaticFields[] = {
	HX_("generateMask",c1,0a,2a,1b),
	HX_("applyMask",7a,41,25,32),
	::String(null())
};

void WebSocketCommon_obj::__register()
{
	WebSocketCommon_obj _hx_dummy;
	WebSocketCommon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ws.WebSocketCommon",c8,66,82,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WebSocketCommon_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(WebSocketCommon_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WebSocketCommon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WebSocketCommon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WebSocketCommon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WebSocketCommon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ws
