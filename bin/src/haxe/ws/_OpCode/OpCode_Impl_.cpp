// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ws__OpCode_OpCode_Impl_
#include <haxe/ws/_OpCode/OpCode_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_12_toInt,"haxe.ws._OpCode.OpCode_Impl_","toInt",0x66a66fdf,"haxe.ws._OpCode.OpCode_Impl_.toInt","haxe/ws/OpCode.hx",12,0x19cf2446)
HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_4_boot,"haxe.ws._OpCode.OpCode_Impl_","boot",0xa7a5f0e7,"haxe.ws._OpCode.OpCode_Impl_.boot","haxe/ws/OpCode.hx",4,0x19cf2446)
HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_5_boot,"haxe.ws._OpCode.OpCode_Impl_","boot",0xa7a5f0e7,"haxe.ws._OpCode.OpCode_Impl_.boot","haxe/ws/OpCode.hx",5,0x19cf2446)
HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_6_boot,"haxe.ws._OpCode.OpCode_Impl_","boot",0xa7a5f0e7,"haxe.ws._OpCode.OpCode_Impl_.boot","haxe/ws/OpCode.hx",6,0x19cf2446)
HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_7_boot,"haxe.ws._OpCode.OpCode_Impl_","boot",0xa7a5f0e7,"haxe.ws._OpCode.OpCode_Impl_.boot","haxe/ws/OpCode.hx",7,0x19cf2446)
HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_8_boot,"haxe.ws._OpCode.OpCode_Impl_","boot",0xa7a5f0e7,"haxe.ws._OpCode.OpCode_Impl_.boot","haxe/ws/OpCode.hx",8,0x19cf2446)
HX_LOCAL_STACK_FRAME(_hx_pos_a58d795a13d05329_9_boot,"haxe.ws._OpCode.OpCode_Impl_","boot",0xa7a5f0e7,"haxe.ws._OpCode.OpCode_Impl_.boot","haxe/ws/OpCode.hx",9,0x19cf2446)
namespace haxe{
namespace ws{
namespace _OpCode{

void OpCode_Impl__obj::__construct() { }

Dynamic OpCode_Impl__obj::__CreateEmpty() { return new OpCode_Impl__obj; }

void *OpCode_Impl__obj::_hx_vtable = 0;

Dynamic OpCode_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OpCode_Impl__obj > _hx_result = new OpCode_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OpCode_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2163cf89;
}

int OpCode_Impl__obj::Continuation;

int OpCode_Impl__obj::Text;

int OpCode_Impl__obj::Binary;

int OpCode_Impl__obj::Close;

int OpCode_Impl__obj::Ping;

int OpCode_Impl__obj::Pong;

int OpCode_Impl__obj::toInt(int this1){
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_12_toInt)
HXDLIN(  12)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OpCode_Impl__obj,toInt,return )


OpCode_Impl__obj::OpCode_Impl__obj()
{
}

bool OpCode_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OpCode_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo OpCode_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &OpCode_Impl__obj::Continuation,HX_("Continuation",d7,67,73,8d)},
	{::hx::fsInt,(void *) &OpCode_Impl__obj::Text,HX_("Text",cd,f8,d2,37)},
	{::hx::fsInt,(void *) &OpCode_Impl__obj::Binary,HX_("Binary",21,30,a0,21)},
	{::hx::fsInt,(void *) &OpCode_Impl__obj::Close,HX_("Close",98,87,90,db)},
	{::hx::fsInt,(void *) &OpCode_Impl__obj::Ping,HX_("Ping",92,1e,31,35)},
	{::hx::fsInt,(void *) &OpCode_Impl__obj::Pong,HX_("Pong",18,ac,35,35)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void OpCode_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OpCode_Impl__obj::Continuation,"Continuation");
	HX_MARK_MEMBER_NAME(OpCode_Impl__obj::Text,"Text");
	HX_MARK_MEMBER_NAME(OpCode_Impl__obj::Binary,"Binary");
	HX_MARK_MEMBER_NAME(OpCode_Impl__obj::Close,"Close");
	HX_MARK_MEMBER_NAME(OpCode_Impl__obj::Ping,"Ping");
	HX_MARK_MEMBER_NAME(OpCode_Impl__obj::Pong,"Pong");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OpCode_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OpCode_Impl__obj::Continuation,"Continuation");
	HX_VISIT_MEMBER_NAME(OpCode_Impl__obj::Text,"Text");
	HX_VISIT_MEMBER_NAME(OpCode_Impl__obj::Binary,"Binary");
	HX_VISIT_MEMBER_NAME(OpCode_Impl__obj::Close,"Close");
	HX_VISIT_MEMBER_NAME(OpCode_Impl__obj::Ping,"Ping");
	HX_VISIT_MEMBER_NAME(OpCode_Impl__obj::Pong,"Pong");
};

#endif

::hx::Class OpCode_Impl__obj::__mClass;

static ::String OpCode_Impl__obj_sStaticFields[] = {
	HX_("Continuation",d7,67,73,8d),
	HX_("Text",cd,f8,d2,37),
	HX_("Binary",21,30,a0,21),
	HX_("Close",98,87,90,db),
	HX_("Ping",92,1e,31,35),
	HX_("Pong",18,ac,35,35),
	HX_("toInt",34,be,11,14),
	::String(null())
};

void OpCode_Impl__obj::__register()
{
	OpCode_Impl__obj _hx_dummy;
	OpCode_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ws._OpCode.OpCode_Impl_",d9,2f,6b,5b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OpCode_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OpCode_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OpCode_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< OpCode_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OpCode_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpCode_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpCode_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OpCode_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_4_boot)
HXDLIN(   4)		Continuation = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_5_boot)
HXDLIN(   5)		Text = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_6_boot)
HXDLIN(   6)		Binary = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_7_boot)
HXDLIN(   7)		Close = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_8_boot)
HXDLIN(   8)		Ping = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a58d795a13d05329_9_boot)
HXDLIN(   9)		Pong = 10;
            	}
}

} // end namespace haxe
} // end namespace ws
} // end namespace _OpCode
