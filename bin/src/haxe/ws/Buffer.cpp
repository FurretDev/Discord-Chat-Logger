// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_ws_Buffer
#include <haxe/ws/Buffer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_86802297f851de32_5_new,"haxe.ws.Buffer","new",0xd10da2dc,"haxe.ws.Buffer.new","haxe/ws/Buffer.hx",5,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_15_writeByte,"haxe.ws.Buffer","writeByte",0xab1feb03,"haxe.ws.Buffer.writeByte","haxe/ws/Buffer.hx",15,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_21_writeShort,"haxe.ws.Buffer","writeShort",0xcf5d3421,"haxe.ws.Buffer.writeShort","haxe/ws/Buffer.hx",21,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_28_writeInt,"haxe.ws.Buffer","writeInt",0x9a9e1954,"haxe.ws.Buffer.writeInt","haxe/ws/Buffer.hx",28,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_37_writeBytes,"haxe.ws.Buffer","writeBytes",0x10cdb810,"haxe.ws.Buffer.writeBytes","haxe/ws/Buffer.hx",37,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_44_readAllAvailableBytes,"haxe.ws.Buffer","readAllAvailableBytes",0xe8e46029,"haxe.ws.Buffer.readAllAvailableBytes","haxe/ws/Buffer.hx",44,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_47_readLine,"haxe.ws.Buffer","readLine",0xe6589e6e,"haxe.ws.Buffer.readLine","haxe/ws/Buffer.hx",47,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_55_readLinesUntil,"haxe.ws.Buffer","readLinesUntil",0x8b03cc19,"haxe.ws.Buffer.readLinesUntil","haxe/ws/Buffer.hx",55,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_64_readUntil,"haxe.ws.Buffer","readUntil",0xd91fdce4,"haxe.ws.Buffer.readUntil","haxe/ws/Buffer.hx",64,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_86_readBytes,"haxe.ws.Buffer","readBytes",0xefc82cb1,"haxe.ws.Buffer.readBytes","haxe/ws/Buffer.hx",86,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_93_readUnsignedShort,"haxe.ws.Buffer","readUnsignedShort",0x4c71d58d,"haxe.ws.Buffer.readUnsignedShort","haxe/ws/Buffer.hx",93,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_99_readUnsignedInt,"haxe.ws.Buffer","readUnsignedInt",0x37b947c0,"haxe.ws.Buffer.readUnsignedInt","haxe/ws/Buffer.hx",99,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_107_readByte,"haxe.ws.Buffer","readByte",0xdfc8a582,"haxe.ws.Buffer.readByte","haxe/ws/Buffer.hx",107,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_118_peekByte,"haxe.ws.Buffer","peekByte",0x0e9f4247,"haxe.ws.Buffer.peekByte","haxe/ws/Buffer.hx",118,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_134_peekUntil,"haxe.ws.Buffer","peekUntil",0xa6126c7f,"haxe.ws.Buffer.peekUntil","haxe/ws/Buffer.hx",134,0x33c06174)
HX_LOCAL_STACK_FRAME(_hx_pos_86802297f851de32_156_endsWith,"haxe.ws.Buffer","endsWith",0x52642662,"haxe.ws.Buffer.endsWith","haxe/ws/Buffer.hx",156,0x33c06174)
namespace haxe{
namespace ws{

void Buffer_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_5_new)
HXLINE(  10)		this->chunks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(   9)		this->currentData = null();
HXLINE(   8)		this->currentOffset = 0;
HXLINE(   7)		this->length = 0;
HXLINE(   6)		this->available = 0;
            	}

Dynamic Buffer_obj::__CreateEmpty() { return new Buffer_obj; }

void *Buffer_obj::_hx_vtable = 0;

Dynamic Buffer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Buffer_obj > _hx_result = new Buffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Buffer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7bcd1196;
}

void Buffer_obj::writeByte(int v){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_15_writeByte)
HXLINE(  16)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(1);
HXLINE(  17)		b->b[0] = ( (unsigned char)(v) );
HXLINE(  18)		this->writeBytes(b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,writeByte,(void))

void Buffer_obj::writeShort(int v){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_21_writeShort)
HXLINE(  22)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(2);
HXLINE(  23)		b->b[0] = ( (unsigned char)(((v >> 8) & 255)) );
HXLINE(  24)		b->b[1] = ( (unsigned char)((v & 255)) );
HXLINE(  25)		this->writeBytes(b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,writeShort,(void))

void Buffer_obj::writeInt(int v){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_28_writeInt)
HXLINE(  29)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(4);
HXLINE(  30)		b->b[0] = ( (unsigned char)(((v >> 24) & 255)) );
HXLINE(  31)		b->b[1] = ( (unsigned char)(((v >> 16) & 255)) );
HXLINE(  32)		b->b[2] = ( (unsigned char)(((v >> 8) & 255)) );
HXLINE(  33)		b->b[3] = ( (unsigned char)((v & 255)) );
HXLINE(  34)		this->writeBytes(b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,writeInt,(void))

void Buffer_obj::writeBytes( ::haxe::io::Bytes data){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_37_writeBytes)
HXLINE(  38)		this->chunks->push(data);
HXLINE(  39)		this->available = (this->available + data->length);
HXLINE(  40)		this->length = this->available;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,writeBytes,(void))

 ::haxe::io::Bytes Buffer_obj::readAllAvailableBytes(){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_44_readAllAvailableBytes)
HXDLIN(  44)		return this->readBytes(this->available);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_obj,readAllAvailableBytes,return )

::String Buffer_obj::readLine(){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_47_readLine)
HXLINE(  48)		 ::haxe::io::Bytes bytes = this->readUntil(HX_("\n",0a,00,00,00));
HXLINE(  49)		if (::hx::IsNull( bytes )) {
HXLINE(  50)			return null();
            		}
HXLINE(  52)		return ::StringTools_obj::trim(bytes->toString());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_obj,readLine,return )

::Array< ::String > Buffer_obj::readLinesUntil(::String delimiter){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_55_readLinesUntil)
HXLINE(  56)		 ::haxe::io::Bytes bytes = this->readUntil(delimiter);
HXLINE(  57)		if (::hx::IsNull( bytes )) {
HXLINE(  58)			return null();
            		}
HXLINE(  60)		return ::StringTools_obj::trim(bytes->toString()).split(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,readLinesUntil,return )

 ::haxe::io::Bytes Buffer_obj::readUntil(::String delimiter){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_64_readUntil)
HXLINE(  65)		int dl = delimiter.length;
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			int _g1 = (this->available - dl);
HXDLIN(  67)			while((_g < _g1)){
HXLINE(  67)				_g = (_g + 1);
HXDLIN(  67)				int i = (_g - 1);
HXLINE(  68)				bool matched = true;
HXLINE(  69)				{
HXLINE(  69)					int _g2 = 0;
HXDLIN(  69)					while((_g2 < dl)){
HXLINE(  69)						_g2 = (_g2 + 1);
HXDLIN(  69)						int j = (_g2 - 1);
HXLINE(  70)						int _hx_tmp = this->peekByte((((this->currentOffset + i) + j) + 1));
HXDLIN(  70)						if (::hx::IsEq( _hx_tmp,delimiter.charCodeAt(j) )) {
HXLINE(  71)							continue;
            						}
HXLINE(  73)						matched = false;
HXLINE(  74)						goto _hx_goto_9;
            					}
            					_hx_goto_9:;
            				}
HXLINE(  77)				if (matched) {
HXLINE(  79)					return this->readBytes(((i + dl) + 1));
            				}
            			}
            		}
HXLINE(  83)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,readUntil,return )

 ::haxe::io::Bytes Buffer_obj::readBytes(int count){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_86_readBytes)
HXLINE(  87)		int count2 = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(count) ),( (Float)(this->available) )));
HXLINE(  88)		 ::haxe::io::Bytes out = ::haxe::io::Bytes_obj::alloc(count2);
HXLINE(  89)		{
HXLINE(  89)			int _g = 0;
HXDLIN(  89)			while((_g < count2)){
HXLINE(  89)				_g = (_g + 1);
HXDLIN(  89)				{
HXLINE(  89)					int v = this->readByte();
HXDLIN(  89)					out->b[(_g - 1)] = ( (unsigned char)(v) );
            				}
            			}
            		}
HXLINE(  90)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,readBytes,return )

int Buffer_obj::readUnsignedShort(){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_93_readUnsignedShort)
HXLINE(  94)		int h = this->readByte();
HXLINE(  96)		return ((h << 8) | this->readByte());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_obj,readUnsignedShort,return )

int Buffer_obj::readUnsignedInt(){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_99_readUnsignedInt)
HXLINE( 100)		int v3 = this->readByte();
HXLINE( 101)		int v2 = this->readByte();
HXLINE( 102)		int v1 = this->readByte();
HXLINE( 104)		return ((((v3 << 24) | (v2 << 16)) | (v1 << 8)) | this->readByte());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_obj,readUnsignedInt,return )

int Buffer_obj::readByte(){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_107_readByte)
HXLINE( 108)		if ((this->available <= 0)) {
HXLINE( 108)			HX_STACK_DO_THROW(HX_("No bytes available",15,2c,eb,44));
            		}
HXLINE( 109)		while(true){
HXLINE( 109)			bool _hx_tmp;
HXDLIN( 109)			if (::hx::IsNotNull( this->currentData )) {
HXLINE( 109)				_hx_tmp = (this->currentOffset >= this->currentData->length);
            			}
            			else {
HXLINE( 109)				_hx_tmp = true;
            			}
HXDLIN( 109)			if (!(_hx_tmp)) {
HXLINE( 109)				goto _hx_goto_15;
            			}
HXLINE( 110)			this->currentOffset = 0;
HXLINE( 111)			this->currentData = this->chunks->shift().StaticCast<  ::haxe::io::Bytes >();
            		}
            		_hx_goto_15:;
HXLINE( 113)		this->available--;
HXLINE( 114)		this->length = this->available;
HXLINE( 115)		return ( (int)(this->currentData->b->__get(this->currentOffset++)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_obj,readByte,return )

int Buffer_obj::peekByte(int offset){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_118_peekByte)
HXLINE( 119)		if ((this->available <= 0)) {
HXLINE( 119)			HX_STACK_DO_THROW(HX_("No bytes available",15,2c,eb,44));
            		}
HXLINE( 120)		int tempOffset = offset;
HXLINE( 121)		 ::haxe::io::Bytes tempData = this->chunks->__get(0).StaticCast<  ::haxe::io::Bytes >();
HXLINE( 122)		if (::hx::IsNull( tempData )) {
HXLINE( 123)			tempData = this->currentData;
            		}
HXLINE( 125)		int chunkIndex = 0;
HXLINE( 126)		while((tempOffset >= tempData->length)){
HXLINE( 127)			tempOffset = (tempOffset - tempData->length);
HXLINE( 128)			chunkIndex = (chunkIndex + 1);
HXLINE( 129)			tempData = this->chunks->__get(chunkIndex).StaticCast<  ::haxe::io::Bytes >();
            		}
HXLINE( 131)		return ( (int)(tempData->b->__get(tempOffset)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,peekByte,return )

int Buffer_obj::peekUntil(int byte){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_134_peekUntil)
HXLINE( 135)		int tempOffset = this->currentOffset;
HXLINE( 136)		 ::haxe::io::Bytes tempData = this->chunks->__get(0).StaticCast<  ::haxe::io::Bytes >();
HXLINE( 137)		if (::hx::IsNull( tempData )) {
HXLINE( 138)			tempData = this->currentData;
            		}
HXLINE( 140)		int chunkIndex = 0;
HXLINE( 141)		while((tempOffset >= tempData->length)){
HXLINE( 142)			tempOffset = (tempOffset - tempData->length);
HXLINE( 143)			chunkIndex = (chunkIndex + 1);
HXLINE( 144)			tempData = this->chunks->__get(chunkIndex).StaticCast<  ::haxe::io::Bytes >();
            		}
HXLINE( 146)		while((tempOffset < tempData->length)){
HXLINE( 147)			if ((tempData->b->__get(tempOffset) == byte)) {
HXLINE( 148)				return (tempOffset + 1);
            			}
HXLINE( 150)			tempOffset = (tempOffset + 1);
            		}
HXLINE( 153)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,peekUntil,return )

bool Buffer_obj::endsWith(::String e){
            	HX_STACKFRAME(&_hx_pos_86802297f851de32_156_endsWith)
HXLINE( 157)		int i = (this->available - e.length);
HXLINE( 158)		int n = this->currentOffset;
HXLINE( 160)		if ((i <= 0)) {
HXLINE( 161)			return false;
            		}
HXLINE( 164)		while((i < this->available)){
HXLINE( 165)			int _hx_tmp = this->peekByte(i);
HXDLIN( 165)			if (::hx::IsNotEq( _hx_tmp,e.charCodeAt(n) )) {
HXLINE( 166)				return false;
            			}
HXLINE( 168)			i = (i + 1);
HXLINE( 169)			n = (n + 1);
            		}
HXLINE( 172)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_obj,endsWith,return )


::hx::ObjectPtr< Buffer_obj > Buffer_obj::__new() {
	::hx::ObjectPtr< Buffer_obj > __this = new Buffer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Buffer_obj > Buffer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Buffer_obj *__this = (Buffer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Buffer_obj), true, "haxe.ws.Buffer"));
	*(void **)__this = Buffer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Buffer_obj::Buffer_obj()
{
}

void Buffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Buffer);
	HX_MARK_MEMBER_NAME(available,"available");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(currentOffset,"currentOffset");
	HX_MARK_MEMBER_NAME(currentData,"currentData");
	HX_MARK_MEMBER_NAME(chunks,"chunks");
	HX_MARK_END_CLASS();
}

void Buffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(available,"available");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(currentOffset,"currentOffset");
	HX_VISIT_MEMBER_NAME(currentData,"currentData");
	HX_VISIT_MEMBER_NAME(chunks,"chunks");
}

::hx::Val Buffer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"chunks") ) { return ::hx::Val( chunks ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"writeInt") ) { return ::hx::Val( writeInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"readLine") ) { return ::hx::Val( readLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return ::hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"peekByte") ) { return ::hx::Val( peekByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"endsWith") ) { return ::hx::Val( endsWith_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"available") ) { return ::hx::Val( available ); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return ::hx::Val( writeByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUntil") ) { return ::hx::Val( readUntil_dyn() ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return ::hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"peekUntil") ) { return ::hx::Val( peekUntil_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeShort") ) { return ::hx::Val( writeShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return ::hx::Val( writeBytes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentData") ) { return ::hx::Val( currentData ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentOffset") ) { return ::hx::Val( currentOffset ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"readLinesUntil") ) { return ::hx::Val( readLinesUntil_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"readUnsignedInt") ) { return ::hx::Val( readUnsignedInt_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"readUnsignedShort") ) { return ::hx::Val( readUnsignedShort_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"readAllAvailableBytes") ) { return ::hx::Val( readAllAvailableBytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Buffer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chunks") ) { chunks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"available") ) { available=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentData") ) { currentData=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentOffset") ) { currentOffset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Buffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("available",c9,59,83,77));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("currentOffset",ac,18,9c,43));
	outFields->push(HX_("currentData",03,2f,f5,7a));
	outFields->push(HX_("chunks",66,d9,aa,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Buffer_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Buffer_obj,available),HX_("available",c9,59,83,77)},
	{::hx::fsInt,(int)offsetof(Buffer_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsInt,(int)offsetof(Buffer_obj,currentOffset),HX_("currentOffset",ac,18,9c,43)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Buffer_obj,currentData),HX_("currentData",03,2f,f5,7a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Buffer_obj,chunks),HX_("chunks",66,d9,aa,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Buffer_obj_sStaticStorageInfo = 0;
#endif

static ::String Buffer_obj_sMemberFields[] = {
	HX_("available",c9,59,83,77),
	HX_("length",e6,94,07,9f),
	HX_("currentOffset",ac,18,9c,43),
	HX_("currentData",03,2f,f5,7a),
	HX_("chunks",66,d9,aa,c4),
	HX_("writeByte",87,13,d7,49),
	HX_("writeShort",1d,7f,e9,10),
	HX_("writeInt",50,6d,f0,23),
	HX_("writeBytes",0c,03,5a,52),
	HX_("readAllAvailableBytes",ad,3e,f8,48),
	HX_("readLine",6a,f2,aa,6f),
	HX_("readLinesUntil",15,45,77,42),
	HX_("readUntil",68,05,d7,77),
	HX_("readBytes",35,55,7f,8e),
	HX_("readUnsignedShort",11,22,0b,77),
	HX_("readUnsignedInt",44,ab,4f,05),
	HX_("readByte",7e,f9,1a,69),
	HX_("peekByte",43,96,f1,97),
	HX_("peekUntil",03,95,c9,44),
	HX_("endsWith",5e,7a,b6,db),
	::String(null()) };

::hx::Class Buffer_obj::__mClass;

void Buffer_obj::__register()
{
	Buffer_obj _hx_dummy;
	Buffer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ws.Buffer",ea,44,1c,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Buffer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Buffer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Buffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Buffer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ws
