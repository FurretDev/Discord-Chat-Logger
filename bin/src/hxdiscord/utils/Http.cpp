// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_hxdiscord_utils_Http
#include <hxdiscord/utils/Http.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_16_new,"hxdiscord.utils.Http","new",0x0d292609,"hxdiscord.utils.Http.new","hxdiscord/utils/Http.hx",16,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_36_setMethod,"hxdiscord.utils.Http","setMethod",0x57b0e68c,"hxdiscord.utils.Http.setMethod","hxdiscord/utils/Http.hx",36,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_44_addHeader,"hxdiscord.utils.Http","addHeader",0xa3d2b8f7,"hxdiscord.utils.Http.addHeader","hxdiscord/utils/Http.hx",44,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_56_addHeaderByArray,"hxdiscord.utils.Http","addHeaderByArray",0x9e94880b,"hxdiscord.utils.Http.addHeaderByArray","hxdiscord/utils/Http.hx",56,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_65_setPostData,"hxdiscord.utils.Http","setPostData",0x04142715,"hxdiscord.utils.Http.setPostData","hxdiscord/utils/Http.hx",65,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_73_setPostBytes,"hxdiscord.utils.Http","setPostBytes",0x769e0520,"hxdiscord.utils.Http.setPostBytes","hxdiscord/utils/Http.hx",73,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_146_send,"hxdiscord.utils.Http","send",0x7a262b7f,"hxdiscord.utils.Http.send","hxdiscord/utils/Http.hx",146,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_79_send,"hxdiscord.utils.Http","send",0x7a262b7f,"hxdiscord.utils.Http.send","hxdiscord/utils/Http.hx",79,0x5d82f305)
static const ::String _hx_array_data_63316d97_9[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_224_request,"hxdiscord.utils.Http","request",0x3de0bd78,"hxdiscord.utils.Http.request","hxdiscord/utils/Http.hx",224,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_229_request,"hxdiscord.utils.Http","request",0x3de0bd78,"hxdiscord.utils.Http.request","hxdiscord/utils/Http.hx",229,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_165_request,"hxdiscord.utils.Http","request",0x3de0bd78,"hxdiscord.utils.Http.request","hxdiscord/utils/Http.hx",165,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_296_customRequest,"hxdiscord.utils.Http","customRequest",0x2419aa87,"hxdiscord.utils.Http.customRequest","hxdiscord/utils/Http.hx",296,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_302_customRequest,"hxdiscord.utils.Http","customRequest",0x2419aa87,"hxdiscord.utils.Http.customRequest","hxdiscord/utils/Http.hx",302,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_238_customRequest,"hxdiscord.utils.Http","customRequest",0x2419aa87,"hxdiscord.utils.Http.customRequest","hxdiscord/utils/Http.hx",238,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_313___default_onData,"hxdiscord.utils.Http","__default_onData",0xccb8c1be,"hxdiscord.utils.Http.__default_onData","hxdiscord/utils/Http.hx",313,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_317___default_onError,"hxdiscord.utils.Http","__default_onError",0xf39281b4,"hxdiscord.utils.Http.__default_onError","hxdiscord/utils/Http.hx",317,0x5d82f305)
HX_LOCAL_STACK_FRAME(_hx_pos_74c8db2f2f47ff87_321___default_onStatus,"hxdiscord.utils.Http","__default_onStatus",0xe1325fc6,"hxdiscord.utils.Http.__default_onStatus","hxdiscord/utils/Http.hx",321,0x5d82f305)
namespace hxdiscord{
namespace utils{

void Http_obj::__construct(::String url){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_16_new)
HXLINE(  20)		this->postData = null();
HXLINE(  19)		this->headers = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  18)		this->method = HX_("",00,00,00,00);
HXLINE(  17)		this->url = HX_("",00,00,00,00);
HXLINE(  28)		this->url = url;
            	}

Dynamic Http_obj::__CreateEmpty() { return new Http_obj; }

void *Http_obj::_hx_vtable = 0;

Dynamic Http_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Http_obj > _hx_result = new Http_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Http_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f76c1a1;
}

void Http_obj::setMethod(::String method){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_36_setMethod)
HXDLIN(  36)		this->method = method;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,setMethod,(void))

void Http_obj::addHeader(::String val1,::String val2){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_44_addHeader)
HXLINE(  45)		::Array< ::String > array = ::Array_obj< ::String >::__new(0);
HXLINE(  46)		array->push(val1);
HXLINE(  47)		array->push(val2);
HXLINE(  48)		this->headers->push(array);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Http_obj,addHeader,(void))

void Http_obj::addHeaderByArray(::Array< ::String > header){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_56_addHeaderByArray)
HXDLIN(  56)		this->headers->push(header);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,addHeaderByArray,(void))

void Http_obj::setPostData(::String postData){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_65_setPostData)
HXDLIN(  65)		this->postData = postData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,setPostData,(void))

void Http_obj::setPostBytes( ::haxe::io::Bytes postData){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_73_setPostBytes)
HXDLIN(  73)		this->postData = postData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,setPostBytes,(void))

void Http_obj::send(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,data) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_146_send)
HXLINE( 146)			data[0] = error;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_79_send)
HXLINE( 129)		 ::sys::Http req =  ::sys::Http_obj::__alloc( HX_CTX ,this->url);
HXLINE( 130)		{
HXLINE( 130)			int _g = 0;
HXDLIN( 130)			int _g1 = this->headers->get_length();
HXDLIN( 130)			while((_g < _g1)){
HXLINE( 130)				_g = (_g + 1);
HXDLIN( 130)				int i = (_g - 1);
HXLINE( 131)				req->addHeader(( (::String)(this->headers->__get(i)->__GetItem(0)) ),( (::String)(this->headers->__get(i)->__GetItem(1)) ));
            			}
            		}
HXLINE( 133)		 ::haxe::io::BytesOutput responseBytes =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE( 135)		::Array< ::String > data = ::Array_obj< ::String >::fromData( _hx_array_data_63316d97_9,1);
HXLINE( 137)		if (::hx::IsNotNull( this->postData )) {
HXLINE( 138)			if (::Std_obj::isOfType(this->postData,::hx::ClassOf< ::String >())) {
HXLINE( 139)				req->setPostData(( (::String)(this->postData) ));
            			}
            			else {
HXLINE( 140)				if (::Std_obj::isOfType(this->postData,::hx::ClassOf< ::haxe::io::Bytes >())) {
HXLINE( 141)					req->setPostBytes(( ( ::haxe::io::Bytes)(this->postData) ));
            				}
            			}
            		}
HXLINE( 145)		req->onError =  ::Dynamic(new _hx_Closure_0(data));
HXLINE( 149)		req->customRequest(false,responseBytes,null(),this->method);
HXLINE( 150)		 ::haxe::io::Bytes response = responseBytes->getBytes();
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		if (::hx::IsNotNull( data->__get(0) )) {
HXLINE( 151)			_hx_tmp = (data->__get(0) == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 151)			_hx_tmp = true;
            		}
HXDLIN( 151)		if (!(_hx_tmp)) {
HXLINE( 154)			this->onError(data->__get(0));
HXLINE( 155)			::haxe::Log_obj::trace(response,::hx::SourceInfo(HX_("hxdiscord/utils/Http.hx",05,f3,82,5d),155,HX_("hxdiscord.utils.Http",97,6d,31,63),HX_("send",48,8d,50,4c)));
            		}
HXLINE( 157)		 ::Dynamic _hx_tmp1 = this->onData;
HXDLIN( 157)		_hx_tmp1(response->toString());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Http_obj,send,(void))

void Http_obj::request( ::Dynamic post){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxdiscord::utils::Http,_gthis) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_224_request)
HXLINE( 224)			_gthis->onData(data);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hxdiscord::utils::Http,_gthis) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_229_request)
HXLINE( 229)			_gthis->onError(error);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_165_request)
HXDLIN( 165)		 ::hxdiscord::utils::Http _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 208)		 ::sys::Http r =  ::sys::Http_obj::__alloc( HX_CTX ,this->url);
HXLINE( 210)		{
HXLINE( 210)			int _g = 0;
HXDLIN( 210)			int _g1 = this->headers->get_length();
HXDLIN( 210)			while((_g < _g1)){
HXLINE( 210)				_g = (_g + 1);
HXDLIN( 210)				int i = (_g - 1);
HXLINE( 211)				r->addHeader(( (::String)(this->headers->__get(i)->__GetItem(0)) ),( (::String)(this->headers->__get(i)->__GetItem(1)) ));
            			}
            		}
HXLINE( 214)		if (::hx::IsNotNull( this->postData )) {
HXLINE( 215)			if (::Std_obj::isOfType(this->postData,::hx::ClassOf< ::String >())) {
HXLINE( 216)				r->setPostData(( (::String)(this->postData) ));
            			}
            			else {
HXLINE( 217)				if (::Std_obj::isOfType(this->postData,::hx::ClassOf< ::haxe::io::Bytes >())) {
HXLINE( 218)					r->setPostBytes(( ( ::haxe::io::Bytes)(this->postData) ));
            				}
            			}
            		}
HXLINE( 222)		r->onData =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 227)		r->onError =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 232)		r->request(post);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,request,(void))

 ::haxe::io::BytesOutput Http_obj::customRequest( ::Dynamic post, ::haxe::io::BytesOutput output,::String method){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::hxdiscord::utils::Http,_gthis, ::hxdiscord::utils::Http,req) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_296_customRequest)
HXLINE( 297)			_gthis->responseData = req->responseData;
HXLINE( 298)			_gthis->onError(req->responseData);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hxdiscord::utils::Http,_gthis) HXARGC(1)
            		void _hx_run(int c){
            			HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_302_customRequest)
HXLINE( 302)			_gthis->onStatus(c);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_238_customRequest)
HXDLIN( 238)		 ::hxdiscord::utils::Http _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 282)		 ::hxdiscord::utils::Http req =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,this->url);
HXLINE( 284)		{
HXLINE( 284)			int _g = 0;
HXDLIN( 284)			int _g1 = this->headers->get_length();
HXDLIN( 284)			while((_g < _g1)){
HXLINE( 284)				_g = (_g + 1);
HXDLIN( 284)				int i = (_g - 1);
HXLINE( 285)				req->addHeader(( (::String)(this->headers->__get(i)->__GetItem(0)) ),( (::String)(this->headers->__get(i)->__GetItem(1)) ));
            			}
            		}
HXLINE( 288)		if (::hx::IsNotNull( this->postData )) {
HXLINE( 289)			if (::Std_obj::isOfType(this->postData,::hx::ClassOf< ::String >())) {
HXLINE( 290)				req->setPostData(( (::String)(this->postData) ));
            			}
            			else {
HXLINE( 291)				if (::Std_obj::isOfType(this->postData,::hx::ClassOf< ::haxe::io::Bytes >())) {
HXLINE( 292)					req->setPostBytes(( ( ::haxe::io::Bytes)(this->postData) ));
            				}
            			}
            		}
HXLINE( 296)		req->onError =  ::Dynamic(new _hx_Closure_0(_gthis,req));
HXLINE( 301)		req->onStatus =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 305)		req->customRequest(false,output,method);
HXLINE( 306)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Http_obj,customRequest,return )

HX_BEGIN_DEFAULT_FUNC(__default_onData,Http_obj)
void _hx_run(::String d){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_313___default_onData)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onError,Http_obj)
void _hx_run(::String d){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_317___default_onError)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onStatus,Http_obj)
void _hx_run(int d){
            	HX_STACKFRAME(&_hx_pos_74c8db2f2f47ff87_321___default_onStatus)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC


void Http_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,Http_obj *_hx_obj) {
	if (!_hx_obj->onStatus.mPtr) _hx_obj->onStatus = new __default_onStatus(_hx_obj);
	if (!_hx_obj->onError.mPtr) _hx_obj->onError = new __default_onError(_hx_obj);
	if (!_hx_obj->onData.mPtr) _hx_obj->onData = new __default_onData(_hx_obj);
}
::hx::ObjectPtr< Http_obj > Http_obj::__new(::String url) {
	::hx::ObjectPtr< Http_obj > __this = new Http_obj();
	__this->__construct(url);
	return __this;
}

::hx::ObjectPtr< Http_obj > Http_obj::__alloc(::hx::Ctx *_hx_ctx,::String url) {
	Http_obj *__this = (Http_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Http_obj), true, "hxdiscord.utils.Http"));
	*(void **)__this = Http_obj::_hx_vtable;
	hxdiscord::utils::Http_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(url);
	return __this;
}

Http_obj::Http_obj()
{
	onStatus = new __default_onStatus(this);
	onError = new __default_onError(this);
	onData = new __default_onData(this);
}

void Http_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Http);
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(method,"method");
	HX_MARK_MEMBER_NAME(headers,"headers");
	HX_MARK_MEMBER_NAME(postData,"postData");
	HX_MARK_MEMBER_NAME(responseData,"responseData");
	HX_MARK_MEMBER_NAME(response,"response");
	HX_MARK_MEMBER_NAME(onData,"onData");
	HX_MARK_MEMBER_NAME(onError,"onError");
	HX_MARK_MEMBER_NAME(onStatus,"onStatus");
	HX_MARK_END_CLASS();
}

void Http_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(method,"method");
	HX_VISIT_MEMBER_NAME(headers,"headers");
	HX_VISIT_MEMBER_NAME(postData,"postData");
	HX_VISIT_MEMBER_NAME(responseData,"responseData");
	HX_VISIT_MEMBER_NAME(response,"response");
	HX_VISIT_MEMBER_NAME(onData,"onData");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	HX_VISIT_MEMBER_NAME(onStatus,"onStatus");
}

::hx::Val Http_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"send") ) { return ::hx::Val( send_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { return ::hx::Val( method ); }
		if (HX_FIELD_EQ(inName,"onData") ) { return ::hx::Val( onData ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"headers") ) { return ::hx::Val( headers ); }
		if (HX_FIELD_EQ(inName,"request") ) { return ::hx::Val( request_dyn() ); }
		if (HX_FIELD_EQ(inName,"onError") ) { return ::hx::Val( onError ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postData") ) { return ::hx::Val( postData ); }
		if (HX_FIELD_EQ(inName,"response") ) { return ::hx::Val( response ); }
		if (HX_FIELD_EQ(inName,"onStatus") ) { return ::hx::Val( onStatus ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setMethod") ) { return ::hx::Val( setMethod_dyn() ); }
		if (HX_FIELD_EQ(inName,"addHeader") ) { return ::hx::Val( addHeader_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setPostData") ) { return ::hx::Val( setPostData_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseData") ) { return ::hx::Val( responseData ); }
		if (HX_FIELD_EQ(inName,"setPostBytes") ) { return ::hx::Val( setPostBytes_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"customRequest") ) { return ::hx::Val( customRequest_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addHeaderByArray") ) { return ::hx::Val( addHeaderByArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Http_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { method=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onData") ) { onData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"headers") ) { headers=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postData") ) { postData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"response") ) { response=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStatus") ) { onStatus=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseData") ) { responseData=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Http_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("method",e1,f6,5a,09));
	outFields->push(HX_("headers",46,52,08,63));
	outFields->push(HX_("postData",aa,b6,a2,00));
	outFields->push(HX_("responseData",4b,05,e9,c4));
	outFields->push(HX_("response",81,ae,0c,a2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Http_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Http_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsString,(int)offsetof(Http_obj,method),HX_("method",e1,f6,5a,09)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Http_obj,headers),HX_("headers",46,52,08,63)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Http_obj,postData),HX_("postData",aa,b6,a2,00)},
	{::hx::fsString,(int)offsetof(Http_obj,responseData),HX_("responseData",4b,05,e9,c4)},
	{::hx::fsString,(int)offsetof(Http_obj,response),HX_("response",81,ae,0c,a2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Http_obj,onData),HX_("onData",e9,5e,ed,e4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Http_obj,onError),HX_("onError",29,6a,67,09)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Http_obj,onStatus),HX_("onStatus",b1,dd,a8,e5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Http_obj_sStaticStorageInfo = 0;
#endif

static ::String Http_obj_sMemberFields[] = {
	HX_("url",6f,2b,59,00),
	HX_("method",e1,f6,5a,09),
	HX_("headers",46,52,08,63),
	HX_("postData",aa,b6,a2,00),
	HX_("responseData",4b,05,e9,c4),
	HX_("response",81,ae,0c,a2),
	HX_("setMethod",23,6c,02,69),
	HX_("addHeader",8e,3e,24,b5),
	HX_("addHeaderByArray",54,f3,6e,bb),
	HX_("setPostData",6c,80,03,31),
	HX_("setPostBytes",e9,d7,1c,9b),
	HX_("send",48,8d,50,4c),
	HX_("request",4f,df,84,44),
	HX_("customRequest",9e,47,93,ee),
	HX_("onData",e9,5e,ed,e4),
	HX_("onError",29,6a,67,09),
	HX_("onStatus",b1,dd,a8,e5),
	::String(null()) };

::hx::Class Http_obj::__mClass;

void Http_obj::__register()
{
	Http_obj _hx_dummy;
	Http_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.utils.Http",97,6d,31,63);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Http_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Http_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Http_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Http_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace utils
