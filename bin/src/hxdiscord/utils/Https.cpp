// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_utils_Http
#include <hxdiscord/utils/Http.h>
#endif
#ifndef INCLUDED_hxdiscord_utils_Https
#include <hxdiscord/utils/Https.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_33_sendRequest,"hxdiscord.utils.Https","sendRequest",0x4759e675,"hxdiscord.utils.Https.sendRequest","hxdiscord/utils/Https.hx",33,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_38_sendRequest,"hxdiscord.utils.Https","sendRequest",0x4759e675,"hxdiscord.utils.Https.sendRequest","hxdiscord/utils/Https.hx",38,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_13_sendRequest,"hxdiscord.utils.Https","sendRequest",0x4759e675,"hxdiscord.utils.Https.sendRequest","hxdiscord/utils/Https.hx",13,0xa2815a04)
static const ::String _hx_array_data_680e76fc_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_57_sendNormalRequest,"hxdiscord.utils.Https","sendNormalRequest",0x71121f8e,"hxdiscord.utils.Https.sendNormalRequest","hxdiscord/utils/Https.hx",57,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_64_sendNormalRequest,"hxdiscord.utils.Https","sendNormalRequest",0x71121f8e,"hxdiscord.utils.Https.sendNormalRequest","hxdiscord/utils/Https.hx",64,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_49_sendNormalRequest,"hxdiscord.utils.Https","sendNormalRequest",0x71121f8e,"hxdiscord.utils.Https.sendNormalRequest","hxdiscord/utils/Https.hx",49,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_79_sendDeleteRequest,"hxdiscord.utils.Https","sendDeleteRequest",0x36125a0a,"hxdiscord.utils.Https.sendDeleteRequest","hxdiscord/utils/Https.hx",79,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_85_sendDeleteRequest,"hxdiscord.utils.Https","sendDeleteRequest",0x36125a0a,"hxdiscord.utils.Https.sendDeleteRequest","hxdiscord/utils/Https.hx",85,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_71_sendDeleteRequest,"hxdiscord.utils.Https","sendDeleteRequest",0x36125a0a,"hxdiscord.utils.Https.sendDeleteRequest","hxdiscord/utils/Https.hx",71,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_102_sendEmptyPutRequest,"hxdiscord.utils.Https","sendEmptyPutRequest",0xa8fd9a53,"hxdiscord.utils.Https.sendEmptyPutRequest","hxdiscord/utils/Https.hx",102,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_108_sendEmptyPutRequest,"hxdiscord.utils.Https","sendEmptyPutRequest",0xa8fd9a53,"hxdiscord.utils.Https.sendEmptyPutRequest","hxdiscord/utils/Https.hx",108,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_94_sendEmptyPutRequest,"hxdiscord.utils.Https","sendEmptyPutRequest",0xa8fd9a53,"hxdiscord.utils.Https.sendEmptyPutRequest","hxdiscord/utils/Https.hx",94,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_125_sendPutData,"hxdiscord.utils.Https","sendPutData",0xf3b1ffbf,"hxdiscord.utils.Https.sendPutData","hxdiscord/utils/Https.hx",125,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_131_sendPutData,"hxdiscord.utils.Https","sendPutData",0xf3b1ffbf,"hxdiscord.utils.Https.sendPutData","hxdiscord/utils/Https.hx",131,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_117_sendPutData,"hxdiscord.utils.Https","sendPutData",0xf3b1ffbf,"hxdiscord.utils.Https.sendPutData","hxdiscord/utils/Https.hx",117,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_151_sendPostData,"hxdiscord.utils.Https","sendPostData",0x7833f0c4,"hxdiscord.utils.Https.sendPostData","hxdiscord/utils/Https.hx",151,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_158_sendPostData,"hxdiscord.utils.Https","sendPostData",0x7833f0c4,"hxdiscord.utils.Https.sendPostData","hxdiscord/utils/Https.hx",158,0xa2815a04)
HX_LOCAL_STACK_FRAME(_hx_pos_522e832a9096fddb_142_sendPostData,"hxdiscord.utils.Https","sendPostData",0x7833f0c4,"hxdiscord.utils.Https.sendPostData","hxdiscord/utils/Https.hx",142,0xa2815a04)
namespace hxdiscord{
namespace utils{

void Https_obj::__construct() { }

Dynamic Https_obj::__CreateEmpty() { return new Https_obj; }

void *Https_obj::_hx_vtable = 0;

Dynamic Https_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Https_obj > _hx_result = new Https_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Https_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5872abb2;
}

::String Https_obj::sendRequest(::String url,::String version,::String endpoint,::String path,::String token){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,data) HXARGC(1)
            		void _hx_run(::String _data){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_33_sendRequest)
HXLINE(  33)			data[0] = _data;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_38_sendRequest)
HXLINE(  38)			HX_STACK_DO_THROW((HX_("An error has occurred: ",1c,60,a4,c4) + error));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_13_sendRequest)
HXLINE(  14)		 ::hxdiscord::utils::Http discordAuth = null();
HXLINE(  15)		if (::hx::IsNotNull( path )) {
HXLINE(  17)			discordAuth =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,(((url + version) + endpoint) + path));
            		}
            		else {
HXLINE(  21)			discordAuth =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,((url + version) + endpoint));
            		}
HXLINE(  27)		::Array< ::String > data = ::Array_obj< ::String >::fromData( _hx_array_data_680e76fc_3,1);
HXLINE(  29)		discordAuth->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + token));
HXLINE(  31)		discordAuth->onData =  ::Dynamic(new _hx_Closure_0(data));
HXLINE(  36)		discordAuth->onError =  ::Dynamic(new _hx_Closure_1());
HXLINE(  41)		discordAuth->send();
HXLINE(  43)		discordAuth->setMethod(HX_("GET",76,1c,36,00));
HXLINE(  45)		return data->__get(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Https_obj,sendRequest,return )

void Https_obj::sendNormalRequest(::String url,::String token,::String id,::String data){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String _data){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_57_sendNormalRequest)
HXLINE(  57)			if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE(  59)				::haxe::Log_obj::trace(_data,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),59,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendNormalRequest",80,4d,59,9f)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_64_sendNormalRequest)
HXLINE(  64)			HX_STACK_DO_THROW((HX_("An error has occurred: ",1c,60,a4,c4) + error));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_49_sendNormalRequest)
HXLINE(  50)		 ::hxdiscord::utils::Http r =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,((url + HX_("?data=",34,ca,03,05)) + ::StringTools_obj::urlEncode(data)));
HXLINE(  53)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  53)		::String _hx_tmp1 = ((url + HX_("?data=",34,ca,03,05)) + ::StringTools_obj::urlEncode(data));
HXDLIN(  53)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),53,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendNormalRequest",80,4d,59,9f)));
HXLINE(  54)		r->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + token));
HXLINE(  55)		r->onData =  ::Dynamic(new _hx_Closure_0());
HXLINE(  62)		r->onError =  ::Dynamic(new _hx_Closure_1());
HXLINE(  66)		r->setMethod(HX_("GET",76,1c,36,00));
HXLINE(  67)		r->send();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Https_obj,sendNormalRequest,(void))

void Https_obj::sendDeleteRequest(::String url){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String _data){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_79_sendDeleteRequest)
HXLINE(  79)			if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE(  81)				::haxe::Log_obj::trace(_data,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),81,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendDeleteRequest",fc,87,59,64)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,r) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_85_sendDeleteRequest)
HXLINE(  86)			::haxe::Log_obj::trace((HX_("An error has occurred: ",1c,60,a4,c4) + error),::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),86,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendDeleteRequest",fc,87,59,64)));
HXLINE(  87)			::haxe::Log_obj::trace(r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->responseData,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),87,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendDeleteRequest",fc,87,59,64)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_71_sendDeleteRequest)
HXLINE(  72)		::Array< ::Dynamic> r = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  74)		r[0] =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,url);
HXLINE(  75)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->addHeader(HX_("Content-Type",ce,69,5d,3c),HX_("application/json",87,d8,7f,4e));
HXLINE(  76)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + ::hxdiscord::DiscordClient_obj::token));
HXLINE(  77)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->onData =  ::Dynamic(new _hx_Closure_0());
HXLINE(  84)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->onError =  ::Dynamic(new _hx_Closure_1(r));
HXLINE(  89)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->setMethod(HX_("DELETE",2b,6c,5b,1d));
HXLINE(  90)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->send();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Https_obj,sendDeleteRequest,(void))

void Https_obj::sendEmptyPutRequest(::String url){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String _data){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_102_sendEmptyPutRequest)
HXLINE( 102)			if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE( 104)				::haxe::Log_obj::trace(_data,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),104,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendEmptyPutRequest",c5,a8,e1,59)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,r) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_108_sendEmptyPutRequest)
HXLINE( 109)			::haxe::Log_obj::trace((HX_("An error has occurred: ",1c,60,a4,c4) + error),::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),109,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendEmptyPutRequest",c5,a8,e1,59)));
HXLINE( 110)			::haxe::Log_obj::trace(r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->responseData,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),110,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendEmptyPutRequest",c5,a8,e1,59)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_94_sendEmptyPutRequest)
HXLINE(  95)		::Array< ::Dynamic> r = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  97)		r[0] =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,url);
HXLINE(  98)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->addHeader(HX_("Content-Type",ce,69,5d,3c),HX_("application/json",87,d8,7f,4e));
HXLINE(  99)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + ::hxdiscord::DiscordClient_obj::token));
HXLINE( 100)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->onData =  ::Dynamic(new _hx_Closure_0());
HXLINE( 107)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->onError =  ::Dynamic(new _hx_Closure_1(r));
HXLINE( 112)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->setMethod(HX_("PUT",af,fe,3c,00));
HXLINE( 113)		r->__get(0).StaticCast<  ::hxdiscord::utils::Http >()->send();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Https_obj,sendEmptyPutRequest,(void))

void Https_obj::sendPutData(::String url, ::Dynamic data){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxdiscord::utils::Http,req) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_125_sendPutData)
HXLINE( 126)			::haxe::Log_obj::trace((HX_("An error has occurred: ",1c,60,a4,c4) + error),::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),126,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendPutData",31,4c,e9,7a)));
HXLINE( 127)			::haxe::Log_obj::trace(req->responseData,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),127,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendPutData",31,4c,e9,7a)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(int status){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_131_sendPutData)
HXLINE( 131)			::haxe::Log_obj::trace(status,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),131,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendPutData",31,4c,e9,7a)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_117_sendPutData)
HXLINE( 118)		 ::hxdiscord::utils::Http req =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,url);
HXLINE( 119)		 ::haxe::io::BytesOutput responseBytes =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE( 121)		 ::hxdiscord::utils::Http req1 = req;
HXDLIN( 121)		 ::Dynamic replacer = null();
HXDLIN( 121)		::String space = null();
HXDLIN( 121)		req1->setPostData(::haxe::format::JsonPrinter_obj::print(data,replacer,space));
HXLINE( 122)		req->addHeader(HX_("Content-type",ae,3d,84,51),HX_("application/json",87,d8,7f,4e));
HXLINE( 123)		req->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + ::hxdiscord::DiscordClient_obj::token));
HXLINE( 125)		req->onError =  ::Dynamic(new _hx_Closure_0(req));
HXLINE( 130)		req->onStatus =  ::Dynamic(new _hx_Closure_1());
HXLINE( 133)		req->setMethod(HX_("PUT",af,fe,3c,00));
HXLINE( 135)		req->send();
HXLINE( 136)		 ::haxe::io::Bytes response = responseBytes->getBytes();
HXLINE( 138)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 138)		 ::Dynamic _hx_tmp1 =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,response->toString())->doParse();
HXDLIN( 138)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),138,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendPutData",31,4c,e9,7a)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Https_obj,sendPutData,(void))

void Https_obj::sendPostData(::String url, ::Dynamic data){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String _data){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_151_sendPostData)
HXLINE( 151)			if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE( 153)				::haxe::Log_obj::trace(_data,::hx::SourceInfo(HX_("hxdiscord/utils/Https.hx",04,5a,81,a2),153,HX_("hxdiscord.utils.Https",fc,76,0e,68),HX_("sendPostData",12,88,5f,41)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_158_sendPostData)
HXLINE( 158)			HX_STACK_DO_THROW((HX_("An error has occurred: ",1c,60,a4,c4) + error));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_522e832a9096fddb_142_sendPostData)
HXLINE( 143)		 ::hxdiscord::utils::Http r =  ::hxdiscord::utils::Http_obj::__alloc( HX_CTX ,url);
HXLINE( 146)		r->addHeader(HX_("Content-Type",ce,69,5d,3c),HX_("application/json",87,d8,7f,4e));
HXLINE( 147)		r->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + ::hxdiscord::DiscordClient_obj::token));
HXLINE( 148)		 ::Dynamic replacer = null();
HXDLIN( 148)		::String space = null();
HXDLIN( 148)		r->setPostData(::haxe::format::JsonPrinter_obj::print(data,replacer,space));
HXLINE( 149)		r->onData =  ::Dynamic(new _hx_Closure_0());
HXLINE( 156)		r->onError =  ::Dynamic(new _hx_Closure_1());
HXLINE( 160)		r->setMethod(HX_("POST",60,4c,1d,35));
HXLINE( 161)		r->send();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Https_obj,sendPostData,(void))


Https_obj::Https_obj()
{
}

bool Https_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sendRequest") ) { outValue = sendRequest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sendPutData") ) { outValue = sendPutData_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sendPostData") ) { outValue = sendPostData_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sendNormalRequest") ) { outValue = sendNormalRequest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sendDeleteRequest") ) { outValue = sendDeleteRequest_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sendEmptyPutRequest") ) { outValue = sendEmptyPutRequest_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Https_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Https_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Https_obj::__mClass;

static ::String Https_obj_sStaticFields[] = {
	HX_("sendRequest",e7,32,91,ce),
	HX_("sendNormalRequest",80,4d,59,9f),
	HX_("sendDeleteRequest",fc,87,59,64),
	HX_("sendEmptyPutRequest",c5,a8,e1,59),
	HX_("sendPutData",31,4c,e9,7a),
	HX_("sendPostData",12,88,5f,41),
	::String(null())
};

void Https_obj::__register()
{
	Https_obj _hx_dummy;
	Https_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.utils.Https",fc,76,0e,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Https_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Https_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Https_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Https_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Https_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace utils
