// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DateTools
#include <DateTools.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_hxdiscord_utils_ISO8601Resolver
#include <hxdiscord/utils/ISO8601Resolver.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bc41f540153376b6_16_getActualISODate,"hxdiscord.utils.ISO8601Resolver","getActualISODate",0x4532c3c2,"hxdiscord.utils.ISO8601Resolver.getActualISODate","hxdiscord/utils/ISO8601Resolver.hx",16,0xb2c7f025)
HX_LOCAL_STACK_FRAME(_hx_pos_bc41f540153376b6_24_getCalculatedISODate,"hxdiscord.utils.ISO8601Resolver","getCalculatedISODate",0xbfb39292,"hxdiscord.utils.ISO8601Resolver.getCalculatedISODate","hxdiscord/utils/ISO8601Resolver.hx",24,0xb2c7f025)
namespace hxdiscord{
namespace utils{

void ISO8601Resolver_obj::__construct() { }

Dynamic ISO8601Resolver_obj::__CreateEmpty() { return new ISO8601Resolver_obj; }

void *ISO8601Resolver_obj::_hx_vtable = 0;

Dynamic ISO8601Resolver_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ISO8601Resolver_obj > _hx_result = new ISO8601Resolver_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ISO8601Resolver_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28b4430d;
}

::String ISO8601Resolver_obj::getActualISODate(){
            	HX_STACKFRAME(&_hx_pos_bc41f540153376b6_16_getActualISODate)
HXDLIN(  16)		 ::Date _hx_tmp = ::Date_obj::now();
HXDLIN(  16)		return ::DateTools_obj::format(_hx_tmp,((HX_("%Y-%m-%dT%H:%M:%S.",9c,69,1c,18) + ::Std_obj::string(( ::__time_stamp() * ( (Float)(10000) ))).split(HX_(".",2e,00,00,00))->__get(1)) + HX_("Z",5a,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ISO8601Resolver_obj,getActualISODate,return )

::String ISO8601Resolver_obj::getCalculatedISODate(::String time, ::Dynamic returnMilliseconds){
            	HX_GC_STACKFRAME(&_hx_pos_bc41f540153376b6_24_getCalculatedISODate)
HXLINE(  25)		::String dateToReturn = HX_("",00,00,00,00);
HXLINE(  26)		bool _hx_tmp;
HXDLIN(  26)		bool _hx_tmp1;
HXDLIN(  26)		bool _hx_tmp2;
HXDLIN(  26)		bool _hx_tmp3;
HXDLIN(  26)		bool _hx_tmp4;
HXDLIN(  26)		bool _hx_tmp5;
HXDLIN(  26)		if (!(::StringTools_obj::endsWith(time,HX_("s",73,00,00,00)))) {
HXLINE(  26)			_hx_tmp5 = !(::StringTools_obj::endsWith(time,HX_("m",6d,00,00,00)));
            		}
            		else {
HXLINE(  26)			_hx_tmp5 = false;
            		}
HXDLIN(  26)		if (_hx_tmp5) {
HXLINE(  26)			_hx_tmp4 = !(::StringTools_obj::endsWith(time,HX_("h",68,00,00,00)));
            		}
            		else {
HXLINE(  26)			_hx_tmp4 = false;
            		}
HXDLIN(  26)		if (_hx_tmp4) {
HXLINE(  26)			_hx_tmp3 = !(::StringTools_obj::endsWith(time,HX_("d",64,00,00,00)));
            		}
            		else {
HXLINE(  26)			_hx_tmp3 = false;
            		}
HXDLIN(  26)		if (_hx_tmp3) {
HXLINE(  26)			_hx_tmp2 = !(::StringTools_obj::endsWith(time,HX_("w",77,00,00,00)));
            		}
            		else {
HXLINE(  26)			_hx_tmp2 = false;
            		}
HXDLIN(  26)		if (_hx_tmp2) {
HXLINE(  26)			_hx_tmp1 = !(::StringTools_obj::endsWith(time,HX_("m",6d,00,00,00)));
            		}
            		else {
HXLINE(  26)			_hx_tmp1 = false;
            		}
HXDLIN(  26)		if (_hx_tmp1) {
HXLINE(  26)			_hx_tmp = !(::StringTools_obj::endsWith(time,HX_("y",79,00,00,00)));
            		}
            		else {
HXLINE(  26)			_hx_tmp = false;
            		}
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  28)			HX_STACK_DO_THROW(HX_("Either you specified an invalid parameter or you didn't specify it",b7,9b,3d,50));
            		}
            		else {
HXLINE(  32)			::String lastThing = time.split(HX_("",00,00,00,00))->__get((time.split(HX_("",00,00,00,00))->length - 1));
HXLINE(  33)			Float theOtherParameter = ::Std_obj::parseFloat(time.split(lastThing)->__get(0));
HXLINE(  34)			Float timeToAddInMS = ( (Float)(0) );
HXLINE(  35)			int date = ::Date_obj::now()->getUTCFullYear();
HXDLIN(  35)			int date1 = ::Date_obj::now()->getUTCMonth();
HXDLIN(  35)			int date2 = ::Date_obj::now()->getUTCDate();
HXDLIN(  35)			int date3 = ::Date_obj::now()->getUTCHours();
HXDLIN(  35)			int date4 = ::Date_obj::now()->getUTCMinutes();
HXDLIN(  35)			 ::Date date5 =  ::Date_obj::__alloc( HX_CTX ,date,date1,date2,date3,date4,::Date_obj::now()->getUTCSeconds());
HXLINE(  36)			::String _hx_switch_0 = lastThing.toLowerCase();
            			if (  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE(  44)				timeToAddInMS = ( (Float)(86400000) );
HXDLIN(  44)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("h",68,00,00,00)) ){
HXLINE(  42)				timeToAddInMS = ( (Float)(3600000) );
HXDLIN(  42)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("m",6d,00,00,00)) ){
HXLINE(  40)				timeToAddInMS = ( (Float)(60000) );
HXDLIN(  40)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE(  38)				timeToAddInMS = ( (Float)(1000) );
HXDLIN(  38)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("w",77,00,00,00)) ){
HXLINE(  46)				timeToAddInMS = ( (Float)(86400000) );
HXDLIN(  46)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("y",79,00,00,00)) ){
HXLINE(  50)				timeToAddInMS = ((Float)31557600000.);
HXDLIN(  50)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
HXLINE(  52)			if (( (bool)(returnMilliseconds) )) {
HXLINE(  53)				 ::Date dateToReturn1 = ::Date_obj::fromTime((date5->getTime() + (timeToAddInMS * theOtherParameter)));
HXDLIN(  53)				dateToReturn = ::DateTools_obj::format(dateToReturn1,((HX_("%Y-%m-%dT%H:%M:%S.",9c,69,1c,18) + ::Std_obj::string(( ::__time_stamp() * ( (Float)(10000) ))).split(HX_(".",2e,00,00,00))->__get(1)) + HX_("Z",5a,00,00,00)));
            			}
            			else {
HXLINE(  57)				dateToReturn = ::DateTools_obj::format(::Date_obj::fromTime((date5->getTime() + (timeToAddInMS * theOtherParameter))),HX_("%Y-%m-%dT%H:%M:%S.000Z",c6,3b,66,5b));
            			}
            		}
HXLINE(  60)		return dateToReturn;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ISO8601Resolver_obj,getCalculatedISODate,return )


ISO8601Resolver_obj::ISO8601Resolver_obj()
{
}

bool ISO8601Resolver_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"getActualISODate") ) { outValue = getActualISODate_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getCalculatedISODate") ) { outValue = getCalculatedISODate_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ISO8601Resolver_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ISO8601Resolver_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ISO8601Resolver_obj::__mClass;

static ::String ISO8601Resolver_obj_sStaticFields[] = {
	HX_("getActualISODate",af,12,cc,4f),
	HX_("getCalculatedISODate",ff,5b,03,42),
	::String(null())
};

void ISO8601Resolver_obj::__register()
{
	ISO8601Resolver_obj _hx_dummy;
	ISO8601Resolver_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.utils.ISO8601Resolver",bb,88,6f,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ISO8601Resolver_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ISO8601Resolver_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ISO8601Resolver_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ISO8601Resolver_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ISO8601Resolver_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace utils
