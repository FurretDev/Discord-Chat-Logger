// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_BotData
#include <hxdiscord/BotData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_649419edcc7c1cfd_774_new,"hxdiscord.BotData","new",0x61fc5251,"hxdiscord.BotData.new","hxdiscord/DiscordClient.hx",774,0x9fe3643a)
namespace hxdiscord{

void BotData_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_649419edcc7c1cfd_774_new)
HXLINE( 775)		this->target = HX_("",00,00,00,00);
HXLINE( 778)		this->target = HX_("cpp",23,81,4b,00);
            	}

Dynamic BotData_obj::__CreateEmpty() { return new BotData_obj; }

void *BotData_obj::_hx_vtable = 0;

Dynamic BotData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BotData_obj > _hx_result = new BotData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BotData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5e192b95;
}


BotData_obj::BotData_obj()
{
}

void BotData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BotData);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_END_CLASS();
}

void BotData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
}

::hx::Val BotData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BotData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BotData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BotData_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(BotData_obj,target),HX_("target",51,f3,ec,86)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BotData_obj_sStaticStorageInfo = 0;
#endif

static ::String BotData_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	::String(null()) };

::hx::Class BotData_obj::__mClass;

void BotData_obj::__register()
{
	BotData_obj _hx_dummy;
	BotData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.BotData",df,d5,56,a0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BotData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BotData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BotData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BotData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
