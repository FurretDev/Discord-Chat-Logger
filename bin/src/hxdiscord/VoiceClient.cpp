// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_EntryPoint
#include <haxe/EntryPoint.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_ws_MessageType
#include <haxe/ws/MessageType.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocket
#include <haxe/ws/WebSocket.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocketCommon
#include <haxe/ws/WebSocketCommon.h>
#endif
#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_VoiceClient
#include <hxdiscord/VoiceClient.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_net_Address
#include <sys/net/Address.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_net_UdpSocket
#include <sys/net/UdpSocket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_97d28456309e59e0_27_new,"hxdiscord.VoiceClient","new",0x25492d1d,"hxdiscord.VoiceClient.new","hxdiscord/VoiceClient.hx",27,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_52_handleShit,"hxdiscord.VoiceClient","handleShit",0x59e4d86b,"hxdiscord.VoiceClient.handleShit","hxdiscord/VoiceClient.hx",52,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_73_handleShit,"hxdiscord.VoiceClient","handleShit",0x59e4d86b,"hxdiscord.VoiceClient.handleShit","hxdiscord/VoiceClient.hx",73,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_99_giveCredentials,"hxdiscord.VoiceClient","giveCredentials",0x2df940a8,"hxdiscord.VoiceClient.giveCredentials","hxdiscord/VoiceClient.hx",99,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_106_giveCredentials,"hxdiscord.VoiceClient","giveCredentials",0x2df940a8,"hxdiscord.VoiceClient.giveCredentials","hxdiscord/VoiceClient.hx",106,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_108_giveCredentials,"hxdiscord.VoiceClient","giveCredentials",0x2df940a8,"hxdiscord.VoiceClient.giveCredentials","hxdiscord/VoiceClient.hx",108,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_112_giveCredentials,"hxdiscord.VoiceClient","giveCredentials",0x2df940a8,"hxdiscord.VoiceClient.giveCredentials","hxdiscord/VoiceClient.hx",112,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_116_giveCredentials,"hxdiscord.VoiceClient","giveCredentials",0x2df940a8,"hxdiscord.VoiceClient.giveCredentials","hxdiscord/VoiceClient.hx",116,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_128_play,"hxdiscord.VoiceClient","play",0x7c15f697,"hxdiscord.VoiceClient.play","hxdiscord/VoiceClient.hx",128,0x3de744b4)
HX_LOCAL_STACK_FRAME(_hx_pos_97d28456309e59e0_162_destroy,"hxdiscord.VoiceClient","destroy",0x18152c37,"hxdiscord.VoiceClient.destroy","hxdiscord/VoiceClient.hx",162,0x3de744b4)
namespace hxdiscord{

void VoiceClient_obj::__construct(::String guild_id,::String channel_id,::String user_id){
            	HX_STACKFRAME(&_hx_pos_97d28456309e59e0_27_new)
HXLINE(  40)		this->port = 0;
HXLINE(  39)		this->ip = HX_("",00,00,00,00);
HXLINE(  35)		this->hb_interval = 0;
HXLINE(  34)		this->buf = ::haxe::io::Bytes_obj::alloc(1024);
HXLINE(  32)		this->hasCredentials = false;
HXLINE(  44)		this->guild_id = guild_id;
HXLINE(  45)		this->channel_id = channel_id;
HXLINE(  46)		this->session_id = HX_("",00,00,00,00);
HXLINE(  47)		this->user_id = user_id;
            	}

Dynamic VoiceClient_obj::__CreateEmpty() { return new VoiceClient_obj; }

void *VoiceClient_obj::_hx_vtable = 0;

Dynamic VoiceClient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VoiceClient_obj > _hx_result = new VoiceClient_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool VoiceClient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c51c361;
}

void VoiceClient_obj::handleShit(::String str, ::Dynamic dyn){
            	HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_52_handleShit)
HXDLIN(  52)		 ::hxdiscord::VoiceClient _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  54)		 ::Dynamic d = dyn;
HXLINE(  55)		 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,str)->doParse();
HXLINE(  56)		::haxe::Log_obj::trace(str,::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),56,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("handleShit",88,73,f8,6a)));
HXLINE(  57)		 ::Dynamic _hx_switch_0 =  ::Dynamic(data->__Field(HX_("op",21,61,00,00),::hx::paccDynamic));
            		if (  (_hx_switch_0==2) ){
HXLINE(  81)			this->ip = ( (::String)( ::Dynamic(data->__Field(HX_("d",64,00,00,00),::hx::paccDynamic))->__Field(HX_("ip",e7,5b,00,00),::hx::paccDynamic)) );
HXLINE(  82)			this->port = ( (int)( ::Dynamic(data->__Field(HX_("d",64,00,00,00),::hx::paccDynamic))->__Field(HX_("port",81,83,5c,4a),::hx::paccDynamic)) );
HXLINE(  83)			 ::haxe::ws::WebSocket _hx_tmp = this->websocket;
HXDLIN(  83)			 ::Dynamic replacer = null();
HXDLIN(  83)			::String space = null();
HXDLIN(  83)			_hx_tmp->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("protocol",58,56,63,00),HX_("udp",41,1f,59,00))
            					->setFixed(1,HX_("data",2a,56,63,42), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("address",b4,71,0b,9d), ::Dynamic( ::Dynamic(data->__Field(HX_("d",64,00,00,00),::hx::paccDynamic))->__Field(HX_("ip",e7,5b,00,00),::hx::paccDynamic)))
            						->setFixed(1,HX_("mode",63,d3,60,48),HX_("xsalsa20_poly1305_lite",ad,6b,bd,3c))
            						->setFixed(2,HX_("port",81,83,5c,4a), ::Dynamic( ::Dynamic(data->__Field(HX_("d",64,00,00,00),::hx::paccDynamic))->__Field(HX_("port",81,83,5c,4a),::hx::paccDynamic)))))))
            				->setFixed(1,HX_("op",21,61,00,00),1)),replacer,space));
HXLINE(  80)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(  94)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==8) ){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxdiscord::VoiceClient,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_73_handleShit)
HXLINE(  74)				::haxe::Log_obj::trace(HX_("SENT",58,55,11,37),::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),74,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("handleShit",88,73,f8,6a)));
HXLINE(  75)				 ::haxe::ws::WebSocket _gthis1 = _gthis->websocket;
HXDLIN(  75)				 ::Dynamic replacer = null();
HXDLIN(  75)				::String space = null();
HXDLIN(  75)				_gthis1->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("d",64,00,00,00),null())
            					->setFixed(1,HX_("op",21,61,00,00),8)),replacer,space));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  59)			this->hb_interval = ( (int)( ::Dynamic(data->__Field(HX_("d",64,00,00,00),::hx::paccDynamic))->__Field(HX_("heartbeat_interval",28,15,ef,34),::hx::paccDynamic)) );
HXLINE(  60)			 ::haxe::ws::WebSocket _hx_tmp1 = this->websocket;
HXLINE(  61)			 ::Dynamic replacer1 = null();
HXDLIN(  61)			::String space1 = null();
HXLINE(  60)			_hx_tmp1->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("token",f9,82,2b,14), ::Dynamic(d->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic)))
            					->setFixed(1,HX_("session_id",64,14,71,28),this->session_id)
            					->setFixed(2,HX_("user_id",8f,20,75,6f),this->user_id)
            					->setFixed(3,HX_("server_id",17,03,20,79),this->guild_id)))
            				->setFixed(1,HX_("op",21,61,00,00),0)),replacer1,space1));
HXLINE(  71)			this->hb_timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,this->hb_interval);
HXLINE(  72)			this->hb_timer->run =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  58)			goto _hx_goto_1;
            		}
            		_hx_goto_1:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VoiceClient_obj,handleShit,(void))

void VoiceClient_obj::giveCredentials( ::Dynamic d){
            	HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_99_giveCredentials)
HXDLIN(  99)		 ::hxdiscord::VoiceClient _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 100)		if (!(this->hasCredentials)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::hxdiscord::VoiceClient,_gthis, ::Dynamic,d) HXARGC(1)
            			void _hx_run( ::haxe::ws::MessageType dd){
            				HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_106_giveCredentials)
HXLINE( 106)				switch((int)(dd->_hx_getIndex())){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
            						HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::String,str, ::Dynamic,dyn, ::hxdiscord::VoiceClient,_g) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_108_giveCredentials)
HXLINE( 108)							_g->handleShit(str,dyn);
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 108)						 ::hxdiscord::VoiceClient _g = _gthis;
HXDLIN( 108)						::String str = dd->_hx_getString(0);
HXDLIN( 108)						 ::Dynamic dyn = d;
HXDLIN( 108)						::haxe::EntryPoint_obj::runInMainThread( ::Dynamic(new _hx_Closure_0(str,dyn,_g)));
            					}
            					break;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::hxdiscord::VoiceClient,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_112_giveCredentials)
HXLINE( 113)				::haxe::Log_obj::trace(HX_("closed",ac,a9,51,0e),::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),113,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("giveCredentials",6b,3c,4d,41)));
HXLINE( 114)				_gthis->destroy();
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::hxdiscord::VoiceClient,_gthis) HXARGC(1)
            			void _hx_run(::String _){
            				HX_GC_STACKFRAME(&_hx_pos_97d28456309e59e0_116_giveCredentials)
HXLINE( 117)				::haxe::Log_obj::trace((HX_("errored ",19,bc,46,df) + _),::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),117,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("giveCredentials",6b,3c,4d,41)));
HXLINE( 118)				_gthis->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 104)			this->websocket =  ::haxe::ws::WebSocket_obj::__alloc( HX_CTX ,(HX_("wss://",63,5b,bc,17) + ::Std_obj::string( ::Dynamic(d->__Field(HX_("endpoint",95,d6,5f,31),::hx::paccDynamic)))),null());
HXLINE( 105)			this->websocket->onmessage =  ::Dynamic(new _hx_Closure_1(_gthis,d));
HXLINE( 112)			this->websocket->onclose =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 116)			this->websocket->onerror =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE( 120)			this->hasCredentials = true;
            		}
            		else {
HXLINE( 123)			::haxe::Log_obj::trace(HX_("Credentials have already been given",05,54,7a,07),::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),123,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("giveCredentials",6b,3c,4d,41)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VoiceClient_obj,giveCredentials,(void))

void VoiceClient_obj::play(::String path){
            	HX_STACKFRAME(&_hx_pos_97d28456309e59e0_128_play)
HXDLIN( 128)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE( 129)			::haxe::Log_obj::trace(HX_("The path of the file you have specified does not exist.",3c,20,fb,41),::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),129,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("play",f4,2d,5a,4a)));
            		}
            		else {
HXLINE( 131)			if (!(::StringTools_obj::endsWith(path,HX_(".opus",ed,c0,22,c6)))) {
HXLINE( 132)				HX_STACK_DO_THROW(HX_("[!] WARNING [!]\nPlaying files in hxdiscord for now it's a beta thing. You can only play .opus files for now.",07,36,ce,a9));
            			}
            			else {
HXLINE( 135)				::haxe::Log_obj::trace(HX_("a",61,00,00,00),::hx::SourceInfo(HX_("hxdiscord/VoiceClient.hx",b4,44,e7,3d),135,HX_("hxdiscord.VoiceClient",ab,5a,53,db),HX_("play",f4,2d,5a,4a)));
HXLINE( 136)				 ::haxe::ws::WebSocket _hx_tmp = this->websocket;
HXDLIN( 136)				 ::Dynamic replacer = null();
HXDLIN( 136)				::String space = null();
HXDLIN( 136)				_hx_tmp->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("delay",83,d7,26,d7),0)
            						->setFixed(1,HX_("ssrc",51,30,5b,4c),1)
            						->setFixed(2,HX_("speaking",10,d0,00,66),5)))
            					->setFixed(1,HX_("op",21,61,00,00),5)),replacer,space));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VoiceClient_obj,play,(void))

void VoiceClient_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_97d28456309e59e0_162_destroy)
HXLINE( 163)		this->websocket->close();
HXLINE( 164)		this->websocket = null();
HXLINE( 165)		this->hb_timer->stop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VoiceClient_obj,destroy,(void))


::hx::ObjectPtr< VoiceClient_obj > VoiceClient_obj::__new(::String guild_id,::String channel_id,::String user_id) {
	::hx::ObjectPtr< VoiceClient_obj > __this = new VoiceClient_obj();
	__this->__construct(guild_id,channel_id,user_id);
	return __this;
}

::hx::ObjectPtr< VoiceClient_obj > VoiceClient_obj::__alloc(::hx::Ctx *_hx_ctx,::String guild_id,::String channel_id,::String user_id) {
	VoiceClient_obj *__this = (VoiceClient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VoiceClient_obj), true, "hxdiscord.VoiceClient"));
	*(void **)__this = VoiceClient_obj::_hx_vtable;
	__this->__construct(guild_id,channel_id,user_id);
	return __this;
}

VoiceClient_obj::VoiceClient_obj()
{
}

void VoiceClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VoiceClient);
	HX_MARK_MEMBER_NAME(guild_id,"guild_id");
	HX_MARK_MEMBER_NAME(channel_id,"channel_id");
	HX_MARK_MEMBER_NAME(session_id,"session_id");
	HX_MARK_MEMBER_NAME(websocket,"websocket");
	HX_MARK_MEMBER_NAME(hasCredentials,"hasCredentials");
	HX_MARK_MEMBER_NAME(client,"client");
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_MEMBER_NAME(hb_interval,"hb_interval");
	HX_MARK_MEMBER_NAME(user_id,"user_id");
	HX_MARK_MEMBER_NAME(hb_timer,"hb_timer");
	HX_MARK_MEMBER_NAME(udpConnection,"udpConnection");
	HX_MARK_MEMBER_NAME(ip,"ip");
	HX_MARK_MEMBER_NAME(port,"port");
	HX_MARK_MEMBER_NAME(addr,"addr");
	HX_MARK_END_CLASS();
}

void VoiceClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(guild_id,"guild_id");
	HX_VISIT_MEMBER_NAME(channel_id,"channel_id");
	HX_VISIT_MEMBER_NAME(session_id,"session_id");
	HX_VISIT_MEMBER_NAME(websocket,"websocket");
	HX_VISIT_MEMBER_NAME(hasCredentials,"hasCredentials");
	HX_VISIT_MEMBER_NAME(client,"client");
	HX_VISIT_MEMBER_NAME(buf,"buf");
	HX_VISIT_MEMBER_NAME(hb_interval,"hb_interval");
	HX_VISIT_MEMBER_NAME(user_id,"user_id");
	HX_VISIT_MEMBER_NAME(hb_timer,"hb_timer");
	HX_VISIT_MEMBER_NAME(udpConnection,"udpConnection");
	HX_VISIT_MEMBER_NAME(ip,"ip");
	HX_VISIT_MEMBER_NAME(port,"port");
	HX_VISIT_MEMBER_NAME(addr,"addr");
}

::hx::Val VoiceClient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ip") ) { return ::hx::Val( ip ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return ::hx::Val( buf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"port") ) { return ::hx::Val( port ); }
		if (HX_FIELD_EQ(inName,"addr") ) { return ::hx::Val( addr ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { return ::hx::Val( client ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"user_id") ) { return ::hx::Val( user_id ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"guild_id") ) { return ::hx::Val( guild_id ); }
		if (HX_FIELD_EQ(inName,"hb_timer") ) { return ::hx::Val( hb_timer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"websocket") ) { return ::hx::Val( websocket ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channel_id") ) { return ::hx::Val( channel_id ); }
		if (HX_FIELD_EQ(inName,"session_id") ) { return ::hx::Val( session_id ); }
		if (HX_FIELD_EQ(inName,"handleShit") ) { return ::hx::Val( handleShit_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hb_interval") ) { return ::hx::Val( hb_interval ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"udpConnection") ) { return ::hx::Val( udpConnection ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"hasCredentials") ) { return ::hx::Val( hasCredentials ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"giveCredentials") ) { return ::hx::Val( giveCredentials_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VoiceClient_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ip") ) { ip=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"port") ) { port=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"addr") ) { addr=inValue.Cast<  ::sys::net::Address >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { client=inValue.Cast<  ::hxdiscord::DiscordClient >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"user_id") ) { user_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"guild_id") ) { guild_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hb_timer") ) { hb_timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"websocket") ) { websocket=inValue.Cast<  ::haxe::ws::WebSocket >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channel_id") ) { channel_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"session_id") ) { session_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hb_interval") ) { hb_interval=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"udpConnection") ) { udpConnection=inValue.Cast<  ::sys::net::UdpSocket >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"hasCredentials") ) { hasCredentials=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VoiceClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("guild_id",27,82,bc,71));
	outFields->push(HX_("channel_id",17,0d,9b,03));
	outFields->push(HX_("session_id",64,14,71,28));
	outFields->push(HX_("websocket",47,d7,9c,b0));
	outFields->push(HX_("hasCredentials",82,55,10,6d));
	outFields->push(HX_("client",4b,ca,4f,0a));
	outFields->push(HX_("buf",33,c3,4a,00));
	outFields->push(HX_("hb_interval",6a,e6,ef,66));
	outFields->push(HX_("user_id",8f,20,75,6f));
	outFields->push(HX_("hb_timer",80,d9,d2,33));
	outFields->push(HX_("udpConnection",bf,be,d2,dc));
	outFields->push(HX_("ip",e7,5b,00,00));
	outFields->push(HX_("port",81,83,5c,4a));
	outFields->push(HX_("addr",31,eb,69,40));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VoiceClient_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(VoiceClient_obj,guild_id),HX_("guild_id",27,82,bc,71)},
	{::hx::fsString,(int)offsetof(VoiceClient_obj,channel_id),HX_("channel_id",17,0d,9b,03)},
	{::hx::fsString,(int)offsetof(VoiceClient_obj,session_id),HX_("session_id",64,14,71,28)},
	{::hx::fsObject /*  ::haxe::ws::WebSocket */ ,(int)offsetof(VoiceClient_obj,websocket),HX_("websocket",47,d7,9c,b0)},
	{::hx::fsBool,(int)offsetof(VoiceClient_obj,hasCredentials),HX_("hasCredentials",82,55,10,6d)},
	{::hx::fsObject /*  ::hxdiscord::DiscordClient */ ,(int)offsetof(VoiceClient_obj,client),HX_("client",4b,ca,4f,0a)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(VoiceClient_obj,buf),HX_("buf",33,c3,4a,00)},
	{::hx::fsInt,(int)offsetof(VoiceClient_obj,hb_interval),HX_("hb_interval",6a,e6,ef,66)},
	{::hx::fsString,(int)offsetof(VoiceClient_obj,user_id),HX_("user_id",8f,20,75,6f)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(VoiceClient_obj,hb_timer),HX_("hb_timer",80,d9,d2,33)},
	{::hx::fsObject /*  ::sys::net::UdpSocket */ ,(int)offsetof(VoiceClient_obj,udpConnection),HX_("udpConnection",bf,be,d2,dc)},
	{::hx::fsString,(int)offsetof(VoiceClient_obj,ip),HX_("ip",e7,5b,00,00)},
	{::hx::fsInt,(int)offsetof(VoiceClient_obj,port),HX_("port",81,83,5c,4a)},
	{::hx::fsObject /*  ::sys::net::Address */ ,(int)offsetof(VoiceClient_obj,addr),HX_("addr",31,eb,69,40)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VoiceClient_obj_sStaticStorageInfo = 0;
#endif

static ::String VoiceClient_obj_sMemberFields[] = {
	HX_("guild_id",27,82,bc,71),
	HX_("channel_id",17,0d,9b,03),
	HX_("session_id",64,14,71,28),
	HX_("websocket",47,d7,9c,b0),
	HX_("hasCredentials",82,55,10,6d),
	HX_("client",4b,ca,4f,0a),
	HX_("buf",33,c3,4a,00),
	HX_("hb_interval",6a,e6,ef,66),
	HX_("user_id",8f,20,75,6f),
	HX_("hb_timer",80,d9,d2,33),
	HX_("udpConnection",bf,be,d2,dc),
	HX_("ip",e7,5b,00,00),
	HX_("port",81,83,5c,4a),
	HX_("addr",31,eb,69,40),
	HX_("handleShit",88,73,f8,6a),
	HX_("giveCredentials",6b,3c,4d,41),
	HX_("play",f4,2d,5a,4a),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class VoiceClient_obj::__mClass;

void VoiceClient_obj::__register()
{
	VoiceClient_obj _hx_dummy;
	VoiceClient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.VoiceClient",ab,5a,53,db);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VoiceClient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VoiceClient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VoiceClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VoiceClient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
