// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_EntryPoint
#include <haxe/EntryPoint.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_MainEvent
#include <haxe/MainEvent.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_ws_MessageType
#include <haxe/ws/MessageType.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocket
#include <haxe/ws/WebSocket.h>
#endif
#ifndef INCLUDED_haxe_ws_WebSocketCommon
#include <haxe/ws/WebSocketCommon.h>
#endif
#ifndef INCLUDED_hxdiscord_BotData
#include <hxdiscord/BotData.h>
#endif
#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_VoiceClient
#include <hxdiscord/VoiceClient.h>
#endif
#ifndef INCLUDED_hxdiscord_cache_CachedData
#include <hxdiscord/cache/CachedData.h>
#endif
#ifndef INCLUDED_hxdiscord_endpoints_Endpoints
#include <hxdiscord/endpoints/Endpoints.h>
#endif
#ifndef INCLUDED_hxdiscord_gateway_Gateway
#include <hxdiscord/gateway/Gateway.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Interaction
#include <hxdiscord/types/Interaction.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Member
#include <hxdiscord/types/Member.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Message
#include <hxdiscord/types/Message.h>
#endif
#ifndef INCLUDED_hxdiscord_types_User
#include <hxdiscord/types/User.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9300f7a60363c8c_17_new,"hxdiscord.DiscordClient","new",0x34b4dd17,"hxdiscord.DiscordClient.new","hxdiscord/DiscordClient.hx",17,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_75_sendHeartbeat,"hxdiscord.DiscordClient","sendHeartbeat",0x6cfb1d0b,"hxdiscord.DiscordClient.sendHeartbeat","hxdiscord/DiscordClient.hx",75,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_80_showWsLogs,"hxdiscord.DiscordClient","showWsLogs",0x31ba1eb1,"hxdiscord.DiscordClient.showWsLogs","hxdiscord/DiscordClient.hx",80,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_89_hideWsLogs,"hxdiscord.DiscordClient","hideWsLogs",0x5fcb2036,"hxdiscord.DiscordClient.hideWsLogs","hxdiscord/DiscordClient.hx",89,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_126_tick,"hxdiscord.DiscordClient","tick",0xed86d6c6,"hxdiscord.DiscordClient.tick","hxdiscord/DiscordClient.hx",126,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_131_connect,"hxdiscord.DiscordClient","connect",0xbbab7021,"hxdiscord.DiscordClient.connect","hxdiscord/DiscordClient.hx",131,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_133_connect,"hxdiscord.DiscordClient","connect",0xbbab7021,"hxdiscord.DiscordClient.connect","hxdiscord/DiscordClient.hx",133,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_138_connect,"hxdiscord.DiscordClient","connect",0xbbab7021,"hxdiscord.DiscordClient.connect","hxdiscord/DiscordClient.hx",138,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_128_connect,"hxdiscord.DiscordClient","connect",0xbbab7021,"hxdiscord.DiscordClient.connect","hxdiscord/DiscordClient.hx",128,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_157_setInteractionCommands,"hxdiscord.DiscordClient","setInteractionCommands",0xdea2d1e1,"hxdiscord.DiscordClient.setInteractionCommands","hxdiscord/DiscordClient.hx",157,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_167_getValue,"hxdiscord.DiscordClient","getValue",0x51320ae4,"hxdiscord.DiscordClient.getValue","hxdiscord/DiscordClient.hx",167,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_173_incomingMessages,"hxdiscord.DiscordClient","incomingMessages",0xd2b738bb,"hxdiscord.DiscordClient.incomingMessages","hxdiscord/DiscordClient.hx",173,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_207_incomingMessages,"hxdiscord.DiscordClient","incomingMessages",0xd2b738bb,"hxdiscord.DiscordClient.incomingMessages","hxdiscord/DiscordClient.hx",207,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_214_incomingMessages,"hxdiscord.DiscordClient","incomingMessages",0xd2b738bb,"hxdiscord.DiscordClient.incomingMessages","hxdiscord/DiscordClient.hx",214,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_211_incomingMessages,"hxdiscord.DiscordClient","incomingMessages",0xd2b738bb,"hxdiscord.DiscordClient.incomingMessages","hxdiscord/DiscordClient.hx",211,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_461_causeResume,"hxdiscord.DiscordClient","causeResume",0x8a28faad,"hxdiscord.DiscordClient.causeResume","hxdiscord/DiscordClient.hx",461,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_474_changeStatus,"hxdiscord.DiscordClient","changeStatus",0x9782c52b,"hxdiscord.DiscordClient.changeStatus","hxdiscord/DiscordClient.hx",474,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_534_changePresence,"hxdiscord.DiscordClient","changePresence",0x8e4c6074,"hxdiscord.DiscordClient.changePresence","hxdiscord/DiscordClient.hx",534,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_576_createVoiceConnection,"hxdiscord.DiscordClient","createVoiceConnection",0x0cb6ff4b,"hxdiscord.DiscordClient.createVoiceConnection","hxdiscord/DiscordClient.hx",576,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_594_nInteraction,"hxdiscord.DiscordClient","nInteraction",0x0b260e6d,"hxdiscord.DiscordClient.nInteraction","hxdiscord/DiscordClient.hx",594,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_616_nMessage,"hxdiscord.DiscordClient","nMessage",0xbab1e2e2,"hxdiscord.DiscordClient.nMessage","hxdiscord/DiscordClient.hx",616,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_636___default_onInteractionCreate,"hxdiscord.DiscordClient","__default_onInteractionCreate",0x63ba74e8,"hxdiscord.DiscordClient.__default_onInteractionCreate","hxdiscord/DiscordClient.hx",636,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_645___default_onReady,"hxdiscord.DiscordClient","__default_onReady",0x90e409dd,"hxdiscord.DiscordClient.__default_onReady","hxdiscord/DiscordClient.hx",645,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_654___default_onResumed,"hxdiscord.DiscordClient","__default_onResumed",0x01ca4a11,"hxdiscord.DiscordClient.__default_onResumed","hxdiscord/DiscordClient.hx",654,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_663___default_onMessageCreate,"hxdiscord.DiscordClient","__default_onMessageCreate",0xf880939d,"hxdiscord.DiscordClient.__default_onMessageCreate","hxdiscord/DiscordClient.hx",663,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_672___default_onThreadMemberUpdate,"hxdiscord.DiscordClient","__default_onThreadMemberUpdate",0x63719c33,"hxdiscord.DiscordClient.__default_onThreadMemberUpdate","hxdiscord/DiscordClient.hx",672,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_681___default_onThreadMembersUpdate,"hxdiscord.DiscordClient","__default_onThreadMembersUpdate",0x9e947992,"hxdiscord.DiscordClient.__default_onThreadMembersUpdate","hxdiscord/DiscordClient.hx",681,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_689___default_onGuildCreate,"hxdiscord.DiscordClient","__default_onGuildCreate",0x9eb12609,"hxdiscord.DiscordClient.__default_onGuildCreate","hxdiscord/DiscordClient.hx",689,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_698___default_onGuildUpdate,"hxdiscord.DiscordClient","__default_onGuildUpdate",0xa9a74516,"hxdiscord.DiscordClient.__default_onGuildUpdate","hxdiscord/DiscordClient.hx",698,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_706___default_onGuildDelete,"hxdiscord.DiscordClient","__default_onGuildDelete",0x8d7a7f38,"hxdiscord.DiscordClient.__default_onGuildDelete","hxdiscord/DiscordClient.hx",706,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_715___default_onGuildBanAdd,"hxdiscord.DiscordClient","__default_onGuildBanAdd",0x7460829f,"hxdiscord.DiscordClient.__default_onGuildBanAdd","hxdiscord/DiscordClient.hx",715,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_724___default_onGuildBanRemove,"hxdiscord.DiscordClient","__default_onGuildBanRemove",0x4434ee86,"hxdiscord.DiscordClient.__default_onGuildBanRemove","hxdiscord/DiscordClient.hx",724,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_733___default_onGuildAuditLogEntryCreate,"hxdiscord.DiscordClient","__default_onGuildAuditLogEntryCreate",0x2e6a51f8,"hxdiscord.DiscordClient.__default_onGuildAuditLogEntryCreate","hxdiscord/DiscordClient.hx",733,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_742___default_onGuildMemberAdd,"hxdiscord.DiscordClient","__default_onGuildMemberAdd",0x78a9a2fa,"hxdiscord.DiscordClient.__default_onGuildMemberAdd","hxdiscord/DiscordClient.hx",742,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_751___default_onGuildMemberRemove,"hxdiscord.DiscordClient","__default_onGuildMemberRemove",0xb686390b,"hxdiscord.DiscordClient.__default_onGuildMemberRemove","hxdiscord/DiscordClient.hx",751,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_760___default_onGuildMemberUpdate,"hxdiscord.DiscordClient","__default_onGuildMemberUpdate",0x390322d0,"hxdiscord.DiscordClient.__default_onGuildMemberUpdate","hxdiscord/DiscordClient.hx",760,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_769___default_onChannelCreate,"hxdiscord.DiscordClient","__default_onChannelCreate",0x9a15c399,"hxdiscord.DiscordClient.__default_onChannelCreate","hxdiscord/DiscordClient.hx",769,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_18_boot,"hxdiscord.DiscordClient","boot",0xe1a5979b,"hxdiscord.DiscordClient.boot","hxdiscord/DiscordClient.hx",18,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_50_boot,"hxdiscord.DiscordClient","boot",0xe1a5979b,"hxdiscord.DiscordClient.boot","hxdiscord/DiscordClient.hx",50,0x9fe3643a)
HX_LOCAL_STACK_FRAME(_hx_pos_d9300f7a60363c8c_68_boot,"hxdiscord.DiscordClient","boot",0xe1a5979b,"hxdiscord.DiscordClient.boot","hxdiscord/DiscordClient.hx",68,0x9fe3643a)
namespace hxdiscord{

void DiscordClient_obj::__construct(::String _token,::Array< int > intents, ::Dynamic _debug){
            	HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_17_new)
HXLINE(  74)		this->noConnection = false;
HXLINE(  73)		this->intentsNumber = 0;
HXLINE(  71)		this->currentVoiceClients = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  67)		this->afk = false;
HXLINE(  65)		this->presenceArray = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  64)		this->presenceType = 99;
HXLINE(  63)		this->presence = HX_("",00,00,00,00);
HXLINE(  59)		this->bot = false;
HXLINE(  57)		this->discriminator = HX_("",00,00,00,00);
HXLINE(  56)		this->resume_gateway_url = ((HX_("wss://gateway.discord.gg/?v=",a6,e7,0f,f0) + ::hxdiscord::gateway::Gateway_obj::API_VERSION) + HX_("&encoding=json",4c,1b,0d,30));
HXLINE(  53)		this->flags = 0;
HXLINE(  51)		this->accId = ::hxdiscord::DiscordClient_obj::accountId;
HXLINE(  49)		this->ticked = false;
HXLINE(  48)		this->user = null();
HXLINE(  47)		this->mfa_enabled = false;
HXLINE(  45)		this->username = HX_("",00,00,00,00);
HXLINE(  44)		this->verified = false;
HXLINE(  42)		this->readySent = false;
HXLINE(  40)		this->alive = false;
HXLINE(  39)		this->data = null();
HXLINE(  35)		this->heartbeat_interval = 0;
HXLINE(  34)		this->editThis = HX_("",00,00,00,00);
HXLINE(  31)		this->session_id = HX_("",00,00,00,00);
HXLINE(  30)		this->session_type = HX_("",00,00,00,00);
HXLINE(  29)		this->session = HX_("",00,00,00,00);
HXLINE(  28)		this->connectedVoiceClients = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  27)		this->showWsLogsVar = false;
HXLINE(  26)		this->sequence = 0;
HXLINE(  25)		this->ignore = false;
HXLINE(  24)		this->receivedHelloOC = false;
HXLINE(  23)		this->canResume = false;
HXLINE(  22)		this->status = HX_("online",93,f4,63,ff);
HXLINE(  97)		::hxdiscord::DiscordClient_obj::token = _token;
HXLINE(  98)		::hxdiscord::DiscordClient_obj::debug = ( (bool)(_debug) );
HXLINE(  99)		this->data =  ::hxdiscord::BotData_obj::__alloc( HX_CTX );
HXLINE( 100)		bool _hx_tmp;
HXDLIN( 100)		if (::hx::IsNotNull( intents )) {
HXLINE( 100)			_hx_tmp = ::hx::IsPointerEq( intents,::Array_obj< int >::__new(0) );
            		}
            		else {
HXLINE( 100)			_hx_tmp = true;
            		}
HXDLIN( 100)		if (_hx_tmp) {
HXLINE( 102)			HX_STACK_DO_THROW(HX_("The Discord client requires valid intents",d3,65,28,10));
            		}
            		else {
HXLINE( 106)			int _g = 0;
HXDLIN( 106)			while((_g < intents->length)){
HXLINE( 106)				int intent = intents->__get(_g);
HXDLIN( 106)				_g = (_g + 1);
HXLINE( 107)				this->intentsNumber = (this->intentsNumber | intent);
            			}
            		}
HXLINE( 111)		this->cache =  ::hxdiscord::cache::CachedData_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic DiscordClient_obj::__CreateEmpty() { return new DiscordClient_obj; }

void *DiscordClient_obj::_hx_vtable = 0;

Dynamic DiscordClient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiscordClient_obj > _hx_result = new DiscordClient_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool DiscordClient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x616787db;
}

void DiscordClient_obj::sendHeartbeat(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_75_sendHeartbeat)
HXLINE(  76)		 ::haxe::ws::WebSocket _hx_tmp = this->ws;
HXDLIN(  76)		 ::Dynamic replacer = null();
HXDLIN(  76)		::String space = null();
HXDLIN(  76)		_hx_tmp->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("d",64,00,00,00),null())
            			->setFixed(1,HX_("op",21,61,00,00),1)),replacer,space));
HXLINE(  77)		this->last_heartbeat = ::Date_obj::now();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,sendHeartbeat,(void))

void DiscordClient_obj::showWsLogs(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_80_showWsLogs)
HXDLIN(  80)		if (this->showWsLogsVar) {
HXLINE(  81)			::Sys_obj::println(HX_("[hxdiscord] WebSocket logs are already shown! To hide them, use hideWsLogs()",58,db,df,8a));
            		}
            		else {
HXLINE(  83)			this->showWsLogsVar = true;
HXLINE(  84)			::Sys_obj::println(HX_("[hxdiscord] WebSocket logs will be shown now!",1d,ef,e8,6e));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,showWsLogs,(void))

void DiscordClient_obj::hideWsLogs(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_89_hideWsLogs)
HXDLIN(  89)		if (!(this->showWsLogsVar)) {
HXLINE(  90)			::Sys_obj::println(HX_("[hxdiscord] WebSocket logs are already hidden! To hide them, use hideWsLogs()",81,3f,98,5c));
            		}
            		else {
HXLINE(  92)			this->showWsLogsVar = false;
HXLINE(  93)			::Sys_obj::println(HX_("[hxdiscord] WebSocket logs will be hidden now!",3e,e6,2a,54));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,hideWsLogs,(void))

void DiscordClient_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_126_tick)
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,tick,(void))

void DiscordClient_obj::connect(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hxdiscord::DiscordClient,_gthis) HXARGC(1)
            		void _hx_run( ::haxe::ws::MessageType daType){
            			HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_131_connect)
HXLINE( 131)			switch((int)(daType->_hx_getIndex())){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,msg, ::hxdiscord::DiscordClient,_g) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_133_connect)
HXLINE( 133)						_g->incomingMessages(msg);
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 133)					 ::hxdiscord::DiscordClient _g = _gthis;
HXDLIN( 133)					::String msg = daType->_hx_getString(0);
HXDLIN( 133)					::haxe::EntryPoint_obj::runInMainThread( ::Dynamic(new _hx_Closure_0(msg,_g)));
            				}
            				break;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::hxdiscord::DiscordClient,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_138_connect)
HXLINE( 139)			_gthis->hb_timer->stop();
HXLINE( 140)			_gthis->connect();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_128_connect)
HXDLIN( 128)		 ::hxdiscord::DiscordClient _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 129)		this->ws =  ::haxe::ws::WebSocket_obj::__alloc( HX_CTX ,this->resume_gateway_url,null());
HXLINE( 130)		this->ws->onmessage =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 138)		this->ws->onclose =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 143)		if (!(this->ticked)) {
HXLINE( 144)			::haxe::MainLoop_obj::add(this->tick_dyn(),null());
HXLINE( 145)			this->ticked = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,connect,(void))

 ::Dynamic DiscordClient_obj::setInteractionCommands( ::Dynamic j){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_157_setInteractionCommands)
HXDLIN( 157)		return ::hxdiscord::endpoints::Endpoints_obj::bulkOverwriteGlobalApplicationCommands(j);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordClient_obj,setInteractionCommands,return )

 ::Dynamic DiscordClient_obj::getValue(::cpp::VirtualArray array, ::Dynamic thingToSearch){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_167_getValue)
HXLINE( 168)		if (array->contains(thingToSearch)) {
HXLINE( 169)			return thingToSearch;
            		}
HXLINE( 170)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiscordClient_obj,getValue,return )

void DiscordClient_obj::incomingMessages(::String msg){
            	HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_173_incomingMessages)
HXDLIN( 173)		 ::hxdiscord::DiscordClient _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 174)		if (this->showWsLogsVar) {
HXLINE( 175)			::Sys_obj::println(HX_("[ws-hxdiscord] New message!",43,23,eb,41));
            		}
HXLINE( 178)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 180)			if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE( 182)				::haxe::Log_obj::trace(msg,::hx::SourceInfo(HX_("hxdiscord/DiscordClient.hx",3a,64,e3,9f),182,HX_("hxdiscord.DiscordClient",a5,05,75,b5),HX_("incomingMessages",d2,2b,e9,a5)));
            			}
HXLINE( 184)			 ::Dynamic json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,msg)->doParse();
HXLINE( 185)			::String t = ( (::String)(json->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)) );
HXLINE( 188)			int s = ( (int)(json->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)) );
HXLINE( 189)			 ::Dynamic d =  ::Dynamic(json->__Field(HX_("d",64,00,00,00),::hx::paccDynamic));
HXLINE( 190)			 ::Dynamic _hx_switch_0 =  ::Dynamic(json->__Field(HX_("op",21,61,00,00),::hx::paccDynamic));
            			if (  (_hx_switch_0==0) ){
HXLINE( 236)				this->sequence = s;
HXDLIN( 236)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_0==7) ){
HXLINE( 238)				this->ws->close();
HXDLIN( 238)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_0==9) ){
HXLINE( 233)				this->canResume = false;
HXLINE( 234)				this->ws->close();
HXLINE( 232)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_0==10) ){
HXLINE( 194)				this->interval = ( (int)(d->__Field(HX_("heartbeat_interval",28,15,ef,34),::hx::paccDynamic)) );
HXLINE( 195)				if (this->canResume) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxdiscord::DiscordClient,_gthis) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_207_incomingMessages)
HXLINE( 207)						 ::haxe::ws::WebSocket _gthis1 = _gthis->ws;
HXDLIN( 207)						 ::Dynamic replacer = null();
HXDLIN( 207)						::String space = null();
HXDLIN( 207)						_gthis1->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("d",64,00,00,00),null())
            							->setFixed(1,HX_("op",21,61,00,00),1)),replacer,space));
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 196)					 ::haxe::ws::WebSocket _hx_tmp = this->ws;
HXDLIN( 196)					 ::Dynamic replacer = null();
HXDLIN( 196)					::String space = null();
HXDLIN( 196)					_hx_tmp->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("d",64,00,00,00),null())
            						->setFixed(1,HX_("op",21,61,00,00),1)),replacer,space));
HXLINE( 197)					 ::haxe::ws::WebSocket _hx_tmp1 = this->ws;
HXDLIN( 197)					 ::Dynamic replacer1 = null();
HXDLIN( 197)					::String space1 = null();
HXDLIN( 197)					_hx_tmp1->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("seq",9f,9b,57,00),this->sequence)
            							->setFixed(1,HX_("token",f9,82,2b,14),::hxdiscord::DiscordClient_obj::token)
            							->setFixed(2,HX_("session_id",64,14,71,28),this->session_id)))
            						->setFixed(1,HX_("op",21,61,00,00),6)),replacer1,space1));
HXLINE( 205)					this->hb_timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,this->interval);
HXLINE( 206)					this->hb_timer->run =  ::Dynamic(new _hx_Closure_0(_gthis));
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::hxdiscord::DiscordClient,_gthis) HXARGC(0)
            					void _hx_run(){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hxdiscord::DiscordClient,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_214_incomingMessages)
HXLINE( 214)							 ::haxe::ws::WebSocket _gthis1 = _gthis->ws;
HXDLIN( 214)							 ::Dynamic replacer = null();
HXDLIN( 214)							::String space = null();
HXDLIN( 214)							_gthis1->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("d",64,00,00,00),null())
            								->setFixed(1,HX_("op",21,61,00,00),1)),replacer,space));
            						}
            						HX_END_LOCAL_FUNC0((void))

            						HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_211_incomingMessages)
HXLINE( 212)						_gthis->hb_timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,_gthis->interval);
HXLINE( 213)						_gthis->hb_timer->run =  ::Dynamic(new _hx_Closure_1(_gthis));
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 210)					 ::haxe::ws::WebSocket _hx_tmp2 = this->ws;
HXDLIN( 210)					 ::Dynamic replacer2 = null();
HXDLIN( 210)					::String space2 = null();
HXDLIN( 210)					_hx_tmp2->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("d",64,00,00,00),null())
            						->setFixed(1,HX_("op",21,61,00,00),1)),replacer2,space2));
HXLINE( 211)					::haxe::EntryPoint_obj::runInMainThread( ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 217)					 ::haxe::ws::WebSocket _hx_tmp3 = this->ws;
HXDLIN( 217)					 ::Dynamic replacer3 = null();
HXDLIN( 217)					::String space3 = null();
HXDLIN( 217)					_hx_tmp3->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("token",f9,82,2b,14),::hxdiscord::DiscordClient_obj::token)
            							->setFixed(1,HX_("intents",97,1a,21,17),3276799)
            							->setFixed(2,HX_("properties",f3,fb,0e,61), ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("browser",a8,fb,60,b8),HX_("hxdiscord",9c,e0,6c,34))
            								->setFixed(1,HX_("os",24,61,00,00),HX_("hxdiscord",9c,e0,6c,34))
            								->setFixed(2,HX_("device",96,dc,77,71),HX_("hxdiscord",9c,e0,6c,34))))))
            						->setFixed(1,HX_("op",21,61,00,00),2)),replacer3,space3));
            				}
HXLINE( 192)				goto _hx_goto_12;
            			}
            			_hx_goto_12:;
HXLINE( 241)			::String _hx_switch_1 = t;
            			if (  (_hx_switch_1==HX_("CHANNEL_CREATE",58,7a,a4,90)) ){
HXLINE( 293)				this->onChannelCreate(d);
HXDLIN( 293)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_AUDIT_LOG_ENTRY_CREATE",34,4a,be,ed)) ){
HXLINE( 321)				this->onGuildAuditLogEntryCreate(d);
HXDLIN( 321)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_BAN_ADD",45,c2,4b,22)) ){
HXLINE( 317)				this->onGuildBanAdd(d);
HXDLIN( 317)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_BAN_REMOVE",80,16,3c,ed)) ){
HXLINE( 319)				this->onGuildBanRemove(d);
HXDLIN( 319)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_CREATE",68,d3,47,49)) ){
HXLINE( 303)				if (!(this->cache->guilds->exists(( (::String)(d->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) )))) {
HXLINE( 304)					this->cache->guilds->set(( (::String)(d->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ),d);
            				}
HXLINE( 306)				{
HXLINE( 306)					int _g = 0;
HXDLIN( 306)					int _g1 = ( (int)( ::Dynamic(d->__Field(HX_("roles",3d,1c,5f,ed),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 306)					while((_g < _g1)){
HXLINE( 306)						_g = (_g + 1);
HXDLIN( 306)						int i = (_g - 1);
HXLINE( 307)						this->cache->guilds_roles->set(( (::String)( ::Dynamic(d->__Field(HX_("roles",3d,1c,5f,ed),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ), ::Dynamic(d->__Field(HX_("roles",3d,1c,5f,ed),::hx::paccDynamic))->__GetItem(i));
            					}
            				}
HXLINE( 309)				this->onGuildCreate(d);
HXLINE( 302)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_DELETE",97,2c,11,38)) ){
HXLINE( 314)				this->cache->guilds->remove(( (::String)(d->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ));
HXLINE( 315)				this->onGuildDelete(d);
HXLINE( 313)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_MEMBER_ADD",c8,fc,80,e2)) ){
HXLINE( 323)				this->onGuildMemberAdd(d);
HXLINE( 324)				 ::hxdiscord::types::Member member =  ::hxdiscord::types::Member_obj::__alloc( HX_CTX ,d,( (::String)(d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic)) ));
HXLINE( 325)				this->cache->guild_members->set(( (::String)((d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic) +  ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic))) ),member);
HXLINE( 322)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_MEMBER_REMOVE",dd,0f,1e,29)) ){
HXLINE( 327)				this->onGuildMemberRemove(d);
HXLINE( 348)				if (this->cache->guild_members->exists(( (::String)((d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic) +  ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic))) ))) {
HXLINE( 349)					this->cache->guild_members->remove(( (::String)((d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic) +  ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic))) ));
            				}
HXLINE( 326)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_MEMBER_UPDATE",a2,f9,9a,ab)) ){
HXLINE( 352)				this->onGuildMemberUpdate(d);
HXLINE( 353)				 ::hxdiscord::types::Member member1 =  ::hxdiscord::types::Member_obj::__alloc( HX_CTX ,d,( (::String)(d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic)) ));
HXLINE( 354)				{
HXLINE( 354)					int _g2 = 0;
HXDLIN( 354)					int _g3 = member1->roles->length;
HXDLIN( 354)					while((_g2 < _g3)){
HXLINE( 354)						_g2 = (_g2 + 1);
HXLINE( 355)						::Array< ::String > member2 = member1->permissionsBitwise;
HXDLIN( 355)						member2->push( ::Dynamic(this->cache->guilds_roles->get(member1->roles->__get((_g2 - 1)))->__Field(HX_("permissions",84,7c,d4,0e),::hx::paccDynamic)));
            					}
            				}
HXLINE( 358)				this->cache->guild_members->set((member1->guild_id + member1->user->id),member1);
HXLINE( 351)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_ROLE_CREATE",f9,a3,83,ee)) ){
HXLINE( 295)				this->cache->guilds_roles->set(( (::String)( ::Dynamic(d->__Field(HX_("role",76,eb,ae,4b),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ),d);
HXDLIN( 295)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_ROLE_DELETE",28,fd,4c,dd)) ){
HXLINE( 297)				if (this->cache->guilds_roles->exists(( (::String)(d->__Field(HX_("role_id",44,94,7d,58),::hx::paccDynamic)) ))) {
HXLINE( 298)					this->cache->guilds_roles->set(( (::String)(d->__Field(HX_("role_id",44,94,7d,58),::hx::paccDynamic)) ),d);
            				}
HXLINE( 297)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_ROLE_UPDATE",06,c3,79,f9)) ){
HXLINE( 301)				this->cache->guilds_roles->set(( (::String)( ::Dynamic(d->__Field(HX_("role",76,eb,ae,4b),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ),d);
HXDLIN( 301)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("GUILD_UPDATE",75,f2,3d,54)) ){
HXLINE( 311)				this->onGuildUpdate(d);
HXLINE( 312)				this->cache->guilds->set(( (::String)(d->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ),d);
HXLINE( 310)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("INTERACTION_CREATE",29,9b,05,30)) ){
HXLINE( 278)				 ::Dynamic _hx_tmp4 = this->onInteractionCreate;
HXDLIN( 278)				_hx_tmp4(this->nInteraction(d,d, ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,msg)->doParse()));
HXDLIN( 278)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("MESSAGE_CREATE",d4,ad,af,cf)) ){
HXLINE( 287)				 ::Dynamic _hx_tmp5 = this->onMessageCreate;
HXDLIN( 287)				_hx_tmp5(this->nMessage(d,d));
HXDLIN( 287)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("PRESENCE_UPDATE",cd,ee,82,a2)) ){
HXLINE( 448)				this->cache->presences->set(( (::String)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ),d);
HXDLIN( 448)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("READY",43,d8,a8,64)) ){
HXLINE( 246)				this->user =  ::hxdiscord::types::User_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic));
HXLINE( 247)				this->verified = ( (bool)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("verified",08,48,b6,12),::hx::paccDynamic)) );
HXLINE( 248)				this->avatar =  ::Dynamic( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("avatar",19,80,5c,fa),::hx::paccDynamic));
HXLINE( 249)				this->mfa_enabled = ( (bool)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("mfa_enabled",ea,94,c1,21),::hx::paccDynamic)) );
HXLINE( 250)				::hxdiscord::DiscordClient_obj::accountId = ( (::String)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE( 251)				this->email =  ::Dynamic( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("email",1c,cf,ce,6f),::hx::paccDynamic));
HXLINE( 252)				this->discriminator = ( (::String)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("discriminator",9c,72,43,23),::hx::paccDynamic)) );
HXLINE( 253)				this->username = ( (::String)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("username",16,86,eb,20),::hx::paccDynamic)) );
HXLINE( 254)				this->flags = ( (int)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("flags",47,2b,8c,02),::hx::paccDynamic)) );
HXLINE( 255)				this->bot = ( (bool)( ::Dynamic(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic))->__Field(HX_("bot",07,be,4a,00),::hx::paccDynamic)) );
HXLINE( 256)				this->session_id = ( (::String)(d->__Field(HX_("session_id",64,14,71,28),::hx::paccDynamic)) );
HXLINE( 257)				this->session_type = ( (::String)(d->__Field(HX_("session_type",83,9f,7f,fd),::hx::paccDynamic)) );
HXLINE( 261)				this->canResume = true;
HXLINE( 262)				if (!(this->bot)) {
HXLINE( 263)					::hxdiscord::DiscordClient_obj::authHeader = ::hxdiscord::DiscordClient_obj::token;
            				}
            				else {
HXLINE( 266)					::hxdiscord::DiscordClient_obj::authHeader = (HX_("Bot ",59,b4,f4,2b) + ::hxdiscord::DiscordClient_obj::token);
            				}
HXLINE( 268)				this->onReady();
HXLINE( 269)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 270)					this->accId = ( (::String)( ::Dynamic(d->__Field(HX_("application",50,ab,3e,2a),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g4 = _hx_e;
HXLINE( 271)						 ::haxe::Exception _g5 = ::haxe::Exception_obj::caught(_g4);
HXLINE( 272)						if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE( 273)							 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN( 273)							::String _hx_tmp7 = _g5->get_message();
HXDLIN( 273)							_hx_tmp6(_hx_tmp7,::hx::SourceInfo(HX_("hxdiscord/DiscordClient.hx",3a,64,e3,9f),273,HX_("hxdiscord.DiscordClient",a5,05,75,b5),HX_("incomingMessages",d2,2b,e9,a5)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 276)				this->last_heartbeat = ::Date_obj::now();
HXLINE( 245)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("RESUMED",f7,e1,2b,eb)) ){
HXLINE( 244)				this->onResumed();
HXDLIN( 244)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("THREAD_MEMBERS_UPDATE",24,11,6f,11)) ){
HXLINE( 291)				this->onThreadMembersUpdate(d);
HXDLIN( 291)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("THREAD_MEMBER_UPDATE",19,39,a1,77)) ){
HXLINE( 289)				this->onThreadMemberUpdate(d);
HXDLIN( 289)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("VOICE_SERVER_UPDATE",98,24,fe,49)) ){
HXLINE( 426)				int _g6 = 0;
HXDLIN( 426)				int _g7 = this->currentVoiceClients->length;
HXDLIN( 426)				while((_g6 < _g7)){
HXLINE( 426)					_g6 = (_g6 + 1);
HXDLIN( 426)					int i1 = (_g6 - 1);
HXLINE( 428)					if (::hx::IsEq( this->currentVoiceClients->__get(i1).StaticCast<  ::hxdiscord::VoiceClient >()->guild_id,d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic) )) {
HXLINE( 429)						this->currentVoiceClients->__get(i1).StaticCast<  ::hxdiscord::VoiceClient >()->giveCredentials(d);
            					}
            				}
HXLINE( 426)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_1==HX_("VOICE_STATE_UPDATE",e4,47,4f,73)) ){
HXLINE( 434)				int _g8 = 0;
HXDLIN( 434)				int _g9 = this->currentVoiceClients->length;
HXDLIN( 434)				while((_g8 < _g9)){
HXLINE( 434)					_g8 = (_g8 + 1);
HXDLIN( 434)					int i2 = (_g8 - 1);
HXLINE( 436)					if (::hx::IsEq( this->currentVoiceClients->__get(i2).StaticCast<  ::hxdiscord::VoiceClient >()->guild_id,d->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic) )) {
HXLINE( 437)						bool _hx_tmp8;
HXDLIN( 437)						if (::hx::IsNotNull( d->__Field(HX_("channel_id",17,0d,9b,03),::hx::paccDynamic) )) {
HXLINE( 437)							_hx_tmp8 = ::hx::IsNotNull( d->__Field(HX_("session_id",64,14,71,28),::hx::paccDynamic) );
            						}
            						else {
HXLINE( 437)							_hx_tmp8 = false;
            						}
HXDLIN( 437)						if (_hx_tmp8) {
HXLINE( 439)							this->currentVoiceClients->__get(i2).StaticCast<  ::hxdiscord::VoiceClient >()->session_id = ( (::String)(d->__Field(HX_("session_id",64,14,71,28),::hx::paccDynamic)) );
            						}
            						else {
HXLINE( 443)							this->currentVoiceClients->remove(this->currentVoiceClients->__get(i2).StaticCast<  ::hxdiscord::VoiceClient >());
            						}
            					}
            				}
HXLINE( 434)				goto _hx_goto_13;
            			}
            			_hx_goto_13:;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g10 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordClient_obj,incomingMessages,(void))

void DiscordClient_obj::causeResume(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_461_causeResume)
HXLINE( 462)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 462)		::String _hx_tmp1 = (HX_("Causing resume at ",f4,5f,65,25) + ::Std_obj::string(::Date_obj::now()));
HXDLIN( 462)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("hxdiscord/DiscordClient.hx",3a,64,e3,9f),462,HX_("hxdiscord.DiscordClient",a5,05,75,b5),HX_("causeResume",f6,de,49,71)));
HXLINE( 463)		this->incomingMessages(HX_("{\"op\": 7, \"d\": null}",db,29,22,76));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordClient_obj,causeResume,(void))

void DiscordClient_obj::changeStatus(::String status,::String type,::String presence, ::Dynamic __o_afk){
            		 ::Dynamic afk = __o_afk;
            		if (::hx::IsNull(__o_afk)) afk = false;
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_474_changeStatus)
HXLINE( 476)		bool _hx_tmp;
HXDLIN( 476)		bool _hx_tmp1;
HXDLIN( 476)		bool _hx_tmp2;
HXDLIN( 476)		bool _hx_tmp3;
HXDLIN( 476)		if ((status != HX_("online",93,f4,63,ff))) {
HXLINE( 476)			_hx_tmp3 = (status != HX_("dnd",9a,41,4c,00));
            		}
            		else {
HXLINE( 476)			_hx_tmp3 = false;
            		}
HXDLIN( 476)		if (_hx_tmp3) {
HXLINE( 476)			_hx_tmp2 = (status != HX_("idle",14,a7,b3,45));
            		}
            		else {
HXLINE( 476)			_hx_tmp2 = false;
            		}
HXDLIN( 476)		if (_hx_tmp2) {
HXLINE( 476)			_hx_tmp1 = (status != HX_("invisible",2d,93,d5,bb));
            		}
            		else {
HXLINE( 476)			_hx_tmp1 = false;
            		}
HXDLIN( 476)		if (_hx_tmp1) {
HXLINE( 476)			_hx_tmp = (status != HX_("offline",e3,8e,c7,d2));
            		}
            		else {
HXLINE( 476)			_hx_tmp = false;
            		}
HXDLIN( 476)		if (_hx_tmp) {
HXLINE( 478)			HX_STACK_DO_THROW((HX_("Invalid status: ",c1,54,18,78) + status));
            		}
HXLINE( 481)		 ::Dynamic data = null();
HXLINE( 482)		int numericType = 0;
HXLINE( 483)		bool _hx_tmp4;
HXDLIN( 483)		if (::hx::IsNotNull( type )) {
HXLINE( 483)			_hx_tmp4 = ::hx::IsNotNull( type );
            		}
            		else {
HXLINE( 483)			_hx_tmp4 = false;
            		}
HXDLIN( 483)		if (_hx_tmp4) {
HXLINE( 485)			::String _hx_switch_0 = type.toLowerCase();
            			if (  (_hx_switch_0==HX_("competing",64,74,4c,51)) ){
HXLINE( 498)				numericType = 5;
HXDLIN( 498)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_0==HX_("custom",b1,87,92,3f)) ){
HXLINE( 496)				numericType = 4;
HXDLIN( 496)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_0==HX_("game",f2,f3,5e,44)) ){
HXLINE( 488)				numericType = 0;
HXDLIN( 488)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_0==HX_("listening",fb,6a,91,f3)) ){
HXLINE( 492)				numericType = 2;
HXDLIN( 492)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_0==HX_("streaming",62,c8,22,b6)) ){
HXLINE( 490)				numericType = 1;
HXDLIN( 490)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_0==HX_("watching",f3,91,34,ff)) ){
HXLINE( 494)				numericType = 3;
HXDLIN( 494)				goto _hx_goto_23;
            			}
            			_hx_goto_23:;
HXLINE( 501)			data =  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("afk",e6,f3,49,00),afk)
            					->setFixed(1,HX_("status",32,e7,fb,05),status)
            					->setFixed(2,HX_("activities",ed,b3,e8,58),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("name",4b,72,ff,48),presence)
            						->setFixed(1,HX_("type",ba,f2,08,4d),numericType))))
            					->setFixed(3,HX_("since",ba,eb,cf,7c),null())))
            				->setFixed(1,HX_("op",21,61,00,00),3));
            		}
HXLINE( 517)		status = status.toLowerCase();
HXLINE( 518)		this->status = status.toLowerCase();
HXLINE( 519)		this->presence = presence;
HXLINE( 520)		this->presenceType = numericType;
HXLINE( 521)		this->afk = ( (bool)(afk) );
HXLINE( 522)		this->presenceArray = ::cpp::VirtualArray_obj::__new(5)->init(0,status)->init(1,type)->init(2,presence)->init(3,afk)->init(4,numericType);
HXLINE( 524)		 ::haxe::ws::WebSocket _hx_tmp5 = this->ws;
HXDLIN( 524)		 ::Dynamic replacer = null();
HXDLIN( 524)		::String space = null();
HXDLIN( 524)		_hx_tmp5->send(::haxe::format::JsonPrinter_obj::print(data,replacer,space));
            	}


HX_DEFINE_DYNAMIC_FUNC4(DiscordClient_obj,changeStatus,(void))

void DiscordClient_obj::changePresence(::String type,::String status){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_534_changePresence)
HXLINE( 535)		bool _hx_tmp;
HXDLIN( 535)		bool _hx_tmp1;
HXDLIN( 535)		bool _hx_tmp2;
HXDLIN( 535)		bool _hx_tmp3;
HXDLIN( 535)		bool _hx_tmp4;
HXDLIN( 535)		if ((type != HX_("game",f2,f3,5e,44))) {
HXLINE( 535)			_hx_tmp4 = (type != HX_("streaming",62,c8,22,b6));
            		}
            		else {
HXLINE( 535)			_hx_tmp4 = false;
            		}
HXDLIN( 535)		if (_hx_tmp4) {
HXLINE( 535)			_hx_tmp3 = (type != HX_("listening",fb,6a,91,f3));
            		}
            		else {
HXLINE( 535)			_hx_tmp3 = false;
            		}
HXDLIN( 535)		if (_hx_tmp3) {
HXLINE( 535)			_hx_tmp2 = (type != HX_("watching",f3,91,34,ff));
            		}
            		else {
HXLINE( 535)			_hx_tmp2 = false;
            		}
HXDLIN( 535)		if (_hx_tmp2) {
HXLINE( 535)			_hx_tmp1 = (type != HX_("custom",b1,87,92,3f));
            		}
            		else {
HXLINE( 535)			_hx_tmp1 = false;
            		}
HXDLIN( 535)		if (_hx_tmp1) {
HXLINE( 535)			_hx_tmp = (type != HX_("competing",64,74,4c,51));
            		}
            		else {
HXLINE( 535)			_hx_tmp = false;
            		}
HXDLIN( 535)		if (_hx_tmp) {
HXLINE( 537)			HX_STACK_DO_THROW(((HX_("Invalid type: ",09,b6,ae,24) + type) + HX_(" / The only types that exists are: game, streaming, watching, custom, competing",7c,73,37,2d)));
            		}
HXLINE( 540)		int numericType = 0;
HXLINE( 542)		::String _hx_switch_0 = type.toLowerCase();
            		if (  (_hx_switch_0==HX_("competing",64,74,4c,51)) ){
HXLINE( 555)			numericType = 5;
HXDLIN( 555)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("custom",b1,87,92,3f)) ){
HXLINE( 553)			numericType = 4;
HXDLIN( 553)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("game",f2,f3,5e,44)) ){
HXLINE( 545)			numericType = 0;
HXDLIN( 545)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("listening",fb,6a,91,f3)) ){
HXLINE( 549)			numericType = 2;
HXDLIN( 549)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("streaming",62,c8,22,b6)) ){
HXLINE( 547)			numericType = 1;
HXDLIN( 547)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("watching",f3,91,34,ff)) ){
HXLINE( 551)			numericType = 3;
HXDLIN( 551)			goto _hx_goto_25;
            		}
            		_hx_goto_25:;
HXLINE( 573)		 ::haxe::ws::WebSocket _hx_tmp5 = this->ws;
HXDLIN( 573)		 ::Dynamic replacer = null();
HXDLIN( 573)		::String space = null();
HXDLIN( 573)		_hx_tmp5->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("afk",e6,f3,49,00),false)
            				->setFixed(1,HX_("status",32,e7,fb,05),null())
            				->setFixed(2,HX_("activities",ed,b3,e8,58),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("name",4b,72,ff,48),status)
            					->setFixed(1,HX_("type",ba,f2,08,4d),numericType))))
            				->setFixed(3,HX_("since",ba,eb,cf,7c),null())))
            			->setFixed(1,HX_("op",21,61,00,00),3)),replacer,space));
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiscordClient_obj,changePresence,(void))

 ::hxdiscord::VoiceClient DiscordClient_obj::createVoiceConnection(::String guild_id,::String channel_id, ::Dynamic __o_self_mute, ::Dynamic __o_self_deaf){
            		 ::Dynamic self_mute = __o_self_mute;
            		if (::hx::IsNull(__o_self_mute)) self_mute = false;
            		 ::Dynamic self_deaf = __o_self_deaf;
            		if (::hx::IsNull(__o_self_deaf)) self_deaf = false;
            	HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_576_createVoiceConnection)
HXLINE( 577)		 ::hxdiscord::VoiceClient client =  ::hxdiscord::VoiceClient_obj::__alloc( HX_CTX ,guild_id,channel_id,this->user->id);
HXLINE( 578)		this->currentVoiceClients->push(client);
HXLINE( 588)		 ::haxe::ws::WebSocket _hx_tmp = this->ws;
HXDLIN( 588)		 ::Dynamic replacer = null();
HXDLIN( 588)		::String space = null();
HXDLIN( 588)		_hx_tmp->send(::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("d",64,00,00,00), ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("self_deaf",79,83,45,9c),false)
            				->setFixed(1,HX_("self_mute",ac,a3,44,a2),false)
            				->setFixed(2,HX_("channel_id",17,0d,9b,03),channel_id)
            				->setFixed(3,HX_("guild_id",27,82,bc,71),guild_id)))
            			->setFixed(1,HX_("op",21,61,00,00),4)),replacer,space));
HXLINE( 589)		return client;
            	}


HX_DEFINE_DYNAMIC_FUNC4(DiscordClient_obj,createVoiceConnection,return )

 ::hxdiscord::types::Interaction DiscordClient_obj::nInteraction( ::Dynamic ins, ::Dynamic d, ::Dynamic pj){
            	HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_594_nInteraction)
HXLINE( 603)		ins->__SetField(HX_("options",5e,33,fe,df), ::Dynamic(d->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("options",5e,33,fe,df),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 604)		ins->__SetField(HX_("name",4b,72,ff,48), ::Dynamic(d->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 605)		ins->__SetField(HX_("intId",aa,a6,20,be),d->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 606)		ins->__SetField(HX_("token",f9,82,2b,14),d->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 607)		if (::hxdiscord::DiscordClient_obj::debug) {
HXLINE( 609)			::haxe::Log_obj::trace( ::Dynamic(d->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic)),::hx::SourceInfo(HX_("hxdiscord/DiscordClient.hx",3a,64,e3,9f),609,HX_("hxdiscord.DiscordClient",a5,05,75,b5),HX_("nInteraction",04,ea,cc,60)));
            		}
HXLINE( 612)		return  ::hxdiscord::types::Interaction_obj::__alloc( HX_CTX ,ins,::hx::ObjectPtr<OBJ_>(this),pj);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DiscordClient_obj,nInteraction,return )

 ::hxdiscord::types::Message DiscordClient_obj::nMessage( ::Dynamic ms, ::Dynamic d){
            	HX_GC_STACKFRAME(&_hx_pos_d9300f7a60363c8c_616_nMessage)
HXLINE( 617)		 ::hxdiscord::types::User daUser =  ::hxdiscord::types::User_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),d);
HXLINE( 618)		daUser->username = ( (::String)( ::Dynamic(d->__Field(HX_("author",8b,ea,7b,73),::hx::paccDynamic))->__Field(HX_("username",16,86,eb,20),::hx::paccDynamic)) );
HXLINE( 619)		daUser->public_flags = ( (int)( ::Dynamic(d->__Field(HX_("author",8b,ea,7b,73),::hx::paccDynamic))->__Field(HX_("public_flags",f1,57,b2,cc),::hx::paccDynamic)) );
HXLINE( 620)		daUser->id = ( (::String)( ::Dynamic(d->__Field(HX_("author",8b,ea,7b,73),::hx::paccDynamic))->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE( 621)		daUser->discriminator = ( (::String)( ::Dynamic(d->__Field(HX_("author",8b,ea,7b,73),::hx::paccDynamic))->__Field(HX_("discriminator",9c,72,43,23),::hx::paccDynamic)) );
HXLINE( 622)		daUser->avatar_decoration = ( (::String)( ::Dynamic(d->__Field(HX_("author",8b,ea,7b,73),::hx::paccDynamic))->__Field(HX_("discriminator",9c,72,43,23),::hx::paccDynamic)) );
HXLINE( 623)		daUser->avatar = ( (::String)( ::Dynamic(d->__Field(HX_("author",8b,ea,7b,73),::hx::paccDynamic))->__Field(HX_("avatar",19,80,5c,fa),::hx::paccDynamic)) );
HXLINE( 626)		 ::hxdiscord::types::Message message =  ::hxdiscord::types::Message_obj::__alloc( HX_CTX ,ms,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 627)		message->author = daUser;
HXLINE( 628)		return message;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiscordClient_obj,nMessage,return )

HX_BEGIN_DEFAULT_FUNC(__default_onInteractionCreate,DiscordClient_obj)
void _hx_run( ::hxdiscord::types::Interaction i){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_636___default_onInteractionCreate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onReady,DiscordClient_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_645___default_onReady)
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onResumed,DiscordClient_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_654___default_onResumed)
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onMessageCreate,DiscordClient_obj)
void _hx_run( ::hxdiscord::types::Message m){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_663___default_onMessageCreate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onThreadMemberUpdate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_672___default_onThreadMemberUpdate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onThreadMembersUpdate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_681___default_onThreadMembersUpdate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildCreate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_689___default_onGuildCreate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildUpdate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_698___default_onGuildUpdate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildDelete,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_706___default_onGuildDelete)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildBanAdd,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_715___default_onGuildBanAdd)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildBanRemove,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_724___default_onGuildBanRemove)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildAuditLogEntryCreate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_733___default_onGuildAuditLogEntryCreate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildMemberAdd,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_742___default_onGuildMemberAdd)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildMemberRemove,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_751___default_onGuildMemberRemove)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onGuildMemberUpdate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_760___default_onGuildMemberUpdate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onChannelCreate,DiscordClient_obj)
void _hx_run( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_769___default_onChannelCreate)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

::String DiscordClient_obj::token;

bool DiscordClient_obj::debug;

::String DiscordClient_obj::accountId;

::String DiscordClient_obj::authHeader;


void DiscordClient_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,DiscordClient_obj *_hx_obj) {
	if (!_hx_obj->onChannelCreate.mPtr) _hx_obj->onChannelCreate = new __default_onChannelCreate(_hx_obj);
	if (!_hx_obj->onGuildMemberUpdate.mPtr) _hx_obj->onGuildMemberUpdate = new __default_onGuildMemberUpdate(_hx_obj);
	if (!_hx_obj->onGuildMemberRemove.mPtr) _hx_obj->onGuildMemberRemove = new __default_onGuildMemberRemove(_hx_obj);
	if (!_hx_obj->onGuildMemberAdd.mPtr) _hx_obj->onGuildMemberAdd = new __default_onGuildMemberAdd(_hx_obj);
	if (!_hx_obj->onGuildAuditLogEntryCreate.mPtr) _hx_obj->onGuildAuditLogEntryCreate = new __default_onGuildAuditLogEntryCreate(_hx_obj);
	if (!_hx_obj->onGuildBanRemove.mPtr) _hx_obj->onGuildBanRemove = new __default_onGuildBanRemove(_hx_obj);
	if (!_hx_obj->onGuildBanAdd.mPtr) _hx_obj->onGuildBanAdd = new __default_onGuildBanAdd(_hx_obj);
	if (!_hx_obj->onGuildDelete.mPtr) _hx_obj->onGuildDelete = new __default_onGuildDelete(_hx_obj);
	if (!_hx_obj->onGuildUpdate.mPtr) _hx_obj->onGuildUpdate = new __default_onGuildUpdate(_hx_obj);
	if (!_hx_obj->onGuildCreate.mPtr) _hx_obj->onGuildCreate = new __default_onGuildCreate(_hx_obj);
	if (!_hx_obj->onThreadMembersUpdate.mPtr) _hx_obj->onThreadMembersUpdate = new __default_onThreadMembersUpdate(_hx_obj);
	if (!_hx_obj->onThreadMemberUpdate.mPtr) _hx_obj->onThreadMemberUpdate = new __default_onThreadMemberUpdate(_hx_obj);
	if (!_hx_obj->onMessageCreate.mPtr) _hx_obj->onMessageCreate = new __default_onMessageCreate(_hx_obj);
	if (!_hx_obj->onResumed.mPtr) _hx_obj->onResumed = new __default_onResumed(_hx_obj);
	if (!_hx_obj->onReady.mPtr) _hx_obj->onReady = new __default_onReady(_hx_obj);
	if (!_hx_obj->onInteractionCreate.mPtr) _hx_obj->onInteractionCreate = new __default_onInteractionCreate(_hx_obj);
}
::hx::ObjectPtr< DiscordClient_obj > DiscordClient_obj::__new(::String _token,::Array< int > intents, ::Dynamic _debug) {
	::hx::ObjectPtr< DiscordClient_obj > __this = new DiscordClient_obj();
	__this->__construct(_token,intents,_debug);
	return __this;
}

::hx::ObjectPtr< DiscordClient_obj > DiscordClient_obj::__alloc(::hx::Ctx *_hx_ctx,::String _token,::Array< int > intents, ::Dynamic _debug) {
	DiscordClient_obj *__this = (DiscordClient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiscordClient_obj), true, "hxdiscord.DiscordClient"));
	*(void **)__this = DiscordClient_obj::_hx_vtable;
	hxdiscord::DiscordClient_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(_token,intents,_debug);
	return __this;
}

DiscordClient_obj::DiscordClient_obj()
{
	onChannelCreate = new __default_onChannelCreate(this);
	onGuildMemberUpdate = new __default_onGuildMemberUpdate(this);
	onGuildMemberRemove = new __default_onGuildMemberRemove(this);
	onGuildMemberAdd = new __default_onGuildMemberAdd(this);
	onGuildAuditLogEntryCreate = new __default_onGuildAuditLogEntryCreate(this);
	onGuildBanRemove = new __default_onGuildBanRemove(this);
	onGuildBanAdd = new __default_onGuildBanAdd(this);
	onGuildDelete = new __default_onGuildDelete(this);
	onGuildUpdate = new __default_onGuildUpdate(this);
	onGuildCreate = new __default_onGuildCreate(this);
	onThreadMembersUpdate = new __default_onThreadMembersUpdate(this);
	onThreadMemberUpdate = new __default_onThreadMemberUpdate(this);
	onMessageCreate = new __default_onMessageCreate(this);
	onResumed = new __default_onResumed(this);
	onReady = new __default_onReady(this);
	onInteractionCreate = new __default_onInteractionCreate(this);
}

void DiscordClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DiscordClient);
	HX_MARK_MEMBER_NAME(ws,"ws");
	HX_MARK_MEMBER_NAME(hb_timer,"hb_timer");
	HX_MARK_MEMBER_NAME(status,"status");
	HX_MARK_MEMBER_NAME(canResume,"canResume");
	HX_MARK_MEMBER_NAME(receivedHelloOC,"receivedHelloOC");
	HX_MARK_MEMBER_NAME(ignore,"ignore");
	HX_MARK_MEMBER_NAME(sequence,"sequence");
	HX_MARK_MEMBER_NAME(showWsLogsVar,"showWsLogsVar");
	HX_MARK_MEMBER_NAME(connectedVoiceClients,"connectedVoiceClients");
	HX_MARK_MEMBER_NAME(session,"session");
	HX_MARK_MEMBER_NAME(session_type,"session_type");
	HX_MARK_MEMBER_NAME(session_id,"session_id");
	HX_MARK_MEMBER_NAME(last_heartbeat,"last_heartbeat");
	HX_MARK_MEMBER_NAME(interval,"interval");
	HX_MARK_MEMBER_NAME(editThis,"editThis");
	HX_MARK_MEMBER_NAME(heartbeat_interval,"heartbeat_interval");
	HX_MARK_MEMBER_NAME(cache,"cache");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(alive,"alive");
	HX_MARK_MEMBER_NAME(readySent,"readySent");
	HX_MARK_MEMBER_NAME(verified,"verified");
	HX_MARK_MEMBER_NAME(username,"username");
	HX_MARK_MEMBER_NAME(mfa_enabled,"mfa_enabled");
	HX_MARK_MEMBER_NAME(user,"user");
	HX_MARK_MEMBER_NAME(ticked,"ticked");
	HX_MARK_MEMBER_NAME(accId,"accId");
	HX_MARK_MEMBER_NAME(flags,"flags");
	HX_MARK_MEMBER_NAME(email,"email");
	HX_MARK_MEMBER_NAME(resume_gateway_url,"resume_gateway_url");
	HX_MARK_MEMBER_NAME(discriminator,"discriminator");
	HX_MARK_MEMBER_NAME(bot,"bot");
	HX_MARK_MEMBER_NAME(avatar,"avatar");
	HX_MARK_MEMBER_NAME(presence,"presence");
	HX_MARK_MEMBER_NAME(presenceType,"presenceType");
	HX_MARK_MEMBER_NAME(presenceArray,"presenceArray");
	HX_MARK_MEMBER_NAME(afk,"afk");
	HX_MARK_MEMBER_NAME(currentVoiceClients,"currentVoiceClients");
	HX_MARK_MEMBER_NAME(intentsNumber,"intentsNumber");
	HX_MARK_MEMBER_NAME(noConnection,"noConnection");
	HX_MARK_MEMBER_NAME(onInteractionCreate,"onInteractionCreate");
	HX_MARK_MEMBER_NAME(onReady,"onReady");
	HX_MARK_MEMBER_NAME(onResumed,"onResumed");
	HX_MARK_MEMBER_NAME(onMessageCreate,"onMessageCreate");
	HX_MARK_MEMBER_NAME(onThreadMemberUpdate,"onThreadMemberUpdate");
	HX_MARK_MEMBER_NAME(onThreadMembersUpdate,"onThreadMembersUpdate");
	HX_MARK_MEMBER_NAME(onGuildCreate,"onGuildCreate");
	HX_MARK_MEMBER_NAME(onGuildUpdate,"onGuildUpdate");
	HX_MARK_MEMBER_NAME(onGuildDelete,"onGuildDelete");
	HX_MARK_MEMBER_NAME(onGuildBanAdd,"onGuildBanAdd");
	HX_MARK_MEMBER_NAME(onGuildBanRemove,"onGuildBanRemove");
	HX_MARK_MEMBER_NAME(onGuildAuditLogEntryCreate,"onGuildAuditLogEntryCreate");
	HX_MARK_MEMBER_NAME(onGuildMemberAdd,"onGuildMemberAdd");
	HX_MARK_MEMBER_NAME(onGuildMemberRemove,"onGuildMemberRemove");
	HX_MARK_MEMBER_NAME(onGuildMemberUpdate,"onGuildMemberUpdate");
	HX_MARK_MEMBER_NAME(onChannelCreate,"onChannelCreate");
	HX_MARK_END_CLASS();
}

void DiscordClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ws,"ws");
	HX_VISIT_MEMBER_NAME(hb_timer,"hb_timer");
	HX_VISIT_MEMBER_NAME(status,"status");
	HX_VISIT_MEMBER_NAME(canResume,"canResume");
	HX_VISIT_MEMBER_NAME(receivedHelloOC,"receivedHelloOC");
	HX_VISIT_MEMBER_NAME(ignore,"ignore");
	HX_VISIT_MEMBER_NAME(sequence,"sequence");
	HX_VISIT_MEMBER_NAME(showWsLogsVar,"showWsLogsVar");
	HX_VISIT_MEMBER_NAME(connectedVoiceClients,"connectedVoiceClients");
	HX_VISIT_MEMBER_NAME(session,"session");
	HX_VISIT_MEMBER_NAME(session_type,"session_type");
	HX_VISIT_MEMBER_NAME(session_id,"session_id");
	HX_VISIT_MEMBER_NAME(last_heartbeat,"last_heartbeat");
	HX_VISIT_MEMBER_NAME(interval,"interval");
	HX_VISIT_MEMBER_NAME(editThis,"editThis");
	HX_VISIT_MEMBER_NAME(heartbeat_interval,"heartbeat_interval");
	HX_VISIT_MEMBER_NAME(cache,"cache");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(alive,"alive");
	HX_VISIT_MEMBER_NAME(readySent,"readySent");
	HX_VISIT_MEMBER_NAME(verified,"verified");
	HX_VISIT_MEMBER_NAME(username,"username");
	HX_VISIT_MEMBER_NAME(mfa_enabled,"mfa_enabled");
	HX_VISIT_MEMBER_NAME(user,"user");
	HX_VISIT_MEMBER_NAME(ticked,"ticked");
	HX_VISIT_MEMBER_NAME(accId,"accId");
	HX_VISIT_MEMBER_NAME(flags,"flags");
	HX_VISIT_MEMBER_NAME(email,"email");
	HX_VISIT_MEMBER_NAME(resume_gateway_url,"resume_gateway_url");
	HX_VISIT_MEMBER_NAME(discriminator,"discriminator");
	HX_VISIT_MEMBER_NAME(bot,"bot");
	HX_VISIT_MEMBER_NAME(avatar,"avatar");
	HX_VISIT_MEMBER_NAME(presence,"presence");
	HX_VISIT_MEMBER_NAME(presenceType,"presenceType");
	HX_VISIT_MEMBER_NAME(presenceArray,"presenceArray");
	HX_VISIT_MEMBER_NAME(afk,"afk");
	HX_VISIT_MEMBER_NAME(currentVoiceClients,"currentVoiceClients");
	HX_VISIT_MEMBER_NAME(intentsNumber,"intentsNumber");
	HX_VISIT_MEMBER_NAME(noConnection,"noConnection");
	HX_VISIT_MEMBER_NAME(onInteractionCreate,"onInteractionCreate");
	HX_VISIT_MEMBER_NAME(onReady,"onReady");
	HX_VISIT_MEMBER_NAME(onResumed,"onResumed");
	HX_VISIT_MEMBER_NAME(onMessageCreate,"onMessageCreate");
	HX_VISIT_MEMBER_NAME(onThreadMemberUpdate,"onThreadMemberUpdate");
	HX_VISIT_MEMBER_NAME(onThreadMembersUpdate,"onThreadMembersUpdate");
	HX_VISIT_MEMBER_NAME(onGuildCreate,"onGuildCreate");
	HX_VISIT_MEMBER_NAME(onGuildUpdate,"onGuildUpdate");
	HX_VISIT_MEMBER_NAME(onGuildDelete,"onGuildDelete");
	HX_VISIT_MEMBER_NAME(onGuildBanAdd,"onGuildBanAdd");
	HX_VISIT_MEMBER_NAME(onGuildBanRemove,"onGuildBanRemove");
	HX_VISIT_MEMBER_NAME(onGuildAuditLogEntryCreate,"onGuildAuditLogEntryCreate");
	HX_VISIT_MEMBER_NAME(onGuildMemberAdd,"onGuildMemberAdd");
	HX_VISIT_MEMBER_NAME(onGuildMemberRemove,"onGuildMemberRemove");
	HX_VISIT_MEMBER_NAME(onGuildMemberUpdate,"onGuildMemberUpdate");
	HX_VISIT_MEMBER_NAME(onChannelCreate,"onChannelCreate");
}

::hx::Val DiscordClient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ws") ) { return ::hx::Val( ws ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bot") ) { return ::hx::Val( bot ); }
		if (HX_FIELD_EQ(inName,"afk") ) { return ::hx::Val( afk ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"user") ) { return ::hx::Val( user ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return ::hx::Val( tick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { return ::hx::Val( cache ); }
		if (HX_FIELD_EQ(inName,"alive") ) { return ::hx::Val( alive ); }
		if (HX_FIELD_EQ(inName,"accId") ) { return ::hx::Val( accId ); }
		if (HX_FIELD_EQ(inName,"flags") ) { return ::hx::Val( flags ); }
		if (HX_FIELD_EQ(inName,"email") ) { return ::hx::Val( email ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { return ::hx::Val( status ); }
		if (HX_FIELD_EQ(inName,"ignore") ) { return ::hx::Val( ignore ); }
		if (HX_FIELD_EQ(inName,"ticked") ) { return ::hx::Val( ticked ); }
		if (HX_FIELD_EQ(inName,"avatar") ) { return ::hx::Val( avatar ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"session") ) { return ::hx::Val( session ); }
		if (HX_FIELD_EQ(inName,"connect") ) { return ::hx::Val( connect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onReady") ) { return ::hx::Val( onReady ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hb_timer") ) { return ::hx::Val( hb_timer ); }
		if (HX_FIELD_EQ(inName,"sequence") ) { return ::hx::Val( sequence ); }
		if (HX_FIELD_EQ(inName,"interval") ) { return ::hx::Val( interval ); }
		if (HX_FIELD_EQ(inName,"editThis") ) { return ::hx::Val( editThis ); }
		if (HX_FIELD_EQ(inName,"verified") ) { return ::hx::Val( verified ); }
		if (HX_FIELD_EQ(inName,"username") ) { return ::hx::Val( username ); }
		if (HX_FIELD_EQ(inName,"presence") ) { return ::hx::Val( presence ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"nMessage") ) { return ::hx::Val( nMessage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"canResume") ) { return ::hx::Val( canResume ); }
		if (HX_FIELD_EQ(inName,"readySent") ) { return ::hx::Val( readySent ); }
		if (HX_FIELD_EQ(inName,"onResumed") ) { return ::hx::Val( onResumed ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"session_id") ) { return ::hx::Val( session_id ); }
		if (HX_FIELD_EQ(inName,"showWsLogs") ) { return ::hx::Val( showWsLogs_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideWsLogs") ) { return ::hx::Val( hideWsLogs_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mfa_enabled") ) { return ::hx::Val( mfa_enabled ); }
		if (HX_FIELD_EQ(inName,"causeResume") ) { return ::hx::Val( causeResume_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"session_type") ) { return ::hx::Val( session_type ); }
		if (HX_FIELD_EQ(inName,"presenceType") ) { return ::hx::Val( presenceType ); }
		if (HX_FIELD_EQ(inName,"noConnection") ) { return ::hx::Val( noConnection ); }
		if (HX_FIELD_EQ(inName,"changeStatus") ) { return ::hx::Val( changeStatus_dyn() ); }
		if (HX_FIELD_EQ(inName,"nInteraction") ) { return ::hx::Val( nInteraction_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"showWsLogsVar") ) { return ::hx::Val( showWsLogsVar ); }
		if (HX_FIELD_EQ(inName,"discriminator") ) { return ::hx::Val( discriminator ); }
		if (HX_FIELD_EQ(inName,"presenceArray") ) { return ::hx::Val( presenceArray ); }
		if (HX_FIELD_EQ(inName,"intentsNumber") ) { return ::hx::Val( intentsNumber ); }
		if (HX_FIELD_EQ(inName,"sendHeartbeat") ) { return ::hx::Val( sendHeartbeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGuildCreate") ) { return ::hx::Val( onGuildCreate ); }
		if (HX_FIELD_EQ(inName,"onGuildUpdate") ) { return ::hx::Val( onGuildUpdate ); }
		if (HX_FIELD_EQ(inName,"onGuildDelete") ) { return ::hx::Val( onGuildDelete ); }
		if (HX_FIELD_EQ(inName,"onGuildBanAdd") ) { return ::hx::Val( onGuildBanAdd ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"last_heartbeat") ) { return ::hx::Val( last_heartbeat ); }
		if (HX_FIELD_EQ(inName,"changePresence") ) { return ::hx::Val( changePresence_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"receivedHelloOC") ) { return ::hx::Val( receivedHelloOC ); }
		if (HX_FIELD_EQ(inName,"onMessageCreate") ) { return ::hx::Val( onMessageCreate ); }
		if (HX_FIELD_EQ(inName,"onChannelCreate") ) { return ::hx::Val( onChannelCreate ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"incomingMessages") ) { return ::hx::Val( incomingMessages_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGuildBanRemove") ) { return ::hx::Val( onGuildBanRemove ); }
		if (HX_FIELD_EQ(inName,"onGuildMemberAdd") ) { return ::hx::Val( onGuildMemberAdd ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"heartbeat_interval") ) { return ::hx::Val( heartbeat_interval ); }
		if (HX_FIELD_EQ(inName,"resume_gateway_url") ) { return ::hx::Val( resume_gateway_url ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"currentVoiceClients") ) { return ::hx::Val( currentVoiceClients ); }
		if (HX_FIELD_EQ(inName,"onInteractionCreate") ) { return ::hx::Val( onInteractionCreate ); }
		if (HX_FIELD_EQ(inName,"onGuildMemberRemove") ) { return ::hx::Val( onGuildMemberRemove ); }
		if (HX_FIELD_EQ(inName,"onGuildMemberUpdate") ) { return ::hx::Val( onGuildMemberUpdate ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onThreadMemberUpdate") ) { return ::hx::Val( onThreadMemberUpdate ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"connectedVoiceClients") ) { return ::hx::Val( connectedVoiceClients ); }
		if (HX_FIELD_EQ(inName,"createVoiceConnection") ) { return ::hx::Val( createVoiceConnection_dyn() ); }
		if (HX_FIELD_EQ(inName,"onThreadMembersUpdate") ) { return ::hx::Val( onThreadMembersUpdate ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"setInteractionCommands") ) { return ::hx::Val( setInteractionCommands_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onGuildAuditLogEntryCreate") ) { return ::hx::Val( onGuildAuditLogEntryCreate ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DiscordClient_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"token") ) { outValue = ( token ); return true; }
		if (HX_FIELD_EQ(inName,"debug") ) { outValue = ( debug ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"accountId") ) { outValue = ( accountId ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"authHeader") ) { outValue = ( authHeader ); return true; }
	}
	return false;
}

::hx::Val DiscordClient_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ws") ) { ws=inValue.Cast<  ::haxe::ws::WebSocket >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bot") ) { bot=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"afk") ) { afk=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::hxdiscord::BotData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast<  ::hxdiscord::types::User >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=inValue.Cast<  ::hxdiscord::cache::CachedData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alive") ) { alive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"accId") ) { accId=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flags") ) { flags=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"email") ) { email=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { status=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignore") ) { ignore=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ticked") ) { ticked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"avatar") ) { avatar=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"session") ) { session=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onReady") ) { onReady=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hb_timer") ) { hb_timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sequence") ) { sequence=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interval") ) { interval=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"editThis") ) { editThis=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verified") ) { verified=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"username") ) { username=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"presence") ) { presence=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"canResume") ) { canResume=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"readySent") ) { readySent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onResumed") ) { onResumed=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"session_id") ) { session_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mfa_enabled") ) { mfa_enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"session_type") ) { session_type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"presenceType") ) { presenceType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noConnection") ) { noConnection=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"showWsLogsVar") ) { showWsLogsVar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discriminator") ) { discriminator=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"presenceArray") ) { presenceArray=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intentsNumber") ) { intentsNumber=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildCreate") ) { onGuildCreate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildUpdate") ) { onGuildUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildDelete") ) { onGuildDelete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildBanAdd") ) { onGuildBanAdd=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"last_heartbeat") ) { last_heartbeat=inValue.Cast<  ::Date >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"receivedHelloOC") ) { receivedHelloOC=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMessageCreate") ) { onMessageCreate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onChannelCreate") ) { onChannelCreate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onGuildBanRemove") ) { onGuildBanRemove=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildMemberAdd") ) { onGuildMemberAdd=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"heartbeat_interval") ) { heartbeat_interval=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resume_gateway_url") ) { resume_gateway_url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"currentVoiceClients") ) { currentVoiceClients=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onInteractionCreate") ) { onInteractionCreate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildMemberRemove") ) { onGuildMemberRemove=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onGuildMemberUpdate") ) { onGuildMemberUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onThreadMemberUpdate") ) { onThreadMemberUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"connectedVoiceClients") ) { connectedVoiceClients=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onThreadMembersUpdate") ) { onThreadMembersUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onGuildAuditLogEntryCreate") ) { onGuildAuditLogEntryCreate=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DiscordClient_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"token") ) { token=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"debug") ) { debug=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"accountId") ) { accountId=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"authHeader") ) { authHeader=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void DiscordClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ws",1c,68,00,00));
	outFields->push(HX_("hb_timer",80,d9,d2,33));
	outFields->push(HX_("status",32,e7,fb,05));
	outFields->push(HX_("canResume",dd,bd,ca,5a));
	outFields->push(HX_("receivedHelloOC",85,19,f9,a9));
	outFields->push(HX_("ignore",12,b9,c8,92));
	outFields->push(HX_("sequence",41,1e,ed,e8));
	outFields->push(HX_("showWsLogsVar",3f,45,86,04));
	outFields->push(HX_("connectedVoiceClients",9f,ec,43,b1));
	outFields->push(HX_("session",56,17,98,93));
	outFields->push(HX_("session_type",83,9f,7f,fd));
	outFields->push(HX_("session_id",64,14,71,28));
	outFields->push(HX_("last_heartbeat",93,09,52,7d));
	outFields->push(HX_("interval",45,79,7c,28));
	outFields->push(HX_("editThis",88,c9,12,cd));
	outFields->push(HX_("heartbeat_interval",28,15,ef,34));
	outFields->push(HX_("cache",42,9a,14,41));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("alive",cd,63,91,21));
	outFields->push(HX_("readySent",5b,c7,5f,20));
	outFields->push(HX_("verified",08,48,b6,12));
	outFields->push(HX_("username",16,86,eb,20));
	outFields->push(HX_("mfa_enabled",ea,94,c1,21));
	outFields->push(HX_("user",4b,92,ad,4d));
	outFields->push(HX_("ticked",fc,6c,3a,18));
	outFields->push(HX_("accId",7c,c3,99,1b));
	outFields->push(HX_("flags",47,2b,8c,02));
	outFields->push(HX_("email",1c,cf,ce,6f));
	outFields->push(HX_("resume_gateway_url",a2,69,d4,1e));
	outFields->push(HX_("discriminator",9c,72,43,23));
	outFields->push(HX_("bot",07,be,4a,00));
	outFields->push(HX_("avatar",19,80,5c,fa));
	outFields->push(HX_("presence",3b,52,d7,66));
	outFields->push(HX_("presenceType",95,aa,6e,2a));
	outFields->push(HX_("presenceArray",5e,95,2a,01));
	outFields->push(HX_("afk",e6,f3,49,00));
	outFields->push(HX_("currentVoiceClients",0f,0e,19,2b));
	outFields->push(HX_("intentsNumber",c0,a0,28,31));
	outFields->push(HX_("noConnection",bf,3f,75,0c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DiscordClient_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ws::WebSocket */ ,(int)offsetof(DiscordClient_obj,ws),HX_("ws",1c,68,00,00)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(DiscordClient_obj,hb_timer),HX_("hb_timer",80,d9,d2,33)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,status),HX_("status",32,e7,fb,05)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,canResume),HX_("canResume",dd,bd,ca,5a)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,receivedHelloOC),HX_("receivedHelloOC",85,19,f9,a9)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,ignore),HX_("ignore",12,b9,c8,92)},
	{::hx::fsInt,(int)offsetof(DiscordClient_obj,sequence),HX_("sequence",41,1e,ed,e8)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,showWsLogsVar),HX_("showWsLogsVar",3f,45,86,04)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DiscordClient_obj,connectedVoiceClients),HX_("connectedVoiceClients",9f,ec,43,b1)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,session),HX_("session",56,17,98,93)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,session_type),HX_("session_type",83,9f,7f,fd)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,session_id),HX_("session_id",64,14,71,28)},
	{::hx::fsObject /*  ::Date */ ,(int)offsetof(DiscordClient_obj,last_heartbeat),HX_("last_heartbeat",93,09,52,7d)},
	{::hx::fsInt,(int)offsetof(DiscordClient_obj,interval),HX_("interval",45,79,7c,28)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,editThis),HX_("editThis",88,c9,12,cd)},
	{::hx::fsInt,(int)offsetof(DiscordClient_obj,heartbeat_interval),HX_("heartbeat_interval",28,15,ef,34)},
	{::hx::fsObject /*  ::hxdiscord::cache::CachedData */ ,(int)offsetof(DiscordClient_obj,cache),HX_("cache",42,9a,14,41)},
	{::hx::fsObject /*  ::hxdiscord::BotData */ ,(int)offsetof(DiscordClient_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,alive),HX_("alive",cd,63,91,21)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,readySent),HX_("readySent",5b,c7,5f,20)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,verified),HX_("verified",08,48,b6,12)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,username),HX_("username",16,86,eb,20)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,mfa_enabled),HX_("mfa_enabled",ea,94,c1,21)},
	{::hx::fsObject /*  ::hxdiscord::types::User */ ,(int)offsetof(DiscordClient_obj,user),HX_("user",4b,92,ad,4d)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,ticked),HX_("ticked",fc,6c,3a,18)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,accId),HX_("accId",7c,c3,99,1b)},
	{::hx::fsInt,(int)offsetof(DiscordClient_obj,flags),HX_("flags",47,2b,8c,02)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,email),HX_("email",1c,cf,ce,6f)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,resume_gateway_url),HX_("resume_gateway_url",a2,69,d4,1e)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,discriminator),HX_("discriminator",9c,72,43,23)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,bot),HX_("bot",07,be,4a,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,avatar),HX_("avatar",19,80,5c,fa)},
	{::hx::fsString,(int)offsetof(DiscordClient_obj,presence),HX_("presence",3b,52,d7,66)},
	{::hx::fsInt,(int)offsetof(DiscordClient_obj,presenceType),HX_("presenceType",95,aa,6e,2a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(DiscordClient_obj,presenceArray),HX_("presenceArray",5e,95,2a,01)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,afk),HX_("afk",e6,f3,49,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DiscordClient_obj,currentVoiceClients),HX_("currentVoiceClients",0f,0e,19,2b)},
	{::hx::fsInt,(int)offsetof(DiscordClient_obj,intentsNumber),HX_("intentsNumber",c0,a0,28,31)},
	{::hx::fsBool,(int)offsetof(DiscordClient_obj,noConnection),HX_("noConnection",bf,3f,75,0c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onInteractionCreate),HX_("onInteractionCreate",4f,e8,fd,27)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onReady),HX_("onReady",c4,3e,f8,7c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onResumed),HX_("onResumed",b8,c6,02,43)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onMessageCreate),HX_("onMessageCreate",84,87,be,79)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onThreadMemberUpdate),HX_("onThreadMemberUpdate",ec,22,33,5a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onThreadMembersUpdate),HX_("onThreadMembersUpdate",b9,d4,28,91)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildCreate),HX_("onGuildCreate",30,82,c2,b3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildUpdate),HX_("onGuildUpdate",3d,a1,b8,be)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildDelete),HX_("onGuildDelete",5f,db,8b,a2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildBanAdd),HX_("onGuildBanAdd",c6,de,71,89)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildBanRemove),HX_("onGuildBanRemove",bf,64,2c,d9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildAuditLogEntryCreate),HX_("onGuildAuditLogEntryCreate",71,29,17,75)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildMemberAdd),HX_("onGuildMemberAdd",33,19,a1,0d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildMemberRemove),HX_("onGuildMemberRemove",72,ac,c9,7a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onGuildMemberUpdate),HX_("onGuildMemberUpdate",37,96,46,fd)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiscordClient_obj,onChannelCreate),HX_("onChannelCreate",80,b7,53,1b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DiscordClient_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &DiscordClient_obj::token,HX_("token",f9,82,2b,14)},
	{::hx::fsBool,(void *) &DiscordClient_obj::debug,HX_("debug",53,52,1f,d7)},
	{::hx::fsString,(void *) &DiscordClient_obj::accountId,HX_("accountId",e8,81,54,29)},
	{::hx::fsString,(void *) &DiscordClient_obj::authHeader,HX_("authHeader",15,db,b4,45)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DiscordClient_obj_sMemberFields[] = {
	HX_("ws",1c,68,00,00),
	HX_("hb_timer",80,d9,d2,33),
	HX_("status",32,e7,fb,05),
	HX_("canResume",dd,bd,ca,5a),
	HX_("receivedHelloOC",85,19,f9,a9),
	HX_("ignore",12,b9,c8,92),
	HX_("sequence",41,1e,ed,e8),
	HX_("showWsLogsVar",3f,45,86,04),
	HX_("connectedVoiceClients",9f,ec,43,b1),
	HX_("session",56,17,98,93),
	HX_("session_type",83,9f,7f,fd),
	HX_("session_id",64,14,71,28),
	HX_("last_heartbeat",93,09,52,7d),
	HX_("interval",45,79,7c,28),
	HX_("editThis",88,c9,12,cd),
	HX_("heartbeat_interval",28,15,ef,34),
	HX_("cache",42,9a,14,41),
	HX_("data",2a,56,63,42),
	HX_("alive",cd,63,91,21),
	HX_("readySent",5b,c7,5f,20),
	HX_("verified",08,48,b6,12),
	HX_("username",16,86,eb,20),
	HX_("mfa_enabled",ea,94,c1,21),
	HX_("user",4b,92,ad,4d),
	HX_("ticked",fc,6c,3a,18),
	HX_("accId",7c,c3,99,1b),
	HX_("flags",47,2b,8c,02),
	HX_("email",1c,cf,ce,6f),
	HX_("resume_gateway_url",a2,69,d4,1e),
	HX_("discriminator",9c,72,43,23),
	HX_("bot",07,be,4a,00),
	HX_("avatar",19,80,5c,fa),
	HX_("presence",3b,52,d7,66),
	HX_("presenceType",95,aa,6e,2a),
	HX_("presenceArray",5e,95,2a,01),
	HX_("afk",e6,f3,49,00),
	HX_("currentVoiceClients",0f,0e,19,2b),
	HX_("intentsNumber",c0,a0,28,31),
	HX_("noConnection",bf,3f,75,0c),
	HX_("sendHeartbeat",94,65,54,09),
	HX_("showWsLogs",88,16,92,67),
	HX_("hideWsLogs",0d,18,a3,95),
	HX_("tick",5d,c3,fc,4c),
	HX_("connect",ea,3b,80,15),
	HX_("setInteractionCommands",38,b0,ba,48),
	HX_("getValue",fb,8e,8f,91),
	HX_("incomingMessages",d2,2b,e9,a5),
	HX_("causeResume",f6,de,49,71),
	HX_("changeStatus",c2,a0,29,ed),
	HX_("changePresence",cb,8f,12,c0),
	HX_("createVoiceConnection",d4,78,c9,f2),
	HX_("nInteraction",04,ea,cc,60),
	HX_("nMessage",f9,66,0f,fb),
	HX_("onInteractionCreate",4f,e8,fd,27),
	HX_("onReady",c4,3e,f8,7c),
	HX_("onResumed",b8,c6,02,43),
	HX_("onMessageCreate",84,87,be,79),
	HX_("onThreadMemberUpdate",ec,22,33,5a),
	HX_("onThreadMembersUpdate",b9,d4,28,91),
	HX_("onGuildCreate",30,82,c2,b3),
	HX_("onGuildUpdate",3d,a1,b8,be),
	HX_("onGuildDelete",5f,db,8b,a2),
	HX_("onGuildBanAdd",c6,de,71,89),
	HX_("onGuildBanRemove",bf,64,2c,d9),
	HX_("onGuildAuditLogEntryCreate",71,29,17,75),
	HX_("onGuildMemberAdd",33,19,a1,0d),
	HX_("onGuildMemberRemove",72,ac,c9,7a),
	HX_("onGuildMemberUpdate",37,96,46,fd),
	HX_("onChannelCreate",80,b7,53,1b),
	::String(null()) };

static void DiscordClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DiscordClient_obj::token,"token");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::debug,"debug");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::accountId,"accountId");
	HX_MARK_MEMBER_NAME(DiscordClient_obj::authHeader,"authHeader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DiscordClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::token,"token");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::debug,"debug");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::accountId,"accountId");
	HX_VISIT_MEMBER_NAME(DiscordClient_obj::authHeader,"authHeader");
};

#endif

::hx::Class DiscordClient_obj::__mClass;

static ::String DiscordClient_obj_sStaticFields[] = {
	HX_("token",f9,82,2b,14),
	HX_("debug",53,52,1f,d7),
	HX_("accountId",e8,81,54,29),
	HX_("authHeader",15,db,b4,45),
	::String(null())
};

void DiscordClient_obj::__register()
{
	DiscordClient_obj _hx_dummy;
	DiscordClient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.DiscordClient",a5,05,75,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DiscordClient_obj::__GetStatic;
	__mClass->mSetStaticField = &DiscordClient_obj::__SetStatic;
	__mClass->mMarkFunc = DiscordClient_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DiscordClient_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DiscordClient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DiscordClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DiscordClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiscordClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiscordClient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DiscordClient_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_18_boot)
HXDLIN(  18)		token = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_50_boot)
HXDLIN(  50)		accountId = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9300f7a60363c8c_68_boot)
HXDLIN(  68)		authHeader = HX_("",00,00,00,00);
            	}
}

} // end namespace hxdiscord
