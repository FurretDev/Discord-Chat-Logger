// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_gateway_OpCode
#include <hxdiscord/gateway/OpCode.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_de829d77a0c6a4e6_6_checkOpCode,"hxdiscord.gateway.OpCode","checkOpCode",0x517b0932,"hxdiscord.gateway.OpCode.checkOpCode","hxdiscord/gateway/OpCode.hx",6,0xe54949f2)
namespace hxdiscord{
namespace gateway{

void OpCode_obj::__construct() { }

Dynamic OpCode_obj::__CreateEmpty() { return new OpCode_obj; }

void *OpCode_obj::_hx_vtable = 0;

Dynamic OpCode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OpCode_obj > _hx_result = new OpCode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OpCode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x22b8527e;
}

::String OpCode_obj::checkOpCode(int op){
            	HX_STACKFRAME(&_hx_pos_de829d77a0c6a4e6_6_checkOpCode)
HXLINE(   7)		::String opcode = HX_("",00,00,00,00);
HXLINE(   8)		switch((int)(op)){
            			case (int)0: {
HXLINE(  11)				opcode = HX_("dispatch",ba,ce,63,1e);
            			}
            			break;
            			case (int)1: {
HXLINE(  13)				opcode = HX_("heartbeat",fc,fb,d9,a4);
            			}
            			break;
            			case (int)2: {
HXLINE(  15)				opcode = HX_("identify",0c,39,2f,b9);
            			}
            			break;
            			case (int)3: {
HXLINE(  17)				opcode = HX_("presence update",4e,99,eb,42);
            			}
            			break;
            			case (int)4: {
HXLINE(  19)				opcode = HX_("voice state update",66,9f,46,c2);
            			}
            			break;
            			case (int)6: {
HXLINE(  21)				opcode = HX_("resume",ad,69,84,08);
            			}
            			break;
            			case (int)7: {
HXLINE(  23)				opcode = HX_("reconnect",97,04,e8,95);
            			}
            			break;
            			case (int)8: {
HXLINE(  25)				opcode = HX_("request guild members",db,74,9d,e1);
            			}
            			break;
            			case (int)9: {
HXLINE(  27)				opcode = HX_("invalid session",2d,85,84,2e);
            			}
            			break;
            			case (int)10: {
HXLINE(  29)				opcode = HX_("hello",12,33,c1,24);
            			}
            			break;
            			case (int)11: {
HXLINE(  31)				opcode = HX_("heartbeat ack",25,6f,5e,47);
            			}
            			break;
            		}
HXLINE(  33)		return opcode;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OpCode_obj,checkOpCode,return )


OpCode_obj::OpCode_obj()
{
}

bool OpCode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"checkOpCode") ) { outValue = checkOpCode_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OpCode_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *OpCode_obj_sStaticStorageInfo = 0;
#endif

::hx::Class OpCode_obj::__mClass;

static ::String OpCode_obj_sStaticFields[] = {
	HX_("checkOpCode",d6,b5,2d,ed),
	::String(null())
};

void OpCode_obj::__register()
{
	OpCode_obj _hx_dummy;
	OpCode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.gateway.OpCode",ca,19,43,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OpCode_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OpCode_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< OpCode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpCode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpCode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace gateway
