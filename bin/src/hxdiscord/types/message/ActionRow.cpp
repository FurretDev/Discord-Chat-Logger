// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_types_message_ActionRow
#include <hxdiscord/types/message/ActionRow.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7887fe3be24383e5_6_new,"hxdiscord.types.message.ActionRow","new",0x1e78ef68,"hxdiscord.types.message.ActionRow.new","hxdiscord/types/message/ActionRow.hx",6,0xf83a964b)
HX_LOCAL_STACK_FRAME(_hx_pos_7887fe3be24383e5_20_addComponent,"hxdiscord.types.message.ActionRow","addComponent",0x8abad254,"hxdiscord.types.message.ActionRow.addComponent","hxdiscord/types/message/ActionRow.hx",20,0xf83a964b)
namespace hxdiscord{
namespace types{
namespace message{

void ActionRow_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7887fe3be24383e5_6_new)
HXLINE(   8)		this->components = ::cpp::VirtualArray_obj::__new();
HXLINE(   7)		this->type = 1;
            	}

Dynamic ActionRow_obj::__CreateEmpty() { return new ActionRow_obj; }

void *ActionRow_obj::_hx_vtable = 0;

Dynamic ActionRow_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActionRow_obj > _hx_result = new ActionRow_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ActionRow_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4e2bb422;
}

void ActionRow_obj::addComponent( ::Dynamic comp){
            	HX_STACKFRAME(&_hx_pos_7887fe3be24383e5_20_addComponent)
HXDLIN(  20)		this->components->push(comp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ActionRow_obj,addComponent,(void))


ActionRow_obj::ActionRow_obj()
{
}

void ActionRow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActionRow);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(components,"components");
	HX_MARK_END_CLASS();
}

void ActionRow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(components,"components");
}

::hx::Val ActionRow_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"components") ) { return ::hx::Val( components ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addComponent") ) { return ::hx::Val( addComponent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ActionRow_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"components") ) { components=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActionRow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("components",16,b5,1e,5a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ActionRow_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ActionRow_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ActionRow_obj,components),HX_("components",16,b5,1e,5a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ActionRow_obj_sStaticStorageInfo = 0;
#endif

static ::String ActionRow_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("components",16,b5,1e,5a),
	HX_("addComponent",5c,12,a8,0e),
	::String(null()) };

::hx::Class ActionRow_obj::__mClass;

void ActionRow_obj::__register()
{
	ActionRow_obj _hx_dummy;
	ActionRow_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.types.message.ActionRow",76,5b,2b,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ActionRow_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ActionRow_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActionRow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActionRow_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace types
} // end namespace message
