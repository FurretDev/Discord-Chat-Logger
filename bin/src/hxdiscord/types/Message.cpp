// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#include <haxe/_Int64/Int64_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_cache_CachedData
#include <hxdiscord/cache/CachedData.h>
#endif
#ifndef INCLUDED_hxdiscord_endpoints_Endpoints
#include <hxdiscord/endpoints/Endpoints.h>
#endif
#ifndef INCLUDED_hxdiscord_gateway_Gateway
#include <hxdiscord/gateway/Gateway.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Guild
#include <hxdiscord/types/Guild.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Member
#include <hxdiscord/types/Member.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Message
#include <hxdiscord/types/Message.h>
#endif
#ifndef INCLUDED_hxdiscord_types_User
#include <hxdiscord/types/User.h>
#endif
#ifndef INCLUDED_hxdiscord_utils_Permissions
#include <hxdiscord/utils/Permissions.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b24af02e920c6a2a_11_new,"hxdiscord.types.Message","new",0x7ca1f652,"hxdiscord.types.Message.new","hxdiscord/types/Message.hx",11,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_67_send,"hxdiscord.types.Message","send",0x94639b16,"hxdiscord.types.Message.send","hxdiscord/types/Message.hx",67,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_83_reply,"hxdiscord.types.Message","reply",0xaf5f0f9c,"hxdiscord.types.Message.reply","hxdiscord/types/Message.hx",83,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_89_replyData,"hxdiscord.types.Message","replyData",0x4d518fe6,"hxdiscord.types.Message.replyData","hxdiscord/types/Message.hx",89,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_99_react,"hxdiscord.types.Message","react",0xaf53a5f1,"hxdiscord.types.Message.react","hxdiscord/types/Message.hx",99,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_109_deleteOwnReaction,"hxdiscord.types.Message","deleteOwnReaction",0xe9ab2716,"hxdiscord.types.Message.deleteOwnReaction","hxdiscord/types/Message.hx",109,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_118_deleteReactions,"hxdiscord.types.Message","deleteReactions",0xa56257f1,"hxdiscord.types.Message.deleteReactions","hxdiscord/types/Message.hx",118,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_127_deleteEmojiReaction,"hxdiscord.types.Message","deleteEmojiReaction",0x80054416,"hxdiscord.types.Message.deleteEmojiReaction","hxdiscord/types/Message.hx",127,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_136_deleteMessage,"hxdiscord.types.Message","deleteMessage",0x1a2a914e,"hxdiscord.types.Message.deleteMessage","hxdiscord/types/Message.hx",136,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_145_pin,"hxdiscord.types.Message","pin",0x7ca37e47,"hxdiscord.types.Message.pin","hxdiscord/types/Message.hx",145,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_154_pinMessage,"hxdiscord.types.Message","pinMessage",0xc6484640,"hxdiscord.types.Message.pinMessage","hxdiscord/types/Message.hx",154,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_163_unpin,"hxdiscord.types.Message","unpin",0x6f85b60e,"hxdiscord.types.Message.unpin","hxdiscord/types/Message.hx",163,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_172_unpinMessage,"hxdiscord.types.Message","unpinMessage",0x2061a559,"hxdiscord.types.Message.unpinMessage","hxdiscord/types/Message.hx",172,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_183_createThread,"hxdiscord.types.Message","createThread",0xc4b946b4,"hxdiscord.types.Message.createThread","hxdiscord/types/Message.hx",183,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_193_editMessage,"hxdiscord.types.Message","editMessage",0x92c9b0cf,"hxdiscord.types.Message.editMessage","hxdiscord/types/Message.hx",193,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_209_hasRole,"hxdiscord.types.Message","hasRole",0x00b012e2,"hxdiscord.types.Message.hasRole","hxdiscord/types/Message.hx",209,0x1b56f6a0)
static const bool _hx_array_data_e7f82560_16[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_232_hasRole,"hxdiscord.types.Message","hasRole",0x00b012e2,"hxdiscord.types.Message.hasRole","hxdiscord/types/Message.hx",232,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_242_hasRole,"hxdiscord.types.Message","hasRole",0x00b012e2,"hxdiscord.types.Message.hasRole","hxdiscord/types/Message.hx",242,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_257_hasPermission,"hxdiscord.types.Message","hasPermission",0x41b4f17b,"hxdiscord.types.Message.hasPermission","hxdiscord/types/Message.hx",257,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_300_hasPermission,"hxdiscord.types.Message","hasPermission",0x41b4f17b,"hxdiscord.types.Message.hasPermission","hxdiscord/types/Message.hx",300,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_346_getMember,"hxdiscord.types.Message","getMember",0x154e9302,"hxdiscord.types.Message.getMember","hxdiscord/types/Message.hx",346,0x1b56f6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_b24af02e920c6a2a_344_getMember,"hxdiscord.types.Message","getMember",0x154e9302,"hxdiscord.types.Message.getMember","hxdiscord/types/Message.hx",344,0x1b56f6a0)
namespace hxdiscord{
namespace types{

void Message_obj::__construct( ::Dynamic ms, ::hxdiscord::DiscordClient _client){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_11_new)
HXLINE(  33)		this->prevSentMessage = null();
HXLINE(  41)		this->client = _client;
HXLINE(  43)		this->type = ( (int)(ms->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXLINE(  44)		this->tts = ( (bool)(ms->__Field(HX_("tts",f3,6a,58,00),::hx::paccDynamic)) );
HXLINE(  45)		this->timestamp = ( (::String)(ms->__Field(HX_("timestamp",d6,d4,ce,a5),::hx::paccDynamic)) );
HXLINE(  46)		this->referenced_message = ms->__Field(HX_("referenced_message",81,ba,05,63),::hx::paccDynamic);
HXLINE(  47)		this->message_reference = ms->__Field(HX_("message_reference",13,58,d2,28),::hx::paccDynamic);
HXLINE(  48)		this->pinned = ( (bool)(ms->__Field(HX_("pinned",18,9b,14,86),::hx::paccDynamic)) );
HXLINE(  49)		this->id = ( (::String)(ms->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE(  50)		this->channel_id = ( (::String)(ms->__Field(HX_("channel_id",17,0d,9b,03),::hx::paccDynamic)) );
HXLINE(  51)		this->embeds = ( (::Array< ::Dynamic>)(ms->__Field(HX_("embeds",7a,90,cc,65),::hx::paccDynamic)) );
HXLINE(  53)		this->attachments = ( (::Array< ::Dynamic>)(ms->__Field(HX_("attachments",30,df,33,e7),::hx::paccDynamic)) );
HXLINE(  54)		this->content = ( (::String)(ms->__Field(HX_("content",39,8d,77,19),::hx::paccDynamic)) );
HXLINE(  55)		this->mention_everyone = ( (bool)(ms->__Field(HX_("mention_everyone",e0,ec,d8,a9),::hx::paccDynamic)) );
HXLINE(  56)		this->guildmember = ms->__Field(HX_("member",5a,e2,b5,04),::hx::paccDynamic);
HXLINE(  57)		this->guild_id = ( (::String)(ms->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic)) );
            	}

Dynamic Message_obj::__CreateEmpty() { return new Message_obj; }

void *Message_obj::_hx_vtable = 0;

Dynamic Message_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Message_obj > _hx_result = new Message_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Message_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ad98bea;
}

void Message_obj::send( ::Dynamic mc){
            	HX_GC_STACKFRAME(&_hx_pos_b24af02e920c6a2a_67_send)
HXDLIN(  67)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  69)			::hxdiscord::endpoints::Endpoints_obj::sendMessage(( (::String)( ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::hxdiscord::endpoints::Endpoints_obj::createDM(this->author->id))->doParse()->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) ),mc,null(),false);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  70)				 ::haxe::Exception _g1 = ::haxe::Exception_obj::caught(_g);
HXLINE(  71)				{
HXLINE(  71)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  71)					::String _hx_tmp1 = (HX_("An error has occurred: ",1c,60,a4,c4) + ::Std_obj::string(_g1));
HXDLIN(  71)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("hxdiscord/types/Message.hx",a0,f6,56,1b),71,HX_("hxdiscord.types.Message",60,25,f8,e7),HX_("send",48,8d,50,4c)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,send,(void))

void Message_obj::reply( ::Dynamic mc, ::Dynamic ping){
            	HX_GC_STACKFRAME(&_hx_pos_b24af02e920c6a2a_83_reply)
HXDLIN(  83)		 ::Dynamic _hx_tmp = ::hxdiscord::endpoints::Endpoints_obj::sendMessage(this->channel_id,mc,this->id,( (bool)(ping) ));
HXDLIN(  83)		this->prevSentMessage =  ::hxdiscord::types::Message_obj::__alloc( HX_CTX ,_hx_tmp,this->client);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Message_obj,reply,(void))

void Message_obj::replyData( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_89_replyData)
HXDLIN(  89)		::hxdiscord::endpoints::Endpoints_obj::sendDataToMessageAPI(data,this->channel_id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,replyData,(void))

void Message_obj::react(::String emoji){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_99_react)
HXDLIN(  99)		::hxdiscord::endpoints::Endpoints_obj::createReaction(this->channel_id,this->id,emoji);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,react,(void))

void Message_obj::deleteOwnReaction(::String emoji){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_109_deleteOwnReaction)
HXDLIN( 109)		::hxdiscord::endpoints::Endpoints_obj::deleteOwnReaction(this->channel_id,this->id,emoji);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,deleteOwnReaction,(void))

void Message_obj::deleteReactions(){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_118_deleteReactions)
HXDLIN( 118)		::hxdiscord::endpoints::Endpoints_obj::deleteAllReactions(this->channel_id,this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,deleteReactions,(void))

void Message_obj::deleteEmojiReaction(::String emoji){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_127_deleteEmojiReaction)
HXDLIN( 127)		::hxdiscord::endpoints::Endpoints_obj::deleteAllReactionsForEmoji(this->channel_id,this->id,emoji);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,deleteEmojiReaction,(void))

void Message_obj::deleteMessage(){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_136_deleteMessage)
HXDLIN( 136)		::hxdiscord::endpoints::Endpoints_obj::deleteMessage(this->channel_id,this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,deleteMessage,(void))

void Message_obj::pin(){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_145_pin)
HXDLIN( 145)		::hxdiscord::endpoints::Endpoints_obj::pinMessage(this->channel_id,this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,pin,(void))

void Message_obj::pinMessage(){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_154_pinMessage)
HXDLIN( 154)		::hxdiscord::endpoints::Endpoints_obj::pinMessage(this->channel_id,this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,pinMessage,(void))

void Message_obj::unpin(){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_163_unpin)
HXDLIN( 163)		::hxdiscord::endpoints::Endpoints_obj::unpinMessage(this->channel_id,this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,unpin,(void))

void Message_obj::unpinMessage(){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_172_unpinMessage)
HXDLIN( 172)		::hxdiscord::endpoints::Endpoints_obj::unpinMessage(this->channel_id,this->id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,unpinMessage,(void))

 ::Dynamic Message_obj::createThread( ::Dynamic obj){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_183_createThread)
HXDLIN( 183)		return ::hxdiscord::endpoints::Endpoints_obj::startThreadFromMessage(this->channel_id,this->id,obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,createThread,return )

void Message_obj::editMessage( ::Dynamic m){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_193_editMessage)
HXDLIN( 193)		if (::hx::IsNull( this->prevSentMessage )) {
HXLINE( 195)			::haxe::Log_obj::trace(HX_("Couldn't edit a non-existing message",21,a4,28,d3),::hx::SourceInfo(HX_("hxdiscord/types/Message.hx",a0,f6,56,1b),195,HX_("hxdiscord.types.Message",60,25,f8,e7),HX_("editMessage",dd,48,19,cc)));
            		}
            		else {
HXLINE( 199)			::hxdiscord::endpoints::Endpoints_obj::editMessage(this->channel_id,this->prevSentMessage->id,m);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,editMessage,(void))

bool Message_obj::hasRole(::String roleToLookFor){
            	HX_GC_STACKFRAME(&_hx_pos_b24af02e920c6a2a_209_hasRole)
HXLINE( 210)		::Array< bool > hasRole = ::Array_obj< bool >::fromData( _hx_array_data_e7f82560_16,1);
HXLINE( 211)		if (::hx::IsNotNull( this->guildmember )) {
HXLINE( 218)			 ::hxdiscord::types::User owner = ::hxdiscord::endpoints::Endpoints_obj::getUser(::hxdiscord::endpoints::Endpoints_obj::getGuild(this->guild_id)->owner_id);
HXLINE( 219)			if ((this->author->id == owner->id)) {
HXLINE( 221)				hasRole[0] = true;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,roleToLookFor,::Array< bool >,hasRole) HXARGC(1)
            				void _hx_run(::String data){
            					HX_GC_STACKFRAME(&_hx_pos_b24af02e920c6a2a_232_hasRole)
HXLINE( 233)					 ::Dynamic jsonParse =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE( 234)					if (( (bool)( ::Dynamic(jsonParse->__Field(HX_("roles",3d,1c,5f,ed),::hx::paccDynamic))->__Field(HX_("contains",1f,5a,7b,2c),::hx::paccDynamic)(roleToLookFor)) )) {
HXLINE( 236)						hasRole[0] = true;
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            				void _hx_run(::String error){
            					HX_GC_STACKFRAME(&_hx_pos_b24af02e920c6a2a_242_hasRole)
HXLINE( 242)					::haxe::Log_obj::trace((HX_("An error has occurred: ",1c,60,a4,c4) + error),::hx::SourceInfo(HX_("hxdiscord/types/Message.hx",a0,f6,56,1b),242,HX_("hxdiscord.types.Message",60,25,f8,e7),HX_("hasRole",f0,0b,f3,1a)));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 225)				 ::sys::Http r =  ::sys::Http_obj::__alloc( HX_CTX ,(((((HX_("https://discord.com/api/v",02,22,37,fe) + ::hxdiscord::gateway::Gateway_obj::API_VERSION) + HX_("/guilds/",80,2c,e9,bf)) + this->guild_id) + HX_("/members/",65,58,09,c2)) + this->author->id));
HXLINE( 227)				r->addHeader(HX_("User-Agent",03,d0,1e,60),HX_("hxdiscord (https://github.com/FurretDev/hxdiscord)",ab,fd,3f,7d));
HXLINE( 228)				r->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bot ",59,b4,f4,2b) + ::hxdiscord::DiscordClient_obj::token));
HXLINE( 231)				r->onData =  ::Dynamic(new _hx_Closure_0(roleToLookFor,hasRole));
HXLINE( 240)				r->onError =  ::Dynamic(new _hx_Closure_1());
HXLINE( 245)				r->request(null());
            			}
            		}
HXLINE( 248)		return hasRole->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,hasRole,return )

bool Message_obj::hasPermission(::String permissionToLookFor){
            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_257_hasPermission)
HXLINE( 258)		bool hasPermission = false;
HXLINE( 259)		 ::hxdiscord::types::Member member = null();
HXLINE( 260)		 ::Dynamic _hx_tmp = this->client->cache->guilds->get(this->guild_id);
HXDLIN( 260)		if (::hx::IsEq( _hx_tmp,this->author->id )) {
HXLINE( 261)			hasPermission = true;
            		}
HXLINE( 263)		member = ( ( ::hxdiscord::types::Member)(this->client->cache->guild_members->get((this->guild_id + this->author->id))) );
HXLINE( 270)		if (::hx::IsNotNull( member )) {
HXLINE( 271)			{
HXLINE( 271)				int _g = 0;
HXDLIN( 271)				int _g1 = member->permissionsBitwise->length;
HXDLIN( 271)				while((_g < _g1)){
HXLINE( 271)					_g = (_g + 1);
HXLINE( 273)					if (::hxdiscord::utils::Permissions_obj::resolve(::haxe::_Int64::Int64_Impl__obj::fromFloat(::Std_obj::parseFloat(member->permissionsBitwise->__get((_g - 1)))))->contains(permissionToLookFor)) {
HXLINE( 275)						hasPermission = true;
            					}
            				}
            			}
HXLINE( 278)			 ::Dynamic _hx_tmp1 = this->client->cache->guilds->get(this->guild_id);
HXDLIN( 278)			if (::hx::IsEq( _hx_tmp1->__Field(HX_("owner_id",a7,bb,b6,8f),::hx::paccDynamic),this->author->id )) {
HXLINE( 279)				hasPermission = true;
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,d) HXARGC(1)
            			void _hx_run( ::hxdiscord::types::Member dd){
            				HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_300_hasPermission)
HXLINE( 300)				d[0] = dd;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 299)			::Array< ::Dynamic> d = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 300)			::hxdiscord::endpoints::Endpoints_obj::getGuildMember(this->guild_id,this->author->id, ::Dynamic(new _hx_Closure_0(d)),null());
HXLINE( 301)			{
HXLINE( 301)				int _g2 = 0;
HXDLIN( 301)				int _g3 = d->__get(0).StaticCast<  ::hxdiscord::types::Member >()->roles->length;
HXDLIN( 301)				while((_g2 < _g3)){
HXLINE( 301)					_g2 = (_g2 + 1);
HXLINE( 302)					::Array< ::String > d1 = d->__get(0).StaticCast<  ::hxdiscord::types::Member >()->permissionsBitwise;
HXDLIN( 302)					d1->push( ::Dynamic(this->client->cache->guilds_roles->get(d->__get(0).StaticCast<  ::hxdiscord::types::Member >()->roles->__get((_g2 - 1)))->__Field(HX_("permissions",84,7c,d4,0e),::hx::paccDynamic)));
            				}
            			}
HXLINE( 305)			this->client->cache->guild_members->set((this->guild_id + this->author->id),d->__get(0).StaticCast<  ::hxdiscord::types::Member >());
HXLINE( 306)			 ::hxdiscord::types::Member member1 = d->__get(0).StaticCast<  ::hxdiscord::types::Member >();
HXLINE( 307)			{
HXLINE( 307)				int _g4 = 0;
HXDLIN( 307)				int _g5 = member1->permissionsBitwise->length;
HXDLIN( 307)				while((_g4 < _g5)){
HXLINE( 307)					_g4 = (_g4 + 1);
HXLINE( 309)					if (::hxdiscord::utils::Permissions_obj::resolve(::haxe::_Int64::Int64_Impl__obj::fromFloat(::Std_obj::parseFloat(member1->permissionsBitwise->__get((_g4 - 1)))))->contains(permissionToLookFor)) {
HXLINE( 311)						hasPermission = true;
            					}
            				}
            			}
HXLINE( 314)			 ::Dynamic _hx_tmp2 = this->client->cache->guilds->get(this->guild_id);
HXDLIN( 314)			if (::hx::IsEq( _hx_tmp2->__Field(HX_("owner_id",a7,bb,b6,8f),::hx::paccDynamic),this->author->id )) {
HXLINE( 315)				hasPermission = true;
            			}
            		}
HXLINE( 337)		return hasPermission;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Message_obj,hasPermission,return )

 ::hxdiscord::types::Member Message_obj::getMember(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,member) HXARGC(1)
            		void _hx_run( ::hxdiscord::types::Member m){
            			HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_346_getMember)
HXLINE( 346)			member[0] = m;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_b24af02e920c6a2a_344_getMember)
HXLINE( 345)		::Array< ::Dynamic> member = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 346)		::hxdiscord::endpoints::Endpoints_obj::getGuildMember(this->guild_id,this->author->id, ::Dynamic(new _hx_Closure_0(member)),null());
HXLINE( 348)		return member->__get(0).StaticCast<  ::hxdiscord::types::Member >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Message_obj,getMember,return )


::hx::ObjectPtr< Message_obj > Message_obj::__new( ::Dynamic ms, ::hxdiscord::DiscordClient _client) {
	::hx::ObjectPtr< Message_obj > __this = new Message_obj();
	__this->__construct(ms,_client);
	return __this;
}

::hx::ObjectPtr< Message_obj > Message_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic ms, ::hxdiscord::DiscordClient _client) {
	Message_obj *__this = (Message_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Message_obj), true, "hxdiscord.types.Message"));
	*(void **)__this = Message_obj::_hx_vtable;
	__this->__construct(ms,_client);
	return __this;
}

Message_obj::Message_obj()
{
}

void Message_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Message);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(tts,"tts");
	HX_MARK_MEMBER_NAME(timestamp,"timestamp");
	HX_MARK_MEMBER_NAME(pinned,"pinned");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(channel_id,"channel_id");
	HX_MARK_MEMBER_NAME(attachments,"attachments");
	HX_MARK_MEMBER_NAME(author,"author");
	HX_MARK_MEMBER_NAME(guildmember,"guildmember");
	HX_MARK_MEMBER_NAME(referenced_message,"referenced_message");
	HX_MARK_MEMBER_NAME(embeds,"embeds");
	HX_MARK_MEMBER_NAME(message_reference,"message_reference");
	HX_MARK_MEMBER_NAME(guild_id,"guild_id");
	HX_MARK_MEMBER_NAME(allowed_mentions,"allowed_mentions");
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(embed,"embed");
	HX_MARK_MEMBER_NAME(mention_everyone,"mention_everyone");
	HX_MARK_MEMBER_NAME(client,"client");
	HX_MARK_MEMBER_NAME(prevSentMessage,"prevSentMessage");
	HX_MARK_END_CLASS();
}

void Message_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(tts,"tts");
	HX_VISIT_MEMBER_NAME(timestamp,"timestamp");
	HX_VISIT_MEMBER_NAME(pinned,"pinned");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(channel_id,"channel_id");
	HX_VISIT_MEMBER_NAME(attachments,"attachments");
	HX_VISIT_MEMBER_NAME(author,"author");
	HX_VISIT_MEMBER_NAME(guildmember,"guildmember");
	HX_VISIT_MEMBER_NAME(referenced_message,"referenced_message");
	HX_VISIT_MEMBER_NAME(embeds,"embeds");
	HX_VISIT_MEMBER_NAME(message_reference,"message_reference");
	HX_VISIT_MEMBER_NAME(guild_id,"guild_id");
	HX_VISIT_MEMBER_NAME(allowed_mentions,"allowed_mentions");
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(embed,"embed");
	HX_VISIT_MEMBER_NAME(mention_everyone,"mention_everyone");
	HX_VISIT_MEMBER_NAME(client,"client");
	HX_VISIT_MEMBER_NAME(prevSentMessage,"prevSentMessage");
}

::hx::Val Message_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"tts") ) { return ::hx::Val( tts ); }
		if (HX_FIELD_EQ(inName,"pin") ) { return ::hx::Val( pin_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"send") ) { return ::hx::Val( send_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"embed") ) { return ::hx::Val( embed ); }
		if (HX_FIELD_EQ(inName,"reply") ) { return ::hx::Val( reply_dyn() ); }
		if (HX_FIELD_EQ(inName,"react") ) { return ::hx::Val( react_dyn() ); }
		if (HX_FIELD_EQ(inName,"unpin") ) { return ::hx::Val( unpin_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pinned") ) { return ::hx::Val( pinned ); }
		if (HX_FIELD_EQ(inName,"author") ) { return ::hx::Val( author ); }
		if (HX_FIELD_EQ(inName,"embeds") ) { return ::hx::Val( embeds ); }
		if (HX_FIELD_EQ(inName,"client") ) { return ::hx::Val( client ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		if (HX_FIELD_EQ(inName,"hasRole") ) { return ::hx::Val( hasRole_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"guild_id") ) { return ::hx::Val( guild_id ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { return ::hx::Val( timestamp ); }
		if (HX_FIELD_EQ(inName,"replyData") ) { return ::hx::Val( replyData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMember") ) { return ::hx::Val( getMember_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channel_id") ) { return ::hx::Val( channel_id ); }
		if (HX_FIELD_EQ(inName,"pinMessage") ) { return ::hx::Val( pinMessage_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attachments") ) { return ::hx::Val( attachments ); }
		if (HX_FIELD_EQ(inName,"guildmember") ) { return ::hx::Val( guildmember ); }
		if (HX_FIELD_EQ(inName,"editMessage") ) { return ::hx::Val( editMessage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unpinMessage") ) { return ::hx::Val( unpinMessage_dyn() ); }
		if (HX_FIELD_EQ(inName,"createThread") ) { return ::hx::Val( createThread_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"deleteMessage") ) { return ::hx::Val( deleteMessage_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasPermission") ) { return ::hx::Val( hasPermission_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prevSentMessage") ) { return ::hx::Val( prevSentMessage ); }
		if (HX_FIELD_EQ(inName,"deleteReactions") ) { return ::hx::Val( deleteReactions_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowed_mentions") ) { return ::hx::Val( allowed_mentions ); }
		if (HX_FIELD_EQ(inName,"mention_everyone") ) { return ::hx::Val( mention_everyone ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"message_reference") ) { return ::hx::Val( message_reference ); }
		if (HX_FIELD_EQ(inName,"deleteOwnReaction") ) { return ::hx::Val( deleteOwnReaction_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"referenced_message") ) { return ::hx::Val( referenced_message ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"deleteEmojiReaction") ) { return ::hx::Val( deleteEmojiReaction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Message_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"tts") ) { tts=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"embed") ) { embed=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pinned") ) { pinned=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"author") ) { author=inValue.Cast<  ::hxdiscord::types::User >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embeds") ) { embeds=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"client") ) { client=inValue.Cast<  ::hxdiscord::DiscordClient >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"guild_id") ) { guild_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { timestamp=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channel_id") ) { channel_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attachments") ) { attachments=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guildmember") ) { guildmember=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prevSentMessage") ) { prevSentMessage=inValue.Cast<  ::hxdiscord::types::Message >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowed_mentions") ) { allowed_mentions=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mention_everyone") ) { mention_everyone=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"message_reference") ) { message_reference=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"referenced_message") ) { referenced_message=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Message_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("tts",f3,6a,58,00));
	outFields->push(HX_("timestamp",d6,d4,ce,a5));
	outFields->push(HX_("pinned",18,9b,14,86));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("channel_id",17,0d,9b,03));
	outFields->push(HX_("attachments",30,df,33,e7));
	outFields->push(HX_("author",8b,ea,7b,73));
	outFields->push(HX_("guildmember",4d,6c,ea,a4));
	outFields->push(HX_("referenced_message",81,ba,05,63));
	outFields->push(HX_("embeds",7a,90,cc,65));
	outFields->push(HX_("message_reference",13,58,d2,28));
	outFields->push(HX_("guild_id",27,82,bc,71));
	outFields->push(HX_("allowed_mentions",80,0f,51,4d));
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("embed",d9,8d,cf,6f));
	outFields->push(HX_("mention_everyone",e0,ec,d8,a9));
	outFields->push(HX_("client",4b,ca,4f,0a));
	outFields->push(HX_("prevSentMessage",1c,53,ea,4d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Message_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Message_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsBool,(int)offsetof(Message_obj,tts),HX_("tts",f3,6a,58,00)},
	{::hx::fsString,(int)offsetof(Message_obj,timestamp),HX_("timestamp",d6,d4,ce,a5)},
	{::hx::fsBool,(int)offsetof(Message_obj,pinned),HX_("pinned",18,9b,14,86)},
	{::hx::fsString,(int)offsetof(Message_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(Message_obj,channel_id),HX_("channel_id",17,0d,9b,03)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Message_obj,attachments),HX_("attachments",30,df,33,e7)},
	{::hx::fsObject /*  ::hxdiscord::types::User */ ,(int)offsetof(Message_obj,author),HX_("author",8b,ea,7b,73)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Message_obj,guildmember),HX_("guildmember",4d,6c,ea,a4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Message_obj,referenced_message),HX_("referenced_message",81,ba,05,63)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Message_obj,embeds),HX_("embeds",7a,90,cc,65)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Message_obj,message_reference),HX_("message_reference",13,58,d2,28)},
	{::hx::fsString,(int)offsetof(Message_obj,guild_id),HX_("guild_id",27,82,bc,71)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Message_obj,allowed_mentions),HX_("allowed_mentions",80,0f,51,4d)},
	{::hx::fsString,(int)offsetof(Message_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Message_obj,embed),HX_("embed",d9,8d,cf,6f)},
	{::hx::fsBool,(int)offsetof(Message_obj,mention_everyone),HX_("mention_everyone",e0,ec,d8,a9)},
	{::hx::fsObject /*  ::hxdiscord::DiscordClient */ ,(int)offsetof(Message_obj,client),HX_("client",4b,ca,4f,0a)},
	{::hx::fsObject /*  ::hxdiscord::types::Message */ ,(int)offsetof(Message_obj,prevSentMessage),HX_("prevSentMessage",1c,53,ea,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Message_obj_sStaticStorageInfo = 0;
#endif

static ::String Message_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("tts",f3,6a,58,00),
	HX_("timestamp",d6,d4,ce,a5),
	HX_("pinned",18,9b,14,86),
	HX_("id",db,5b,00,00),
	HX_("channel_id",17,0d,9b,03),
	HX_("attachments",30,df,33,e7),
	HX_("author",8b,ea,7b,73),
	HX_("guildmember",4d,6c,ea,a4),
	HX_("referenced_message",81,ba,05,63),
	HX_("embeds",7a,90,cc,65),
	HX_("message_reference",13,58,d2,28),
	HX_("guild_id",27,82,bc,71),
	HX_("allowed_mentions",80,0f,51,4d),
	HX_("content",39,8d,77,19),
	HX_("embed",d9,8d,cf,6f),
	HX_("mention_everyone",e0,ec,d8,a9),
	HX_("client",4b,ca,4f,0a),
	HX_("prevSentMessage",1c,53,ea,4d),
	HX_("send",48,8d,50,4c),
	HX_("reply",2a,09,c6,e6),
	HX_("replyData",74,68,0f,b9),
	HX_("react",7f,9f,ba,e6),
	HX_("deleteOwnReaction",a4,3d,e9,8c),
	HX_("deleteReactions",ff,0e,fa,29),
	HX_("deleteEmojiReaction",24,9a,e0,ff),
	HX_("deleteMessage",dc,c8,9a,f8),
	HX_("pin",55,58,55,00),
	HX_("pinMessage",f2,e9,a7,a0),
	HX_("unpin",9c,af,ec,a6),
	HX_("unpinMessage",8b,19,b7,0c),
	HX_("createThread",e6,ba,0e,b1),
	HX_("editMessage",dd,48,19,cc),
	HX_("hasRole",f0,0b,f3,1a),
	HX_("hasPermission",09,29,25,20),
	HX_("getMember",90,6b,0c,81),
	::String(null()) };

::hx::Class Message_obj::__mClass;

void Message_obj::__register()
{
	Message_obj _hx_dummy;
	Message_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.types.Message",60,25,f8,e7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Message_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Message_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Message_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Message_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace types
