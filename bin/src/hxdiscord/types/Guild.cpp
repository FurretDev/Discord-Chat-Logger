// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_types_Guild
#include <hxdiscord/types/Guild.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0696f5e39ea9244f_49_new,"hxdiscord.types.Guild","new",0xbc0a7ffe,"hxdiscord.types.Guild.new","hxdiscord/types/Guild.hx",49,0xb5af11f4)
namespace hxdiscord{
namespace types{

void Guild_obj::__construct( ::Dynamic gs){
            	HX_STACKFRAME(&_hx_pos_0696f5e39ea9244f_49_new)
HXLINE(  50)		this->id = ( (::String)(gs->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE(  51)		this->name = ( (::String)(gs->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE(  52)		this->icon = ( (::String)(gs->__Field(HX_("icon",79,e7,b2,45),::hx::paccDynamic)) );
HXLINE(  53)		this->icon_hash = ( (::String)(gs->__Field(HX_("icon_hash",94,ad,af,9e),::hx::paccDynamic)) );
HXLINE(  54)		this->splash = ( (::String)(gs->__Field(HX_("splash",67,81,98,bf),::hx::paccDynamic)) );
HXLINE(  55)		this->discovery_splash = ( (::String)(gs->__Field(HX_("discovery_splash",d6,1b,a1,43),::hx::paccDynamic)) );
HXLINE(  56)		this->owner = ( (bool)(gs->__Field(HX_("owner",33,98,76,38),::hx::paccDynamic)) );
HXLINE(  57)		this->owner_id = ( (::String)(gs->__Field(HX_("owner_id",a7,bb,b6,8f),::hx::paccDynamic)) );
HXLINE(  58)		this->permissions = ( (::String)(gs->__Field(HX_("permissions",84,7c,d4,0e),::hx::paccDynamic)) );
HXLINE(  59)		this->region = ( (::String)(gs->__Field(HX_("region",f4,c0,8c,00),::hx::paccDynamic)) );
HXLINE(  60)		this->afk_channel_id = ( (::String)(gs->__Field(HX_("afk_channel_id",10,44,86,df),::hx::paccDynamic)) );
HXLINE(  61)		this->afk_timeout = ( (::String)(gs->__Field(HX_("afk_timeout",08,be,88,af),::hx::paccDynamic)) );
HXLINE(  62)		this->widget_enabled = ( (bool)(gs->__Field(HX_("widget_enabled",c6,71,77,cd),::hx::paccDynamic)) );
HXLINE(  63)		this->widget_channel_id = ( (::String)(gs->__Field(HX_("widget_channel_id",f2,78,f2,3d),::hx::paccDynamic)) );
HXLINE(  64)		this->verification_level = ( (int)(gs->__Field(HX_("verification_level",a0,c6,5e,21),::hx::paccDynamic)) );
HXLINE(  65)		this->default_message_notifications = ( (int)(gs->__Field(HX_("default_message_notifications",32,f6,18,a8),::hx::paccDynamic)) );
HXLINE(  66)		this->explicit_content_filter = ( (int)(gs->__Field(HX_("explicit_content_filter",69,c5,90,82),::hx::paccDynamic)) );
HXLINE(  67)		this->roles = ( (::Array< ::Dynamic>)(gs->__Field(HX_("roles",3d,1c,5f,ed),::hx::paccDynamic)) );
HXLINE(  68)		this->emojis = ( (::Array< ::Dynamic>)(gs->__Field(HX_("emojis",2d,26,68,6e),::hx::paccDynamic)) );
HXLINE(  69)		this->features = ( (::Array< ::String >)(gs->__Field(HX_("features",fd,6c,d7,12),::hx::paccDynamic)) );
HXLINE(  70)		this->mfa_level = ( (int)(gs->__Field(HX_("mfa_level",ad,89,cf,ca),::hx::paccDynamic)) );
HXLINE(  71)		this->application_id = ( (::String)(gs->__Field(HX_("application_id",aa,b8,27,8d),::hx::paccDynamic)) );
HXLINE(  72)		this->system_channel_id = ( (::String)(gs->__Field(HX_("system_channel_id",a7,5b,75,76),::hx::paccDynamic)) );
HXLINE(  73)		this->system_channel_flags = ( (int)(gs->__Field(HX_("system_channel_flags",fb,12,d8,20),::hx::paccDynamic)) );
HXLINE(  74)		this->rules_channel_id = ( (::String)(gs->__Field(HX_("rules_channel_id",9f,1b,a6,cf),::hx::paccDynamic)) );
HXLINE(  75)		this->max_presences = ( (int)(gs->__Field(HX_("max_presences",3d,5d,f3,f5),::hx::paccDynamic)) );
HXLINE(  76)		this->max_members = ( (int)(gs->__Field(HX_("max_members",fe,d4,3c,f0),::hx::paccDynamic)) );
HXLINE(  77)		this->vanity_url_code = ( (::String)(gs->__Field(HX_("vanity_url_code",11,26,71,bb),::hx::paccDynamic)) );
HXLINE(  78)		this->description = ( (::String)(gs->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic)) );
HXLINE(  79)		this->banner = ( (::String)(gs->__Field(HX_("banner",ec,e9,e0,51),::hx::paccDynamic)) );
HXLINE(  80)		this->premium_tier = ( (int)(gs->__Field(HX_("premium_tier",4a,03,eb,e0),::hx::paccDynamic)) );
HXLINE(  81)		this->premium_subscription_count = ( (int)(gs->__Field(HX_("premium_subscription_count",15,f3,f2,23),::hx::paccDynamic)) );
HXLINE(  82)		this->preferred_locale = ( (::String)(gs->__Field(HX_("preferred_locale",18,f3,17,64),::hx::paccDynamic)) );
HXLINE(  83)		this->public_updates_channel_id = ( (::String)(gs->__Field(HX_("public_updates_channel_id",42,b9,a5,76),::hx::paccDynamic)) );
HXLINE(  84)		this->max_video_channel_users = ( (int)(gs->__Field(HX_("max_video_channel_users",ad,bd,ee,bb),::hx::paccDynamic)) );
HXLINE(  85)		this->approximate_member_count = ( (int)(gs->__Field(HX_("approximate_member_count",f5,4f,a5,e8),::hx::paccDynamic)) );
HXLINE(  86)		this->approximate_presence_count = ( (int)(gs->__Field(HX_("approximate_presence_count",56,37,16,d6),::hx::paccDynamic)) );
HXLINE(  87)		this->welcome_screen = gs->__Field(HX_("welcome_screen",a9,00,18,0e),::hx::paccDynamic);
HXLINE(  88)		this->nsfw_level = ( (int)(gs->__Field(HX_("nsfw_level",1b,b6,4f,ef),::hx::paccDynamic)) );
HXLINE(  89)		this->stickers = ( (::Array< ::Dynamic>)(gs->__Field(HX_("stickers",16,40,8e,cc),::hx::paccDynamic)) );
HXLINE(  90)		this->premium_progress_bar_enabled = ( (bool)(gs->__Field(HX_("premium_progress_bar_enabled",2b,9e,09,8b),::hx::paccDynamic)) );
            	}

Dynamic Guild_obj::__CreateEmpty() { return new Guild_obj; }

void *Guild_obj::_hx_vtable = 0;

Dynamic Guild_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Guild_obj > _hx_result = new Guild_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Guild_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13dd3916;
}


Guild_obj::Guild_obj()
{
}

void Guild_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Guild);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(icon_hash,"icon_hash");
	HX_MARK_MEMBER_NAME(splash,"splash");
	HX_MARK_MEMBER_NAME(discovery_splash,"discovery_splash");
	HX_MARK_MEMBER_NAME(owner,"owner");
	HX_MARK_MEMBER_NAME(owner_id,"owner_id");
	HX_MARK_MEMBER_NAME(permissions,"permissions");
	HX_MARK_MEMBER_NAME(region,"region");
	HX_MARK_MEMBER_NAME(afk_channel_id,"afk_channel_id");
	HX_MARK_MEMBER_NAME(afk_timeout,"afk_timeout");
	HX_MARK_MEMBER_NAME(widget_enabled,"widget_enabled");
	HX_MARK_MEMBER_NAME(widget_channel_id,"widget_channel_id");
	HX_MARK_MEMBER_NAME(verification_level,"verification_level");
	HX_MARK_MEMBER_NAME(default_message_notifications,"default_message_notifications");
	HX_MARK_MEMBER_NAME(explicit_content_filter,"explicit_content_filter");
	HX_MARK_MEMBER_NAME(roles,"roles");
	HX_MARK_MEMBER_NAME(emojis,"emojis");
	HX_MARK_MEMBER_NAME(features,"features");
	HX_MARK_MEMBER_NAME(mfa_level,"mfa_level");
	HX_MARK_MEMBER_NAME(application_id,"application_id");
	HX_MARK_MEMBER_NAME(system_channel_id,"system_channel_id");
	HX_MARK_MEMBER_NAME(system_channel_flags,"system_channel_flags");
	HX_MARK_MEMBER_NAME(rules_channel_id,"rules_channel_id");
	HX_MARK_MEMBER_NAME(max_presences,"max_presences");
	HX_MARK_MEMBER_NAME(max_members,"max_members");
	HX_MARK_MEMBER_NAME(vanity_url_code,"vanity_url_code");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(banner,"banner");
	HX_MARK_MEMBER_NAME(premium_tier,"premium_tier");
	HX_MARK_MEMBER_NAME(premium_subscription_count,"premium_subscription_count");
	HX_MARK_MEMBER_NAME(preferred_locale,"preferred_locale");
	HX_MARK_MEMBER_NAME(public_updates_channel_id,"public_updates_channel_id");
	HX_MARK_MEMBER_NAME(max_video_channel_users,"max_video_channel_users");
	HX_MARK_MEMBER_NAME(approximate_member_count,"approximate_member_count");
	HX_MARK_MEMBER_NAME(approximate_presence_count,"approximate_presence_count");
	HX_MARK_MEMBER_NAME(welcome_screen,"welcome_screen");
	HX_MARK_MEMBER_NAME(nsfw_level,"nsfw_level");
	HX_MARK_MEMBER_NAME(stickers,"stickers");
	HX_MARK_MEMBER_NAME(premium_progress_bar_enabled,"premium_progress_bar_enabled");
	HX_MARK_END_CLASS();
}

void Guild_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(icon_hash,"icon_hash");
	HX_VISIT_MEMBER_NAME(splash,"splash");
	HX_VISIT_MEMBER_NAME(discovery_splash,"discovery_splash");
	HX_VISIT_MEMBER_NAME(owner,"owner");
	HX_VISIT_MEMBER_NAME(owner_id,"owner_id");
	HX_VISIT_MEMBER_NAME(permissions,"permissions");
	HX_VISIT_MEMBER_NAME(region,"region");
	HX_VISIT_MEMBER_NAME(afk_channel_id,"afk_channel_id");
	HX_VISIT_MEMBER_NAME(afk_timeout,"afk_timeout");
	HX_VISIT_MEMBER_NAME(widget_enabled,"widget_enabled");
	HX_VISIT_MEMBER_NAME(widget_channel_id,"widget_channel_id");
	HX_VISIT_MEMBER_NAME(verification_level,"verification_level");
	HX_VISIT_MEMBER_NAME(default_message_notifications,"default_message_notifications");
	HX_VISIT_MEMBER_NAME(explicit_content_filter,"explicit_content_filter");
	HX_VISIT_MEMBER_NAME(roles,"roles");
	HX_VISIT_MEMBER_NAME(emojis,"emojis");
	HX_VISIT_MEMBER_NAME(features,"features");
	HX_VISIT_MEMBER_NAME(mfa_level,"mfa_level");
	HX_VISIT_MEMBER_NAME(application_id,"application_id");
	HX_VISIT_MEMBER_NAME(system_channel_id,"system_channel_id");
	HX_VISIT_MEMBER_NAME(system_channel_flags,"system_channel_flags");
	HX_VISIT_MEMBER_NAME(rules_channel_id,"rules_channel_id");
	HX_VISIT_MEMBER_NAME(max_presences,"max_presences");
	HX_VISIT_MEMBER_NAME(max_members,"max_members");
	HX_VISIT_MEMBER_NAME(vanity_url_code,"vanity_url_code");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(banner,"banner");
	HX_VISIT_MEMBER_NAME(premium_tier,"premium_tier");
	HX_VISIT_MEMBER_NAME(premium_subscription_count,"premium_subscription_count");
	HX_VISIT_MEMBER_NAME(preferred_locale,"preferred_locale");
	HX_VISIT_MEMBER_NAME(public_updates_channel_id,"public_updates_channel_id");
	HX_VISIT_MEMBER_NAME(max_video_channel_users,"max_video_channel_users");
	HX_VISIT_MEMBER_NAME(approximate_member_count,"approximate_member_count");
	HX_VISIT_MEMBER_NAME(approximate_presence_count,"approximate_presence_count");
	HX_VISIT_MEMBER_NAME(welcome_screen,"welcome_screen");
	HX_VISIT_MEMBER_NAME(nsfw_level,"nsfw_level");
	HX_VISIT_MEMBER_NAME(stickers,"stickers");
	HX_VISIT_MEMBER_NAME(premium_progress_bar_enabled,"premium_progress_bar_enabled");
}

::hx::Val Guild_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { return ::hx::Val( owner ); }
		if (HX_FIELD_EQ(inName,"roles") ) { return ::hx::Val( roles ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splash") ) { return ::hx::Val( splash ); }
		if (HX_FIELD_EQ(inName,"region") ) { return ::hx::Val( region ); }
		if (HX_FIELD_EQ(inName,"emojis") ) { return ::hx::Val( emojis ); }
		if (HX_FIELD_EQ(inName,"banner") ) { return ::hx::Val( banner ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"owner_id") ) { return ::hx::Val( owner_id ); }
		if (HX_FIELD_EQ(inName,"features") ) { return ::hx::Val( features ); }
		if (HX_FIELD_EQ(inName,"stickers") ) { return ::hx::Val( stickers ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"icon_hash") ) { return ::hx::Val( icon_hash ); }
		if (HX_FIELD_EQ(inName,"mfa_level") ) { return ::hx::Val( mfa_level ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nsfw_level") ) { return ::hx::Val( nsfw_level ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"permissions") ) { return ::hx::Val( permissions ); }
		if (HX_FIELD_EQ(inName,"afk_timeout") ) { return ::hx::Val( afk_timeout ); }
		if (HX_FIELD_EQ(inName,"max_members") ) { return ::hx::Val( max_members ); }
		if (HX_FIELD_EQ(inName,"description") ) { return ::hx::Val( description ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"premium_tier") ) { return ::hx::Val( premium_tier ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"max_presences") ) { return ::hx::Val( max_presences ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"afk_channel_id") ) { return ::hx::Val( afk_channel_id ); }
		if (HX_FIELD_EQ(inName,"widget_enabled") ) { return ::hx::Val( widget_enabled ); }
		if (HX_FIELD_EQ(inName,"application_id") ) { return ::hx::Val( application_id ); }
		if (HX_FIELD_EQ(inName,"welcome_screen") ) { return ::hx::Val( welcome_screen ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vanity_url_code") ) { return ::hx::Val( vanity_url_code ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"discovery_splash") ) { return ::hx::Val( discovery_splash ); }
		if (HX_FIELD_EQ(inName,"rules_channel_id") ) { return ::hx::Val( rules_channel_id ); }
		if (HX_FIELD_EQ(inName,"preferred_locale") ) { return ::hx::Val( preferred_locale ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"widget_channel_id") ) { return ::hx::Val( widget_channel_id ); }
		if (HX_FIELD_EQ(inName,"system_channel_id") ) { return ::hx::Val( system_channel_id ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"verification_level") ) { return ::hx::Val( verification_level ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"system_channel_flags") ) { return ::hx::Val( system_channel_flags ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"explicit_content_filter") ) { return ::hx::Val( explicit_content_filter ); }
		if (HX_FIELD_EQ(inName,"max_video_channel_users") ) { return ::hx::Val( max_video_channel_users ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"approximate_member_count") ) { return ::hx::Val( approximate_member_count ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"public_updates_channel_id") ) { return ::hx::Val( public_updates_channel_id ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"premium_subscription_count") ) { return ::hx::Val( premium_subscription_count ); }
		if (HX_FIELD_EQ(inName,"approximate_presence_count") ) { return ::hx::Val( approximate_presence_count ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"premium_progress_bar_enabled") ) { return ::hx::Val( premium_progress_bar_enabled ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"default_message_notifications") ) { return ::hx::Val( default_message_notifications ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Guild_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { owner=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"roles") ) { roles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splash") ) { splash=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"region") ) { region=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emojis") ) { emojis=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"banner") ) { banner=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"owner_id") ) { owner_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"features") ) { features=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stickers") ) { stickers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"icon_hash") ) { icon_hash=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mfa_level") ) { mfa_level=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nsfw_level") ) { nsfw_level=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"permissions") ) { permissions=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"afk_timeout") ) { afk_timeout=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max_members") ) { max_members=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"premium_tier") ) { premium_tier=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"max_presences") ) { max_presences=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"afk_channel_id") ) { afk_channel_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"widget_enabled") ) { widget_enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"application_id") ) { application_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"welcome_screen") ) { welcome_screen=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vanity_url_code") ) { vanity_url_code=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"discovery_splash") ) { discovery_splash=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rules_channel_id") ) { rules_channel_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preferred_locale") ) { preferred_locale=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"widget_channel_id") ) { widget_channel_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"system_channel_id") ) { system_channel_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"verification_level") ) { verification_level=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"system_channel_flags") ) { system_channel_flags=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"explicit_content_filter") ) { explicit_content_filter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max_video_channel_users") ) { max_video_channel_users=inValue.Cast< int >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"approximate_member_count") ) { approximate_member_count=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"public_updates_channel_id") ) { public_updates_channel_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"premium_subscription_count") ) { premium_subscription_count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"approximate_presence_count") ) { approximate_presence_count=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"premium_progress_bar_enabled") ) { premium_progress_bar_enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"default_message_notifications") ) { default_message_notifications=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Guild_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("icon_hash",94,ad,af,9e));
	outFields->push(HX_("splash",67,81,98,bf));
	outFields->push(HX_("discovery_splash",d6,1b,a1,43));
	outFields->push(HX_("owner",33,98,76,38));
	outFields->push(HX_("owner_id",a7,bb,b6,8f));
	outFields->push(HX_("permissions",84,7c,d4,0e));
	outFields->push(HX_("region",f4,c0,8c,00));
	outFields->push(HX_("afk_channel_id",10,44,86,df));
	outFields->push(HX_("afk_timeout",08,be,88,af));
	outFields->push(HX_("widget_enabled",c6,71,77,cd));
	outFields->push(HX_("widget_channel_id",f2,78,f2,3d));
	outFields->push(HX_("verification_level",a0,c6,5e,21));
	outFields->push(HX_("default_message_notifications",32,f6,18,a8));
	outFields->push(HX_("explicit_content_filter",69,c5,90,82));
	outFields->push(HX_("roles",3d,1c,5f,ed));
	outFields->push(HX_("emojis",2d,26,68,6e));
	outFields->push(HX_("features",fd,6c,d7,12));
	outFields->push(HX_("mfa_level",ad,89,cf,ca));
	outFields->push(HX_("application_id",aa,b8,27,8d));
	outFields->push(HX_("system_channel_id",a7,5b,75,76));
	outFields->push(HX_("system_channel_flags",fb,12,d8,20));
	outFields->push(HX_("rules_channel_id",9f,1b,a6,cf));
	outFields->push(HX_("max_presences",3d,5d,f3,f5));
	outFields->push(HX_("max_members",fe,d4,3c,f0));
	outFields->push(HX_("vanity_url_code",11,26,71,bb));
	outFields->push(HX_("description",fc,08,1d,5f));
	outFields->push(HX_("banner",ec,e9,e0,51));
	outFields->push(HX_("premium_tier",4a,03,eb,e0));
	outFields->push(HX_("premium_subscription_count",15,f3,f2,23));
	outFields->push(HX_("preferred_locale",18,f3,17,64));
	outFields->push(HX_("public_updates_channel_id",42,b9,a5,76));
	outFields->push(HX_("max_video_channel_users",ad,bd,ee,bb));
	outFields->push(HX_("approximate_member_count",f5,4f,a5,e8));
	outFields->push(HX_("approximate_presence_count",56,37,16,d6));
	outFields->push(HX_("welcome_screen",a9,00,18,0e));
	outFields->push(HX_("nsfw_level",1b,b6,4f,ef));
	outFields->push(HX_("stickers",16,40,8e,cc));
	outFields->push(HX_("premium_progress_bar_enabled",2b,9e,09,8b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Guild_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Guild_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(Guild_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(Guild_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsString,(int)offsetof(Guild_obj,icon_hash),HX_("icon_hash",94,ad,af,9e)},
	{::hx::fsString,(int)offsetof(Guild_obj,splash),HX_("splash",67,81,98,bf)},
	{::hx::fsString,(int)offsetof(Guild_obj,discovery_splash),HX_("discovery_splash",d6,1b,a1,43)},
	{::hx::fsBool,(int)offsetof(Guild_obj,owner),HX_("owner",33,98,76,38)},
	{::hx::fsString,(int)offsetof(Guild_obj,owner_id),HX_("owner_id",a7,bb,b6,8f)},
	{::hx::fsString,(int)offsetof(Guild_obj,permissions),HX_("permissions",84,7c,d4,0e)},
	{::hx::fsString,(int)offsetof(Guild_obj,region),HX_("region",f4,c0,8c,00)},
	{::hx::fsString,(int)offsetof(Guild_obj,afk_channel_id),HX_("afk_channel_id",10,44,86,df)},
	{::hx::fsString,(int)offsetof(Guild_obj,afk_timeout),HX_("afk_timeout",08,be,88,af)},
	{::hx::fsBool,(int)offsetof(Guild_obj,widget_enabled),HX_("widget_enabled",c6,71,77,cd)},
	{::hx::fsString,(int)offsetof(Guild_obj,widget_channel_id),HX_("widget_channel_id",f2,78,f2,3d)},
	{::hx::fsInt,(int)offsetof(Guild_obj,verification_level),HX_("verification_level",a0,c6,5e,21)},
	{::hx::fsInt,(int)offsetof(Guild_obj,default_message_notifications),HX_("default_message_notifications",32,f6,18,a8)},
	{::hx::fsInt,(int)offsetof(Guild_obj,explicit_content_filter),HX_("explicit_content_filter",69,c5,90,82)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Guild_obj,roles),HX_("roles",3d,1c,5f,ed)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Guild_obj,emojis),HX_("emojis",2d,26,68,6e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Guild_obj,features),HX_("features",fd,6c,d7,12)},
	{::hx::fsInt,(int)offsetof(Guild_obj,mfa_level),HX_("mfa_level",ad,89,cf,ca)},
	{::hx::fsString,(int)offsetof(Guild_obj,application_id),HX_("application_id",aa,b8,27,8d)},
	{::hx::fsString,(int)offsetof(Guild_obj,system_channel_id),HX_("system_channel_id",a7,5b,75,76)},
	{::hx::fsInt,(int)offsetof(Guild_obj,system_channel_flags),HX_("system_channel_flags",fb,12,d8,20)},
	{::hx::fsString,(int)offsetof(Guild_obj,rules_channel_id),HX_("rules_channel_id",9f,1b,a6,cf)},
	{::hx::fsInt,(int)offsetof(Guild_obj,max_presences),HX_("max_presences",3d,5d,f3,f5)},
	{::hx::fsInt,(int)offsetof(Guild_obj,max_members),HX_("max_members",fe,d4,3c,f0)},
	{::hx::fsString,(int)offsetof(Guild_obj,vanity_url_code),HX_("vanity_url_code",11,26,71,bb)},
	{::hx::fsString,(int)offsetof(Guild_obj,description),HX_("description",fc,08,1d,5f)},
	{::hx::fsString,(int)offsetof(Guild_obj,banner),HX_("banner",ec,e9,e0,51)},
	{::hx::fsInt,(int)offsetof(Guild_obj,premium_tier),HX_("premium_tier",4a,03,eb,e0)},
	{::hx::fsInt,(int)offsetof(Guild_obj,premium_subscription_count),HX_("premium_subscription_count",15,f3,f2,23)},
	{::hx::fsString,(int)offsetof(Guild_obj,preferred_locale),HX_("preferred_locale",18,f3,17,64)},
	{::hx::fsString,(int)offsetof(Guild_obj,public_updates_channel_id),HX_("public_updates_channel_id",42,b9,a5,76)},
	{::hx::fsInt,(int)offsetof(Guild_obj,max_video_channel_users),HX_("max_video_channel_users",ad,bd,ee,bb)},
	{::hx::fsInt,(int)offsetof(Guild_obj,approximate_member_count),HX_("approximate_member_count",f5,4f,a5,e8)},
	{::hx::fsInt,(int)offsetof(Guild_obj,approximate_presence_count),HX_("approximate_presence_count",56,37,16,d6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Guild_obj,welcome_screen),HX_("welcome_screen",a9,00,18,0e)},
	{::hx::fsInt,(int)offsetof(Guild_obj,nsfw_level),HX_("nsfw_level",1b,b6,4f,ef)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Guild_obj,stickers),HX_("stickers",16,40,8e,cc)},
	{::hx::fsBool,(int)offsetof(Guild_obj,premium_progress_bar_enabled),HX_("premium_progress_bar_enabled",2b,9e,09,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Guild_obj_sStaticStorageInfo = 0;
#endif

static ::String Guild_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("name",4b,72,ff,48),
	HX_("icon",79,e7,b2,45),
	HX_("icon_hash",94,ad,af,9e),
	HX_("splash",67,81,98,bf),
	HX_("discovery_splash",d6,1b,a1,43),
	HX_("owner",33,98,76,38),
	HX_("owner_id",a7,bb,b6,8f),
	HX_("permissions",84,7c,d4,0e),
	HX_("region",f4,c0,8c,00),
	HX_("afk_channel_id",10,44,86,df),
	HX_("afk_timeout",08,be,88,af),
	HX_("widget_enabled",c6,71,77,cd),
	HX_("widget_channel_id",f2,78,f2,3d),
	HX_("verification_level",a0,c6,5e,21),
	HX_("default_message_notifications",32,f6,18,a8),
	HX_("explicit_content_filter",69,c5,90,82),
	HX_("roles",3d,1c,5f,ed),
	HX_("emojis",2d,26,68,6e),
	HX_("features",fd,6c,d7,12),
	HX_("mfa_level",ad,89,cf,ca),
	HX_("application_id",aa,b8,27,8d),
	HX_("system_channel_id",a7,5b,75,76),
	HX_("system_channel_flags",fb,12,d8,20),
	HX_("rules_channel_id",9f,1b,a6,cf),
	HX_("max_presences",3d,5d,f3,f5),
	HX_("max_members",fe,d4,3c,f0),
	HX_("vanity_url_code",11,26,71,bb),
	HX_("description",fc,08,1d,5f),
	HX_("banner",ec,e9,e0,51),
	HX_("premium_tier",4a,03,eb,e0),
	HX_("premium_subscription_count",15,f3,f2,23),
	HX_("preferred_locale",18,f3,17,64),
	HX_("public_updates_channel_id",42,b9,a5,76),
	HX_("max_video_channel_users",ad,bd,ee,bb),
	HX_("approximate_member_count",f5,4f,a5,e8),
	HX_("approximate_presence_count",56,37,16,d6),
	HX_("welcome_screen",a9,00,18,0e),
	HX_("nsfw_level",1b,b6,4f,ef),
	HX_("stickers",16,40,8e,cc),
	HX_("premium_progress_bar_enabled",2b,9e,09,8b),
	::String(null()) };

::hx::Class Guild_obj::__mClass;

void Guild_obj::__register()
{
	Guild_obj _hx_dummy;
	Guild_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.types.Guild",0c,69,17,4a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Guild_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Guild_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Guild_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Guild_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace types
