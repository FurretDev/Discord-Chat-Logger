// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_types_User
#include <hxdiscord/types/User.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e762ffd89bd13aa_26_new,"hxdiscord.types.User","new",0xd2d26b04,"hxdiscord.types.User.new","hxdiscord/types/User.hx",26,0xb916a66a)
namespace hxdiscord{
namespace types{

void User_obj::__construct( ::hxdiscord::DiscordClient client, ::Dynamic us){
            	HX_STACKFRAME(&_hx_pos_6e762ffd89bd13aa_26_new)
HXLINE(  27)		this->id = ( (::String)(us->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE(  28)		this->username = ( (::String)(us->__Field(HX_("username",16,86,eb,20),::hx::paccDynamic)) );
HXLINE(  29)		this->public_flags = ( (int)(us->__Field(HX_("public_flags",f1,57,b2,cc),::hx::paccDynamic)) );
HXLINE(  30)		this->discriminator = ( (::String)(us->__Field(HX_("discriminator",9c,72,43,23),::hx::paccDynamic)) );
HXLINE(  31)		this->avatar_decoration = ( (::String)(us->__Field(HX_("avatar_decoration",d6,16,5f,d8),::hx::paccDynamic)) );
HXLINE(  32)		this->avatar = ( (::String)(us->__Field(HX_("avatar",19,80,5c,fa),::hx::paccDynamic)) );
HXLINE(  33)		this->banner = ( (::String)(us->__Field(HX_("banner",ec,e9,e0,51),::hx::paccDynamic)) );
HXLINE(  34)		this->bot = ( (bool)(us->__Field(HX_("bot",07,be,4a,00),::hx::paccDynamic)) );
HXLINE(  35)		this->_hx_system = ( (bool)(us->__Field(HX_("system",ef,96,e2,f2),::hx::paccDynamic)) );
HXLINE(  36)		this->mfa_enabled = ( (bool)(us->__Field(HX_("mfa_enabled",ea,94,c1,21),::hx::paccDynamic)) );
HXLINE(  37)		this->accent_color = ( (int)(us->__Field(HX_("accent_color",6e,5d,41,07),::hx::paccDynamic)) );
HXLINE(  38)		this->locale = ( (::String)(us->__Field(HX_("locale",9a,74,bf,59),::hx::paccDynamic)) );
HXLINE(  39)		this->verified = ( (bool)(us->__Field(HX_("verified",08,48,b6,12),::hx::paccDynamic)) );
HXLINE(  40)		this->email = ( (::String)(us->__Field(HX_("email",1c,cf,ce,6f),::hx::paccDynamic)) );
HXLINE(  41)		this->flags = ( (int)(us->__Field(HX_("flags",47,2b,8c,02),::hx::paccDynamic)) );
HXLINE(  42)		this->premium_type = ( (int)(us->__Field(HX_("premium_type",e2,30,f7,e0),::hx::paccDynamic)) );
HXLINE(  43)		this->public_flags = ( (int)(us->__Field(HX_("public_flags",f1,57,b2,cc),::hx::paccDynamic)) );
            	}

Dynamic User_obj::__CreateEmpty() { return new User_obj; }

void *User_obj::_hx_vtable = 0;

Dynamic User_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< User_obj > _hx_result = new User_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool User_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26095848;
}


::hx::ObjectPtr< User_obj > User_obj::__new( ::hxdiscord::DiscordClient client, ::Dynamic us) {
	::hx::ObjectPtr< User_obj > __this = new User_obj();
	__this->__construct(client,us);
	return __this;
}

::hx::ObjectPtr< User_obj > User_obj::__alloc(::hx::Ctx *_hx_ctx, ::hxdiscord::DiscordClient client, ::Dynamic us) {
	User_obj *__this = (User_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(User_obj), true, "hxdiscord.types.User"));
	*(void **)__this = User_obj::_hx_vtable;
	__this->__construct(client,us);
	return __this;
}

User_obj::User_obj()
{
}

void User_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(User);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(username,"username");
	HX_MARK_MEMBER_NAME(public_flags,"public_flags");
	HX_MARK_MEMBER_NAME(discriminator,"discriminator");
	HX_MARK_MEMBER_NAME(avatar_decoration,"avatar_decoration");
	HX_MARK_MEMBER_NAME(avatar,"avatar");
	HX_MARK_MEMBER_NAME(banner,"banner");
	HX_MARK_MEMBER_NAME(bot,"bot");
	HX_MARK_MEMBER_NAME(_hx_system,"system");
	HX_MARK_MEMBER_NAME(mfa_enabled,"mfa_enabled");
	HX_MARK_MEMBER_NAME(accent_color,"accent_color");
	HX_MARK_MEMBER_NAME(locale,"locale");
	HX_MARK_MEMBER_NAME(verified,"verified");
	HX_MARK_MEMBER_NAME(email,"email");
	HX_MARK_MEMBER_NAME(flags,"flags");
	HX_MARK_MEMBER_NAME(premium_type,"premium_type");
	HX_MARK_END_CLASS();
}

void User_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(username,"username");
	HX_VISIT_MEMBER_NAME(public_flags,"public_flags");
	HX_VISIT_MEMBER_NAME(discriminator,"discriminator");
	HX_VISIT_MEMBER_NAME(avatar_decoration,"avatar_decoration");
	HX_VISIT_MEMBER_NAME(avatar,"avatar");
	HX_VISIT_MEMBER_NAME(banner,"banner");
	HX_VISIT_MEMBER_NAME(bot,"bot");
	HX_VISIT_MEMBER_NAME(_hx_system,"system");
	HX_VISIT_MEMBER_NAME(mfa_enabled,"mfa_enabled");
	HX_VISIT_MEMBER_NAME(accent_color,"accent_color");
	HX_VISIT_MEMBER_NAME(locale,"locale");
	HX_VISIT_MEMBER_NAME(verified,"verified");
	HX_VISIT_MEMBER_NAME(email,"email");
	HX_VISIT_MEMBER_NAME(flags,"flags");
	HX_VISIT_MEMBER_NAME(premium_type,"premium_type");
}

::hx::Val User_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bot") ) { return ::hx::Val( bot ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { return ::hx::Val( email ); }
		if (HX_FIELD_EQ(inName,"flags") ) { return ::hx::Val( flags ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { return ::hx::Val( avatar ); }
		if (HX_FIELD_EQ(inName,"banner") ) { return ::hx::Val( banner ); }
		if (HX_FIELD_EQ(inName,"system") ) { return ::hx::Val( _hx_system ); }
		if (HX_FIELD_EQ(inName,"locale") ) { return ::hx::Val( locale ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { return ::hx::Val( username ); }
		if (HX_FIELD_EQ(inName,"verified") ) { return ::hx::Val( verified ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mfa_enabled") ) { return ::hx::Val( mfa_enabled ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"public_flags") ) { return ::hx::Val( public_flags ); }
		if (HX_FIELD_EQ(inName,"accent_color") ) { return ::hx::Val( accent_color ); }
		if (HX_FIELD_EQ(inName,"premium_type") ) { return ::hx::Val( premium_type ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"discriminator") ) { return ::hx::Val( discriminator ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"avatar_decoration") ) { return ::hx::Val( avatar_decoration ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val User_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bot") ) { bot=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { email=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flags") ) { flags=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { avatar=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"banner") ) { banner=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"system") ) { _hx_system=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"locale") ) { locale=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { username=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verified") ) { verified=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mfa_enabled") ) { mfa_enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"public_flags") ) { public_flags=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"accent_color") ) { accent_color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"premium_type") ) { premium_type=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"discriminator") ) { discriminator=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"avatar_decoration") ) { avatar_decoration=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void User_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("username",16,86,eb,20));
	outFields->push(HX_("public_flags",f1,57,b2,cc));
	outFields->push(HX_("discriminator",9c,72,43,23));
	outFields->push(HX_("avatar_decoration",d6,16,5f,d8));
	outFields->push(HX_("avatar",19,80,5c,fa));
	outFields->push(HX_("banner",ec,e9,e0,51));
	outFields->push(HX_("bot",07,be,4a,00));
	outFields->push(HX_("system",ef,96,e2,f2));
	outFields->push(HX_("mfa_enabled",ea,94,c1,21));
	outFields->push(HX_("accent_color",6e,5d,41,07));
	outFields->push(HX_("locale",9a,74,bf,59));
	outFields->push(HX_("verified",08,48,b6,12));
	outFields->push(HX_("email",1c,cf,ce,6f));
	outFields->push(HX_("flags",47,2b,8c,02));
	outFields->push(HX_("premium_type",e2,30,f7,e0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo User_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(User_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(User_obj,username),HX_("username",16,86,eb,20)},
	{::hx::fsInt,(int)offsetof(User_obj,public_flags),HX_("public_flags",f1,57,b2,cc)},
	{::hx::fsString,(int)offsetof(User_obj,discriminator),HX_("discriminator",9c,72,43,23)},
	{::hx::fsString,(int)offsetof(User_obj,avatar_decoration),HX_("avatar_decoration",d6,16,5f,d8)},
	{::hx::fsString,(int)offsetof(User_obj,avatar),HX_("avatar",19,80,5c,fa)},
	{::hx::fsString,(int)offsetof(User_obj,banner),HX_("banner",ec,e9,e0,51)},
	{::hx::fsBool,(int)offsetof(User_obj,bot),HX_("bot",07,be,4a,00)},
	{::hx::fsBool,(int)offsetof(User_obj,_hx_system),HX_("system",ef,96,e2,f2)},
	{::hx::fsBool,(int)offsetof(User_obj,mfa_enabled),HX_("mfa_enabled",ea,94,c1,21)},
	{::hx::fsInt,(int)offsetof(User_obj,accent_color),HX_("accent_color",6e,5d,41,07)},
	{::hx::fsString,(int)offsetof(User_obj,locale),HX_("locale",9a,74,bf,59)},
	{::hx::fsBool,(int)offsetof(User_obj,verified),HX_("verified",08,48,b6,12)},
	{::hx::fsString,(int)offsetof(User_obj,email),HX_("email",1c,cf,ce,6f)},
	{::hx::fsInt,(int)offsetof(User_obj,flags),HX_("flags",47,2b,8c,02)},
	{::hx::fsInt,(int)offsetof(User_obj,premium_type),HX_("premium_type",e2,30,f7,e0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *User_obj_sStaticStorageInfo = 0;
#endif

static ::String User_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("username",16,86,eb,20),
	HX_("public_flags",f1,57,b2,cc),
	HX_("discriminator",9c,72,43,23),
	HX_("avatar_decoration",d6,16,5f,d8),
	HX_("avatar",19,80,5c,fa),
	HX_("banner",ec,e9,e0,51),
	HX_("bot",07,be,4a,00),
	HX_("system",ef,96,e2,f2),
	HX_("mfa_enabled",ea,94,c1,21),
	HX_("accent_color",6e,5d,41,07),
	HX_("locale",9a,74,bf,59),
	HX_("verified",08,48,b6,12),
	HX_("email",1c,cf,ce,6f),
	HX_("flags",47,2b,8c,02),
	HX_("premium_type",e2,30,f7,e0),
	::String(null()) };

::hx::Class User_obj::__mClass;

void User_obj::__register()
{
	User_obj _hx_dummy;
	User_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.types.User",12,d9,7f,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(User_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< User_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = User_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = User_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace types
