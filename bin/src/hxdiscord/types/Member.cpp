// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_endpoints_Endpoints
#include <hxdiscord/endpoints/Endpoints.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Member
#include <hxdiscord/types/Member.h>
#endif
#ifndef INCLUDED_hxdiscord_types_User
#include <hxdiscord/types/User.h>
#endif
#ifndef INCLUDED_hxdiscord_utils_ISO8601Resolver
#include <hxdiscord/utils/ISO8601Resolver.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_34c6334b0caaadc4_4_new,"hxdiscord.types.Member","new",0xc814ce53,"hxdiscord.types.Member.new","hxdiscord/types/Member.hx",4,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_43_ban,"hxdiscord.types.Member","ban",0xc80bafc2,"hxdiscord.types.Member.ban","hxdiscord/types/Member.hx",43,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_51_kick,"hxdiscord.types.Member","kick",0x48270e73,"hxdiscord.types.Member.kick","hxdiscord/types/Member.hx",51,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_59_modify,"hxdiscord.types.Member","modify",0x2ca41067,"hxdiscord.types.Member.modify","hxdiscord/types/Member.hx",59,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_68_setNick,"hxdiscord.types.Member","setNick",0x016c2fd8,"hxdiscord.types.Member.setNick","hxdiscord/types/Member.hx",68,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_78_setRoles,"hxdiscord.types.Member","setRoles",0x8ed61668,"hxdiscord.types.Member.setRoles","hxdiscord/types/Member.hx",78,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_89_setMute,"hxdiscord.types.Member","setMute",0x00cc230e,"hxdiscord.types.Member.setMute","hxdiscord/types/Member.hx",89,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_100_setDeaf,"hxdiscord.types.Member","setDeaf",0xfacd02db,"hxdiscord.types.Member.setDeaf","hxdiscord/types/Member.hx",100,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_111_moveVoiceChannel,"hxdiscord.types.Member","moveVoiceChannel",0xb34d080f,"hxdiscord.types.Member.moveVoiceChannel","hxdiscord/types/Member.hx",111,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_121_setTimeout,"hxdiscord.types.Member","setTimeout",0x01c1358c,"hxdiscord.types.Member.setTimeout","hxdiscord/types/Member.hx",121,0x08f33d7b)
HX_LOCAL_STACK_FRAME(_hx_pos_34c6334b0caaadc4_134_setFlags,"hxdiscord.types.Member","setFlags",0xa4032572,"hxdiscord.types.Member.setFlags","hxdiscord/types/Member.hx",134,0x08f33d7b)
namespace hxdiscord{
namespace types{

void Member_obj::__construct( ::Dynamic d,::String gi){
            	HX_GC_STACKFRAME(&_hx_pos_34c6334b0caaadc4_4_new)
HXLINE(  19)		this->permissionsBitwise = ::Array_obj< ::String >::__new(0);
HXLINE(  24)		this->id = ( (::String)(d->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE(  25)		this->nick = ( (::String)(d->__Field(HX_("nick",a3,7b,05,49),::hx::paccDynamic)) );
HXLINE(  26)		this->user =  ::hxdiscord::types::User_obj::__alloc( HX_CTX ,null(),::hxdiscord::endpoints::Endpoints_obj::getUser(( ( ::hxdiscord::types::User)(d->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic)) )->id));
HXLINE(  27)		this->avatar = ( (::String)(d->__Field(HX_("avatar",19,80,5c,fa),::hx::paccDynamic)) );
HXLINE(  28)		this->roles = ( (::Array< ::String >)(d->__Field(HX_("roles",3d,1c,5f,ed),::hx::paccDynamic)) );
HXLINE(  29)		this->joined_at = ( (::String)(d->__Field(HX_("joined_at",e9,b3,3e,98),::hx::paccDynamic)) );
HXLINE(  30)		this->premium_since = ( (::String)(d->__Field(HX_("premium_since",92,10,58,59),::hx::paccDynamic)) );
HXLINE(  31)		this->deaf = ( (bool)(d->__Field(HX_("deaf",a6,4e,66,42),::hx::paccDynamic)) );
HXLINE(  32)		this->flags = ( (int)(d->__Field(HX_("flags",47,2b,8c,02),::hx::paccDynamic)) );
HXLINE(  33)		this->pending = ( (bool)(d->__Field(HX_("pending",57,98,ec,2b),::hx::paccDynamic)) );
HXLINE(  34)		this->permissions = ( (::String)(d->__Field(HX_("permissions",84,7c,d4,0e),::hx::paccDynamic)) );
HXLINE(  35)		this->communication_disabled_until = ( (::String)(d->__Field(HX_("communication_disabled_until",e4,62,06,75),::hx::paccDynamic)) );
HXLINE(  36)		this->guild_id = gi;
            	}

Dynamic Member_obj::__CreateEmpty() { return new Member_obj; }

void *Member_obj::_hx_vtable = 0;

Dynamic Member_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Member_obj > _hx_result = new Member_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Member_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00faa9c3;
}

bool Member_obj::ban(::String reason){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_43_ban)
HXDLIN(  43)		return ::hxdiscord::endpoints::Endpoints_obj::createGuildBan(this->user->id,this->guild_id,reason);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,ban,return )

bool Member_obj::kick(::String reason){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_51_kick)
HXDLIN(  51)		return ::hxdiscord::endpoints::Endpoints_obj::removeGuildMember(this->user->id,this->guild_id,reason);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,kick,return )

bool Member_obj::modify( ::Dynamic d){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_59_modify)
HXDLIN(  59)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id,d);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,modify,return )

bool Member_obj::setNick(::String n){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_68_setNick)
HXDLIN(  68)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("nick",a3,7b,05,49),n)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,setNick,return )

bool Member_obj::setRoles(::Array< ::String > r){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_78_setRoles)
HXDLIN(  78)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("roles",3d,1c,5f,ed),r)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,setRoles,return )

bool Member_obj::setMute(bool b){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_89_setMute)
HXDLIN(  89)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("mute",d9,6e,65,48),b)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,setMute,return )

bool Member_obj::setDeaf(bool b){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_100_setDeaf)
HXDLIN( 100)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("deaf",a6,4e,66,42),b)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,setDeaf,return )

bool Member_obj::moveVoiceChannel(::String id){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_111_moveVoiceChannel)
HXDLIN( 111)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("channel_id",17,0d,9b,03),id)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,moveVoiceChannel,return )

bool Member_obj::setTimeout(::String d){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_121_setTimeout)
HXLINE( 122)		::String daTime = ::hxdiscord::utils::ISO8601Resolver_obj::getCalculatedISODate(d,null());
HXLINE( 123)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("communication_disabled_until",e4,62,06,75),daTime)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,setTimeout,return )

bool Member_obj::setFlags(int f){
            	HX_STACKFRAME(&_hx_pos_34c6334b0caaadc4_134_setFlags)
HXDLIN( 134)		return ::hxdiscord::endpoints::Endpoints_obj::modifyGuildMember(this->guild_id,this->user->id, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("flags",47,2b,8c,02),f)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Member_obj,setFlags,return )


::hx::ObjectPtr< Member_obj > Member_obj::__new( ::Dynamic d,::String gi) {
	::hx::ObjectPtr< Member_obj > __this = new Member_obj();
	__this->__construct(d,gi);
	return __this;
}

::hx::ObjectPtr< Member_obj > Member_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic d,::String gi) {
	Member_obj *__this = (Member_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Member_obj), true, "hxdiscord.types.Member"));
	*(void **)__this = Member_obj::_hx_vtable;
	__this->__construct(d,gi);
	return __this;
}

Member_obj::Member_obj()
{
}

void Member_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Member);
	HX_MARK_MEMBER_NAME(nick,"nick");
	HX_MARK_MEMBER_NAME(avatar,"avatar");
	HX_MARK_MEMBER_NAME(roles,"roles");
	HX_MARK_MEMBER_NAME(joined_at,"joined_at");
	HX_MARK_MEMBER_NAME(premium_since,"premium_since");
	HX_MARK_MEMBER_NAME(deaf,"deaf");
	HX_MARK_MEMBER_NAME(mute,"mute");
	HX_MARK_MEMBER_NAME(user,"user");
	HX_MARK_MEMBER_NAME(flags,"flags");
	HX_MARK_MEMBER_NAME(pending,"pending");
	HX_MARK_MEMBER_NAME(permissions,"permissions");
	HX_MARK_MEMBER_NAME(communication_disabled_until,"communication_disabled_until");
	HX_MARK_MEMBER_NAME(guild_id,"guild_id");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(permissionsBitwise,"permissionsBitwise");
	HX_MARK_END_CLASS();
}

void Member_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nick,"nick");
	HX_VISIT_MEMBER_NAME(avatar,"avatar");
	HX_VISIT_MEMBER_NAME(roles,"roles");
	HX_VISIT_MEMBER_NAME(joined_at,"joined_at");
	HX_VISIT_MEMBER_NAME(premium_since,"premium_since");
	HX_VISIT_MEMBER_NAME(deaf,"deaf");
	HX_VISIT_MEMBER_NAME(mute,"mute");
	HX_VISIT_MEMBER_NAME(user,"user");
	HX_VISIT_MEMBER_NAME(flags,"flags");
	HX_VISIT_MEMBER_NAME(pending,"pending");
	HX_VISIT_MEMBER_NAME(permissions,"permissions");
	HX_VISIT_MEMBER_NAME(communication_disabled_until,"communication_disabled_until");
	HX_VISIT_MEMBER_NAME(guild_id,"guild_id");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(permissionsBitwise,"permissionsBitwise");
}

::hx::Val Member_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ban") ) { return ::hx::Val( ban_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"nick") ) { return ::hx::Val( nick ); }
		if (HX_FIELD_EQ(inName,"deaf") ) { return ::hx::Val( deaf ); }
		if (HX_FIELD_EQ(inName,"mute") ) { return ::hx::Val( mute ); }
		if (HX_FIELD_EQ(inName,"user") ) { return ::hx::Val( user ); }
		if (HX_FIELD_EQ(inName,"kick") ) { return ::hx::Val( kick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"roles") ) { return ::hx::Val( roles ); }
		if (HX_FIELD_EQ(inName,"flags") ) { return ::hx::Val( flags ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { return ::hx::Val( avatar ); }
		if (HX_FIELD_EQ(inName,"modify") ) { return ::hx::Val( modify_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pending") ) { return ::hx::Val( pending ); }
		if (HX_FIELD_EQ(inName,"setNick") ) { return ::hx::Val( setNick_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMute") ) { return ::hx::Val( setMute_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDeaf") ) { return ::hx::Val( setDeaf_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"guild_id") ) { return ::hx::Val( guild_id ); }
		if (HX_FIELD_EQ(inName,"setRoles") ) { return ::hx::Val( setRoles_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFlags") ) { return ::hx::Val( setFlags_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"joined_at") ) { return ::hx::Val( joined_at ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setTimeout") ) { return ::hx::Val( setTimeout_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"permissions") ) { return ::hx::Val( permissions ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premium_since") ) { return ::hx::Val( premium_since ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"moveVoiceChannel") ) { return ::hx::Val( moveVoiceChannel_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"permissionsBitwise") ) { return ::hx::Val( permissionsBitwise ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"communication_disabled_until") ) { return ::hx::Val( communication_disabled_until ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Member_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"nick") ) { nick=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deaf") ) { deaf=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mute") ) { mute=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast<  ::hxdiscord::types::User >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"roles") ) { roles=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flags") ) { flags=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { avatar=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pending") ) { pending=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"guild_id") ) { guild_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"joined_at") ) { joined_at=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"permissions") ) { permissions=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premium_since") ) { premium_since=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"permissionsBitwise") ) { permissionsBitwise=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"communication_disabled_until") ) { communication_disabled_until=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Member_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nick",a3,7b,05,49));
	outFields->push(HX_("avatar",19,80,5c,fa));
	outFields->push(HX_("roles",3d,1c,5f,ed));
	outFields->push(HX_("joined_at",e9,b3,3e,98));
	outFields->push(HX_("premium_since",92,10,58,59));
	outFields->push(HX_("deaf",a6,4e,66,42));
	outFields->push(HX_("mute",d9,6e,65,48));
	outFields->push(HX_("user",4b,92,ad,4d));
	outFields->push(HX_("flags",47,2b,8c,02));
	outFields->push(HX_("pending",57,98,ec,2b));
	outFields->push(HX_("permissions",84,7c,d4,0e));
	outFields->push(HX_("communication_disabled_until",e4,62,06,75));
	outFields->push(HX_("guild_id",27,82,bc,71));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("permissionsBitwise",4d,1c,6b,ee));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Member_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Member_obj,nick),HX_("nick",a3,7b,05,49)},
	{::hx::fsString,(int)offsetof(Member_obj,avatar),HX_("avatar",19,80,5c,fa)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Member_obj,roles),HX_("roles",3d,1c,5f,ed)},
	{::hx::fsString,(int)offsetof(Member_obj,joined_at),HX_("joined_at",e9,b3,3e,98)},
	{::hx::fsString,(int)offsetof(Member_obj,premium_since),HX_("premium_since",92,10,58,59)},
	{::hx::fsBool,(int)offsetof(Member_obj,deaf),HX_("deaf",a6,4e,66,42)},
	{::hx::fsBool,(int)offsetof(Member_obj,mute),HX_("mute",d9,6e,65,48)},
	{::hx::fsObject /*  ::hxdiscord::types::User */ ,(int)offsetof(Member_obj,user),HX_("user",4b,92,ad,4d)},
	{::hx::fsInt,(int)offsetof(Member_obj,flags),HX_("flags",47,2b,8c,02)},
	{::hx::fsBool,(int)offsetof(Member_obj,pending),HX_("pending",57,98,ec,2b)},
	{::hx::fsString,(int)offsetof(Member_obj,permissions),HX_("permissions",84,7c,d4,0e)},
	{::hx::fsString,(int)offsetof(Member_obj,communication_disabled_until),HX_("communication_disabled_until",e4,62,06,75)},
	{::hx::fsString,(int)offsetof(Member_obj,guild_id),HX_("guild_id",27,82,bc,71)},
	{::hx::fsString,(int)offsetof(Member_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Member_obj,permissionsBitwise),HX_("permissionsBitwise",4d,1c,6b,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Member_obj_sStaticStorageInfo = 0;
#endif

static ::String Member_obj_sMemberFields[] = {
	HX_("nick",a3,7b,05,49),
	HX_("avatar",19,80,5c,fa),
	HX_("roles",3d,1c,5f,ed),
	HX_("joined_at",e9,b3,3e,98),
	HX_("premium_since",92,10,58,59),
	HX_("deaf",a6,4e,66,42),
	HX_("mute",d9,6e,65,48),
	HX_("user",4b,92,ad,4d),
	HX_("flags",47,2b,8c,02),
	HX_("pending",57,98,ec,2b),
	HX_("permissions",84,7c,d4,0e),
	HX_("communication_disabled_until",e4,62,06,75),
	HX_("guild_id",27,82,bc,71),
	HX_("id",db,5b,00,00),
	HX_("permissionsBitwise",4d,1c,6b,ee),
	HX_("ban",cf,b1,4a,00),
	HX_("kick",c6,d7,09,47),
	HX_("modify",7a,14,ca,c0),
	HX_("setNick",65,bc,89,0e),
	HX_("setRoles",3b,85,93,fb),
	HX_("setMute",9b,af,e9,0d),
	HX_("setDeaf",68,8f,ea,07),
	HX_("moveVoiceChannel",e2,01,22,3d),
	HX_("setTimeout",1f,3f,d6,2b),
	HX_("setFlags",45,94,c0,10),
	::String(null()) };

::hx::Class Member_obj::__mClass;

void Member_obj::__register()
{
	Member_obj _hx_dummy;
	Member_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.types.Member",e1,a8,bc,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Member_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Member_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Member_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Member_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace types
