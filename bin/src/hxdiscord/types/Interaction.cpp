// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_endpoints_Endpoints
#include <hxdiscord/endpoints/Endpoints.h>
#endif
#ifndef INCLUDED_hxdiscord_types_Interaction
#include <hxdiscord/types/Interaction.h>
#endif
#ifndef INCLUDED_hxdiscord_types_message_ActionRow
#include <hxdiscord/types/message/ActionRow.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_7_new,"hxdiscord.types.Interaction","new",0x06d7da5d,"hxdiscord.types.Interaction.new","hxdiscord/types/Interaction.hx",7,0x102765f5)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_78_reply,"hxdiscord.types.Interaction","reply",0x9dde4c67,"hxdiscord.types.Interaction.reply","hxdiscord/types/Interaction.hx",78,0x102765f5)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_93_editComponent,"hxdiscord.types.Interaction","editComponent",0xe2f0bd90,"hxdiscord.types.Interaction.editComponent","hxdiscord/types/Interaction.hx",93,0x102765f5)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_104_showModal,"hxdiscord.types.Interaction","showModal",0x5623abad,"hxdiscord.types.Interaction.showModal","hxdiscord/types/Interaction.hx",104,0x102765f5)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_112_getValue,"hxdiscord.types.Interaction","getValue",0xcb152fde,"hxdiscord.types.Interaction.getValue","hxdiscord/types/Interaction.hx",112,0x102765f5)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_141_think,"hxdiscord.types.Interaction","think",0xc6a1cb2f,"hxdiscord.types.Interaction.think","hxdiscord/types/Interaction.hx",141,0x102765f5)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3fb0d76ab69635_149_edit,"hxdiscord.types.Interaction","edit",0xf0137d6d,"hxdiscord.types.Interaction.edit","hxdiscord/types/Interaction.hx",149,0x102765f5)
namespace hxdiscord{
namespace types{

void Interaction_obj::__construct( ::Dynamic ins, ::hxdiscord::DiscordClient _client, ::Dynamic parsedJSON){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_7_new)
HXLINE(  20)		this->wasThinking = false;
HXLINE(  38)		this->username = ( (::String)(ins->__Field(HX_("username",16,86,eb,20),::hx::paccDynamic)) );
HXLINE(  39)		this->public_flags = ( (int)(ins->__Field(HX_("public_flags",f1,57,b2,cc),::hx::paccDynamic)) );
HXLINE(  40)		this->id = ( (::String)(ins->__Field(HX_("id",db,5b,00,00),::hx::paccDynamic)) );
HXLINE(  41)		this->discriminator = ( (::String)(ins->__Field(HX_("discriminator",9c,72,43,23),::hx::paccDynamic)) );
HXLINE(  42)		this->avatar_decoration =  ::Dynamic(ins->__Field(HX_("avatar_decoration",d6,16,5f,d8),::hx::paccDynamic));
HXLINE(  43)		this->user = ins->__Field(HX_("user",4b,92,ad,4d),::hx::paccDynamic);
HXLINE(  44)		this->member = ins->__Field(HX_("member",5a,e2,b5,04),::hx::paccDynamic);
HXLINE(  45)		this->avatar = ( (::String)(ins->__Field(HX_("avatar",19,80,5c,fa),::hx::paccDynamic)) );
HXLINE(  46)		this->channel_id = ( (::String)(ins->__Field(HX_("channel_id",17,0d,9b,03),::hx::paccDynamic)) );
HXLINE(  47)		this->guild_id = ( (::String)(ins->__Field(HX_("guild_id",27,82,bc,71),::hx::paccDynamic)) );
HXLINE(  48)		this->name = ( (::String)(ins->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE(  49)		this->intId = ( (::String)(ins->__Field(HX_("intId",aa,a6,20,be),::hx::paccDynamic)) );
HXLINE(  50)		this->components = ( (::cpp::VirtualArray)(ins->__Field(HX_("components",16,b5,1e,5a),::hx::paccDynamic)) );
HXLINE(  51)		this->options = ( (::cpp::VirtualArray)(ins->__Field(HX_("options",5e,33,fe,df),::hx::paccDynamic)) );
HXLINE(  52)		this->type = ( (int)(ins->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXLINE(  53)		this->token = ( (::String)(ins->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic)) );
HXLINE(  54)		this->data = ins->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic);
HXLINE(  56)		if (::hx::IsNotNull( this->options )) {
HXLINE(  58)			this->dataOptions = this->options->__get(0);
            		}
            		else {
HXLINE(  62)			this->dataOptions =  ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("value",71,7f,b8,31),HX_("no_options",20,96,62,30))
            				->setFixed(1,HX_("name",4b,72,ff,48),HX_("no_options",20,96,62,30))
            				->setFixed(2,HX_("type",ba,f2,08,4d),3));
            		}
            	}

Dynamic Interaction_obj::__CreateEmpty() { return new Interaction_obj; }

void *Interaction_obj::_hx_vtable = 0;

Dynamic Interaction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interaction_obj > _hx_result = new Interaction_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Interaction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4e0adb75;
}

void Interaction_obj::reply( ::Dynamic ic, ::Dynamic ephemeral){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_78_reply)
HXDLIN(  78)		if (this->wasThinking) {
HXLINE(  80)			::hxdiscord::endpoints::Endpoints_obj::editInteractionResponse(ic,this->token);
            		}
            		else {
HXLINE(  83)			::hxdiscord::endpoints::Endpoints_obj::sendInteractionCallback(ic,this->intId,this->token,4,ephemeral);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,reply,(void))

void Interaction_obj::editComponent( ::Dynamic ic){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_93_editComponent)
HXDLIN(  93)		::hxdiscord::endpoints::Endpoints_obj::sendInteractionCallback(ic,this->intId,this->token,7,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,editComponent,(void))

void Interaction_obj::showModal(::String title,::String custom_id,::Array< ::Dynamic> imc){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_104_showModal)
HXDLIN( 104)		::hxdiscord::endpoints::Endpoints_obj::showInteractionModal(imc,this->intId,this->token,this->type,title,custom_id);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,showModal,(void))

 ::Dynamic Interaction_obj::getValue(::String optionName){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_112_getValue)
HXLINE( 113)		 ::Dynamic daThing = HX_("optionName",60,d0,9a,8e);
HXLINE( 115)		if (::hx::IsNotNull( this->options )) {
HXLINE( 117)			int _g = 0;
HXDLIN( 117)			::cpp::VirtualArray _g1 = this->options;
HXDLIN( 117)			while((_g < _g1->get_length())){
HXLINE( 117)				 ::Dynamic _hx_int = _g1->__get(_g);
HXDLIN( 117)				_g = (_g + 1);
HXLINE( 119)				if (::hx::IsEq( _hx_int->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),optionName )) {
HXLINE( 121)					daThing =  ::Dynamic(_hx_int->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            				}
            			}
            		}
            		else {
HXLINE( 127)			daThing = null();
            		}
HXLINE( 129)		return daThing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,getValue,return )

void Interaction_obj::think(){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_141_think)
HXLINE( 142)		::hxdiscord::endpoints::Endpoints_obj::makeInteractionThink(this->intId,this->token,null());
HXLINE( 143)		this->wasThinking = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,think,(void))

void Interaction_obj::edit( ::Dynamic ic){
            	HX_STACKFRAME(&_hx_pos_7f3fb0d76ab69635_149_edit)
HXDLIN( 149)		::hxdiscord::endpoints::Endpoints_obj::editInteractionResponse(ic,this->token);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,edit,(void))


::hx::ObjectPtr< Interaction_obj > Interaction_obj::__new( ::Dynamic ins, ::hxdiscord::DiscordClient _client, ::Dynamic parsedJSON) {
	::hx::ObjectPtr< Interaction_obj > __this = new Interaction_obj();
	__this->__construct(ins,_client,parsedJSON);
	return __this;
}

::hx::ObjectPtr< Interaction_obj > Interaction_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic ins, ::hxdiscord::DiscordClient _client, ::Dynamic parsedJSON) {
	Interaction_obj *__this = (Interaction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interaction_obj), true, "hxdiscord.types.Interaction"));
	*(void **)__this = Interaction_obj::_hx_vtable;
	__this->__construct(ins,_client,parsedJSON);
	return __this;
}

Interaction_obj::Interaction_obj()
{
}

void Interaction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interaction);
	HX_MARK_MEMBER_NAME(username,"username");
	HX_MARK_MEMBER_NAME(public_flags,"public_flags");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(discriminator,"discriminator");
	HX_MARK_MEMBER_NAME(avatar_decoration,"avatar_decoration");
	HX_MARK_MEMBER_NAME(avatar,"avatar");
	HX_MARK_MEMBER_NAME(user,"user");
	HX_MARK_MEMBER_NAME(channel_id,"channel_id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(member,"member");
	HX_MARK_MEMBER_NAME(intId,"intId");
	HX_MARK_MEMBER_NAME(wasThinking,"wasThinking");
	HX_MARK_MEMBER_NAME(guild_id,"guild_id");
	HX_MARK_MEMBER_NAME(components,"components");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(dataOptions,"dataOptions");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(token,"token");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void Interaction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(username,"username");
	HX_VISIT_MEMBER_NAME(public_flags,"public_flags");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(discriminator,"discriminator");
	HX_VISIT_MEMBER_NAME(avatar_decoration,"avatar_decoration");
	HX_VISIT_MEMBER_NAME(avatar,"avatar");
	HX_VISIT_MEMBER_NAME(user,"user");
	HX_VISIT_MEMBER_NAME(channel_id,"channel_id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(member,"member");
	HX_VISIT_MEMBER_NAME(intId,"intId");
	HX_VISIT_MEMBER_NAME(wasThinking,"wasThinking");
	HX_VISIT_MEMBER_NAME(guild_id,"guild_id");
	HX_VISIT_MEMBER_NAME(components,"components");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(dataOptions,"dataOptions");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(token,"token");
	HX_VISIT_MEMBER_NAME(data,"data");
}

::hx::Val Interaction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { return ::hx::Val( user ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"edit") ) { return ::hx::Val( edit_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"intId") ) { return ::hx::Val( intId ); }
		if (HX_FIELD_EQ(inName,"token") ) { return ::hx::Val( token ); }
		if (HX_FIELD_EQ(inName,"reply") ) { return ::hx::Val( reply_dyn() ); }
		if (HX_FIELD_EQ(inName,"think") ) { return ::hx::Val( think_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { return ::hx::Val( avatar ); }
		if (HX_FIELD_EQ(inName,"member") ) { return ::hx::Val( member ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { return ::hx::Val( username ); }
		if (HX_FIELD_EQ(inName,"guild_id") ) { return ::hx::Val( guild_id ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"showModal") ) { return ::hx::Val( showModal_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channel_id") ) { return ::hx::Val( channel_id ); }
		if (HX_FIELD_EQ(inName,"components") ) { return ::hx::Val( components ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wasThinking") ) { return ::hx::Val( wasThinking ); }
		if (HX_FIELD_EQ(inName,"dataOptions") ) { return ::hx::Val( dataOptions ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"public_flags") ) { return ::hx::Val( public_flags ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"discriminator") ) { return ::hx::Val( discriminator ); }
		if (HX_FIELD_EQ(inName,"editComponent") ) { return ::hx::Val( editComponent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"avatar_decoration") ) { return ::hx::Val( avatar_decoration ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Interaction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"intId") ) { intId=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"token") ) { token=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { avatar=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"member") ) { member=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { username=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guild_id") ) { guild_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channel_id") ) { channel_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"components") ) { components=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wasThinking") ) { wasThinking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataOptions") ) { dataOptions=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"public_flags") ) { public_flags=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"discriminator") ) { discriminator=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"avatar_decoration") ) { avatar_decoration=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interaction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("username",16,86,eb,20));
	outFields->push(HX_("public_flags",f1,57,b2,cc));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("discriminator",9c,72,43,23));
	outFields->push(HX_("avatar_decoration",d6,16,5f,d8));
	outFields->push(HX_("avatar",19,80,5c,fa));
	outFields->push(HX_("user",4b,92,ad,4d));
	outFields->push(HX_("channel_id",17,0d,9b,03));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("member",5a,e2,b5,04));
	outFields->push(HX_("intId",aa,a6,20,be));
	outFields->push(HX_("wasThinking",79,b6,e9,c7));
	outFields->push(HX_("guild_id",27,82,bc,71));
	outFields->push(HX_("components",16,b5,1e,5a));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("dataOptions",54,7e,e9,21));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("token",f9,82,2b,14));
	outFields->push(HX_("data",2a,56,63,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Interaction_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Interaction_obj,username),HX_("username",16,86,eb,20)},
	{::hx::fsInt,(int)offsetof(Interaction_obj,public_flags),HX_("public_flags",f1,57,b2,cc)},
	{::hx::fsString,(int)offsetof(Interaction_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(Interaction_obj,discriminator),HX_("discriminator",9c,72,43,23)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interaction_obj,avatar_decoration),HX_("avatar_decoration",d6,16,5f,d8)},
	{::hx::fsString,(int)offsetof(Interaction_obj,avatar),HX_("avatar",19,80,5c,fa)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interaction_obj,user),HX_("user",4b,92,ad,4d)},
	{::hx::fsString,(int)offsetof(Interaction_obj,channel_id),HX_("channel_id",17,0d,9b,03)},
	{::hx::fsString,(int)offsetof(Interaction_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interaction_obj,member),HX_("member",5a,e2,b5,04)},
	{::hx::fsString,(int)offsetof(Interaction_obj,intId),HX_("intId",aa,a6,20,be)},
	{::hx::fsBool,(int)offsetof(Interaction_obj,wasThinking),HX_("wasThinking",79,b6,e9,c7)},
	{::hx::fsString,(int)offsetof(Interaction_obj,guild_id),HX_("guild_id",27,82,bc,71)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Interaction_obj,components),HX_("components",16,b5,1e,5a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Interaction_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interaction_obj,dataOptions),HX_("dataOptions",54,7e,e9,21)},
	{::hx::fsInt,(int)offsetof(Interaction_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsString,(int)offsetof(Interaction_obj,token),HX_("token",f9,82,2b,14)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interaction_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Interaction_obj_sStaticStorageInfo = 0;
#endif

static ::String Interaction_obj_sMemberFields[] = {
	HX_("username",16,86,eb,20),
	HX_("public_flags",f1,57,b2,cc),
	HX_("id",db,5b,00,00),
	HX_("discriminator",9c,72,43,23),
	HX_("avatar_decoration",d6,16,5f,d8),
	HX_("avatar",19,80,5c,fa),
	HX_("user",4b,92,ad,4d),
	HX_("channel_id",17,0d,9b,03),
	HX_("name",4b,72,ff,48),
	HX_("member",5a,e2,b5,04),
	HX_("intId",aa,a6,20,be),
	HX_("wasThinking",79,b6,e9,c7),
	HX_("guild_id",27,82,bc,71),
	HX_("components",16,b5,1e,5a),
	HX_("options",5e,33,fe,df),
	HX_("dataOptions",54,7e,e9,21),
	HX_("type",ba,f2,08,4d),
	HX_("token",f9,82,2b,14),
	HX_("data",2a,56,63,42),
	HX_("reply",2a,09,c6,e6),
	HX_("editComponent",53,75,d7,e1),
	HX_("showModal",f0,85,bc,3a),
	HX_("getValue",fb,8e,8f,91),
	HX_("think",f2,87,89,0f),
	HX_("edit",0a,ca,0e,43),
	::String(null()) };

::hx::Class Interaction_obj::__mClass;

void Interaction_obj::__register()
{
	Interaction_obj _hx_dummy;
	Interaction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.types.Interaction",eb,67,32,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Interaction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Interaction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interaction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interaction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace types
