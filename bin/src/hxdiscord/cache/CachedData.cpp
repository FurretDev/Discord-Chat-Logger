// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hxdiscord_DiscordClient
#include <hxdiscord/DiscordClient.h>
#endif
#ifndef INCLUDED_hxdiscord_cache_CachedData
#include <hxdiscord/cache/CachedData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3556f87bcad2589f_11_new,"hxdiscord.cache.CachedData","new",0xa0d887fc,"hxdiscord.cache.CachedData.new","hxdiscord/cache/CachedData.hx",11,0x0d1782f2)
namespace hxdiscord{
namespace cache{

void CachedData_obj::__construct( ::hxdiscord::DiscordClient dc){
            	HX_GC_STACKFRAME(&_hx_pos_3556f87bcad2589f_11_new)
HXLINE(  21)		this->presences =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  20)		this->roles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  19)		this->guilds_roles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  18)		this->guilds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  17)		this->guild_members =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  13)		this->dc = dc;
            	}

Dynamic CachedData_obj::__CreateEmpty() { return new CachedData_obj; }

void *CachedData_obj::_hx_vtable = 0;

Dynamic CachedData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CachedData_obj > _hx_result = new CachedData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CachedData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24929032;
}


::hx::ObjectPtr< CachedData_obj > CachedData_obj::__new( ::hxdiscord::DiscordClient dc) {
	::hx::ObjectPtr< CachedData_obj > __this = new CachedData_obj();
	__this->__construct(dc);
	return __this;
}

::hx::ObjectPtr< CachedData_obj > CachedData_obj::__alloc(::hx::Ctx *_hx_ctx, ::hxdiscord::DiscordClient dc) {
	CachedData_obj *__this = (CachedData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CachedData_obj), true, "hxdiscord.cache.CachedData"));
	*(void **)__this = CachedData_obj::_hx_vtable;
	__this->__construct(dc);
	return __this;
}

CachedData_obj::CachedData_obj()
{
}

void CachedData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CachedData);
	HX_MARK_MEMBER_NAME(dc,"dc");
	HX_MARK_MEMBER_NAME(guild_members,"guild_members");
	HX_MARK_MEMBER_NAME(guilds,"guilds");
	HX_MARK_MEMBER_NAME(guilds_roles,"guilds_roles");
	HX_MARK_MEMBER_NAME(roles,"roles");
	HX_MARK_MEMBER_NAME(presences,"presences");
	HX_MARK_END_CLASS();
}

void CachedData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dc,"dc");
	HX_VISIT_MEMBER_NAME(guild_members,"guild_members");
	HX_VISIT_MEMBER_NAME(guilds,"guilds");
	HX_VISIT_MEMBER_NAME(guilds_roles,"guilds_roles");
	HX_VISIT_MEMBER_NAME(roles,"roles");
	HX_VISIT_MEMBER_NAME(presences,"presences");
}

::hx::Val CachedData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dc") ) { return ::hx::Val( dc ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"roles") ) { return ::hx::Val( roles ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"guilds") ) { return ::hx::Val( guilds ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"presences") ) { return ::hx::Val( presences ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"guilds_roles") ) { return ::hx::Val( guilds_roles ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"guild_members") ) { return ::hx::Val( guild_members ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CachedData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dc") ) { dc=inValue.Cast<  ::hxdiscord::DiscordClient >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"roles") ) { roles=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"guilds") ) { guilds=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"presences") ) { presences=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"guilds_roles") ) { guilds_roles=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"guild_members") ) { guild_members=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CachedData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("dc",7f,57,00,00));
	outFields->push(HX_("guild_members",0d,b3,09,d2));
	outFields->push(HX_("guilds",60,bb,5d,d2));
	outFields->push(HX_("guilds_roles",de,e6,2e,25));
	outFields->push(HX_("roles",3d,1c,5f,ed));
	outFields->push(HX_("presences",d8,a1,90,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CachedData_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxdiscord::DiscordClient */ ,(int)offsetof(CachedData_obj,dc),HX_("dc",7f,57,00,00)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(CachedData_obj,guild_members),HX_("guild_members",0d,b3,09,d2)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(CachedData_obj,guilds),HX_("guilds",60,bb,5d,d2)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(CachedData_obj,guilds_roles),HX_("guilds_roles",de,e6,2e,25)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(CachedData_obj,roles),HX_("roles",3d,1c,5f,ed)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(CachedData_obj,presences),HX_("presences",d8,a1,90,95)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CachedData_obj_sStaticStorageInfo = 0;
#endif

static ::String CachedData_obj_sMemberFields[] = {
	HX_("dc",7f,57,00,00),
	HX_("guild_members",0d,b3,09,d2),
	HX_("guilds",60,bb,5d,d2),
	HX_("guilds_roles",de,e6,2e,25),
	HX_("roles",3d,1c,5f,ed),
	HX_("presences",d8,a1,90,95),
	::String(null()) };

::hx::Class CachedData_obj::__mClass;

void CachedData_obj::__register()
{
	CachedData_obj _hx_dummy;
	CachedData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxdiscord.cache.CachedData",0a,1a,06,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CachedData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CachedData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CachedData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CachedData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxdiscord
} // end namespace cache
